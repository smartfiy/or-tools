// Copyright 2010-2021 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Protocol buffer used to parametrize the routing library, in particular the
// search parameters such as first solution heuristics and local search
// neighborhoods.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: ortools/constraint_solver/routing_parameters.proto

package constraintsolver

import (
	sat "github.com/airspacetechnologies/or-tools/ortools/gen/ortools/go/sat"
	util "github.com/airspacetechnologies/or-tools/ortools/gen/ortools/go/util"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Underlying solver to use in dimension scheduling, respectively for
// continuous and mixed models.
type RoutingSearchParameters_SchedulingSolver int32

const (
	RoutingSearchParameters_UNSET  RoutingSearchParameters_SchedulingSolver = 0
	RoutingSearchParameters_GLOP   RoutingSearchParameters_SchedulingSolver = 1
	RoutingSearchParameters_CP_SAT RoutingSearchParameters_SchedulingSolver = 2
)

// Enum value maps for RoutingSearchParameters_SchedulingSolver.
var (
	RoutingSearchParameters_SchedulingSolver_name = map[int32]string{
		0: "UNSET",
		1: "GLOP",
		2: "CP_SAT",
	}
	RoutingSearchParameters_SchedulingSolver_value = map[string]int32{
		"UNSET":  0,
		"GLOP":   1,
		"CP_SAT": 2,
	}
)

func (x RoutingSearchParameters_SchedulingSolver) Enum() *RoutingSearchParameters_SchedulingSolver {
	p := new(RoutingSearchParameters_SchedulingSolver)
	*p = x
	return p
}

func (x RoutingSearchParameters_SchedulingSolver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingSearchParameters_SchedulingSolver) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_constraint_solver_routing_parameters_proto_enumTypes[0].Descriptor()
}

func (RoutingSearchParameters_SchedulingSolver) Type() protoreflect.EnumType {
	return &file_ortools_constraint_solver_routing_parameters_proto_enumTypes[0]
}

func (x RoutingSearchParameters_SchedulingSolver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingSearchParameters_SchedulingSolver.Descriptor instead.
func (RoutingSearchParameters_SchedulingSolver) EnumDescriptor() ([]byte, []int) {
	return file_ortools_constraint_solver_routing_parameters_proto_rawDescGZIP(), []int{0, 0}
}

// Parameters defining the search used to solve vehicle routing problems.
//
// If a parameter is unset (or, equivalently, set to its default value),
// then the routing library will pick its preferred value for that parameter
// automatically: this should be the case for most parameters.
// To see those "default" parameters, call GetDefaultRoutingSearchParameters().
// Next ID: 49
type RoutingSearchParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First solution strategies, used as starting point of local search.
	FirstSolutionStrategy FirstSolutionStrategy_Value `protobuf:"varint,1,opt,name=first_solution_strategy,json=firstSolutionStrategy,proto3,enum=operations_research.FirstSolutionStrategy_Value" json:"first_solution_strategy,omitempty"`
	// --- Advanced first solutions strategy settings ---
	// Don't touch these unless you know what you are doing.
	//
	// Use filtered version of first solution strategy if available.
	UseUnfilteredFirstSolutionStrategy bool `protobuf:"varint,2,opt,name=use_unfiltered_first_solution_strategy,json=useUnfilteredFirstSolutionStrategy,proto3" json:"use_unfiltered_first_solution_strategy,omitempty"`
	// Parameters specific to the Savings first solution heuristic.
	// Ratio (in ]0, 1]) of neighbors to consider for each node when constructing
	// the savings. If unspecified, its value is considered to be 1.0.
	SavingsNeighborsRatio float64 `protobuf:"fixed64,14,opt,name=savings_neighbors_ratio,json=savingsNeighborsRatio,proto3" json:"savings_neighbors_ratio,omitempty"`
	// The number of neighbors considered for each node in the Savings heuristic
	// is chosen so that the space used to store the savings doesn't exceed
	// savings_max_memory_usage_bytes, which must be in ]0, 1e10].
	// NOTE: If both savings_neighbors_ratio and savings_max_memory_usage_bytes
	// are specified, the number of neighbors considered for each node will be the
	// minimum of the two numbers determined by these parameters.
	SavingsMaxMemoryUsageBytes float64 `protobuf:"fixed64,23,opt,name=savings_max_memory_usage_bytes,json=savingsMaxMemoryUsageBytes,proto3" json:"savings_max_memory_usage_bytes,omitempty"`
	// Add savings related to reverse arcs when finding the nearest neighbors
	// of the nodes.
	SavingsAddReverseArcs bool `protobuf:"varint,15,opt,name=savings_add_reverse_arcs,json=savingsAddReverseArcs,proto3" json:"savings_add_reverse_arcs,omitempty"`
	// Coefficient of the cost of the arc for which the saving value is being
	// computed:
	// Saving(a-->b) = Cost(a-->end) + Cost(start-->b)
	//                 - savings_arc_coefficient * Cost(a-->b)
	// This parameter must be greater than 0, and its default value is 1.
	SavingsArcCoefficient float64 `protobuf:"fixed64,18,opt,name=savings_arc_coefficient,json=savingsArcCoefficient,proto3" json:"savings_arc_coefficient,omitempty"`
	// When true, the routes are built in parallel, sequentially otherwise.
	SavingsParallelRoutes bool `protobuf:"varint,19,opt,name=savings_parallel_routes,json=savingsParallelRoutes,proto3" json:"savings_parallel_routes,omitempty"`
	// Ratio (between 0 and 1) of available vehicles in the model on which
	// farthest nodes of the model are inserted as seeds in the
	// GlobalCheapestInsertion first solution heuristic.
	CheapestInsertionFarthestSeedsRatio float64 `protobuf:"fixed64,16,opt,name=cheapest_insertion_farthest_seeds_ratio,json=cheapestInsertionFarthestSeedsRatio,proto3" json:"cheapest_insertion_farthest_seeds_ratio,omitempty"`
	// Ratio (in ]0, 1]) of closest non start/end nodes to consider as neighbors
	// for each node when creating new insertions in the parallel/sequential
	// cheapest insertion heuristic.
	// If not overridden, its default value is 1, meaning all neighbors will be
	// considered.
	// The neighborhood ratio is coupled with the corresponding min_neighbors
	// integer, indicating the minimum number of neighbors to consider for each
	// node:
	// num_closest_neighbors =
	//        max(min_neighbors, neighbors_ratio * NUM_NON_START_END_NODES)
	// This minimum number of neighbors must be greater or equal to 1, its
	// default value.
	//
	// Neighbors ratio and minimum number of neighbors for the first solution
	// heuristic.
	CheapestInsertionFirstSolutionNeighborsRatio float64 `protobuf:"fixed64,21,opt,name=cheapest_insertion_first_solution_neighbors_ratio,json=cheapestInsertionFirstSolutionNeighborsRatio,proto3" json:"cheapest_insertion_first_solution_neighbors_ratio,omitempty"`
	CheapestInsertionFirstSolutionMinNeighbors   int32   `protobuf:"varint,44,opt,name=cheapest_insertion_first_solution_min_neighbors,json=cheapestInsertionFirstSolutionMinNeighbors,proto3" json:"cheapest_insertion_first_solution_min_neighbors,omitempty"`
	// Neighbors ratio and minimum number of neighbors for the heuristic when used
	// in a local search operator (see
	// local_search_operators.use_global_cheapest_insertion_path_lns and
	// local_search_operators.use_global_cheapest_insertion_chain_lns below).
	CheapestInsertionLsOperatorNeighborsRatio float64 `protobuf:"fixed64,31,opt,name=cheapest_insertion_ls_operator_neighbors_ratio,json=cheapestInsertionLsOperatorNeighborsRatio,proto3" json:"cheapest_insertion_ls_operator_neighbors_ratio,omitempty"`
	CheapestInsertionLsOperatorMinNeighbors   int32   `protobuf:"varint,45,opt,name=cheapest_insertion_ls_operator_min_neighbors,json=cheapestInsertionLsOperatorMinNeighbors,proto3" json:"cheapest_insertion_ls_operator_min_neighbors,omitempty"`
	// Whether or not to only consider closest neighbors when initializing the
	// assignment for the first solution.
	CheapestInsertionFirstSolutionUseNeighborsRatioForInitialization bool `protobuf:"varint,46,opt,name=cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization,json=cheapestInsertionFirstSolutionUseNeighborsRatioForInitialization,proto3" json:"cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization,omitempty"`
	// Whether or not to consider entries making the nodes/pairs unperformed in
	// the GlobalCheapestInsertion heuristic.
	CheapestInsertionAddUnperformedEntries bool `protobuf:"varint,40,opt,name=cheapest_insertion_add_unperformed_entries,json=cheapestInsertionAddUnperformedEntries,proto3" json:"cheapest_insertion_add_unperformed_entries,omitempty"`
	// If true use minimum matching instead of minimal matching in the
	// Christofides algorithm.
	ChristofidesUseMinimumMatching bool                                                      `protobuf:"varint,30,opt,name=christofides_use_minimum_matching,json=christofidesUseMinimumMatching,proto3" json:"christofides_use_minimum_matching,omitempty"`
	LocalSearchOperators           *RoutingSearchParameters_LocalSearchNeighborhoodOperators `protobuf:"bytes,3,opt,name=local_search_operators,json=localSearchOperators,proto3" json:"local_search_operators,omitempty"`
	// If true, the solver will use multi-armed bandit concatenate operators. It
	// dynamically chooses the next neighbor operator in order to get the best
	// objective improvement.
	UseMultiArmedBanditConcatenateOperators bool `protobuf:"varint,41,opt,name=use_multi_armed_bandit_concatenate_operators,json=useMultiArmedBanditConcatenateOperators,proto3" json:"use_multi_armed_bandit_concatenate_operators,omitempty"`
	// Memory coefficient related to the multi-armed bandit compound operator.
	// Sets how much the objective improvement of previous accepted neighbors
	// influence the current average improvement.
	// This parameter should be between 0 and 1.
	MultiArmedBanditCompoundOperatorMemoryCoefficient float64 `protobuf:"fixed64,42,opt,name=multi_armed_bandit_compound_operator_memory_coefficient,json=multiArmedBanditCompoundOperatorMemoryCoefficient,proto3" json:"multi_armed_bandit_compound_operator_memory_coefficient,omitempty"`
	// Positive parameter defining the exploration coefficient of the multi-armed
	// bandit compound operator. Sets how often we explore rarely used and
	// unsuccessful in the past operators
	MultiArmedBanditCompoundOperatorExplorationCoefficient float64 `protobuf:"fixed64,43,opt,name=multi_armed_bandit_compound_operator_exploration_coefficient,json=multiArmedBanditCompoundOperatorExplorationCoefficient,proto3" json:"multi_armed_bandit_compound_operator_exploration_coefficient,omitempty"`
	// Number of expensive arcs to consider cutting in the RelocateExpensiveChain
	// neighborhood operator (see
	// LocalSearchNeighborhoodOperators.use_relocate_expensive_chain()).
	// This parameter must be greater than 2.
	// NOTE(user): The number of neighbors generated by the operator for
	// relocate_expensive_chain_num_arcs_to_consider = K is around
	// K*(K-1)/2 * number_of_routes * number_of_nodes.
	RelocateExpensiveChainNumArcsToConsider int32 `protobuf:"varint,20,opt,name=relocate_expensive_chain_num_arcs_to_consider,json=relocateExpensiveChainNumArcsToConsider,proto3" json:"relocate_expensive_chain_num_arcs_to_consider,omitempty"`
	// Number of expensive arcs to consider cutting in the
	// FilteredHeuristicExpensiveChainLNSOperator operator.
	HeuristicExpensiveChainLnsNumArcsToConsider int32 `protobuf:"varint,32,opt,name=heuristic_expensive_chain_lns_num_arcs_to_consider,json=heuristicExpensiveChainLnsNumArcsToConsider,proto3" json:"heuristic_expensive_chain_lns_num_arcs_to_consider,omitempty"`
	// Number of closest nodes to consider for each node during the destruction
	// phase of the FilteredHeuristicCloseNodesLNSOperator.
	HeuristicCloseNodesLnsNumNodes int32 `protobuf:"varint,35,opt,name=heuristic_close_nodes_lns_num_nodes,json=heuristicCloseNodesLnsNumNodes,proto3" json:"heuristic_close_nodes_lns_num_nodes,omitempty"`
	// Local search metaheuristics used to guide the search.
	LocalSearchMetaheuristic LocalSearchMetaheuristic_Value `protobuf:"varint,4,opt,name=local_search_metaheuristic,json=localSearchMetaheuristic,proto3,enum=operations_research.LocalSearchMetaheuristic_Value" json:"local_search_metaheuristic,omitempty"`
	// These are advanced settings which should not be modified unless you know
	// what you are doing.
	// Lambda coefficient used to penalize arc costs when GUIDED_LOCAL_SEARCH is
	// used. Must be positive.
	GuidedLocalSearchLambdaCoefficient float64 `protobuf:"fixed64,5,opt,name=guided_local_search_lambda_coefficient,json=guidedLocalSearchLambdaCoefficient,proto3" json:"guided_local_search_lambda_coefficient,omitempty"`
	// --- Search control ---
	//
	// If true, the solver should use depth-first search rather than local search
	// to solve the problem.
	UseDepthFirstSearch bool `protobuf:"varint,6,opt,name=use_depth_first_search,json=useDepthFirstSearch,proto3" json:"use_depth_first_search,omitempty"`
	// If true, use the CP solver to find a solution. Either local or depth-first
	// search will be used depending on the value of use_depth_first_search. Will
	// be run before the CP-SAT solver (cf. use_cp_sat).
	UseCp util.OptionalBoolean `protobuf:"varint,28,opt,name=use_cp,json=useCp,proto3,enum=operations_research.OptionalBoolean" json:"use_cp,omitempty"`
	// If true, use the CP-SAT solver to find a solution. If use_cp is also true,
	// the CP-SAT solver will be run after the CP solver if there is time
	// remaining and will use the CP solution as a hint for the CP-SAT search.
	// As of 5/2019, only TSP models can be solved.
	UseCpSat util.OptionalBoolean `protobuf:"varint,27,opt,name=use_cp_sat,json=useCpSat,proto3,enum=operations_research.OptionalBoolean" json:"use_cp_sat,omitempty"`
	// If true, use the CP-SAT solver to find a solution on generalized routing
	// model. If use_cp is also true, the CP-SAT solver will be run after the CP
	// solver if there is time remaining and will use the CP solution as a hint
	// for the CP-SAT search.
	UseGeneralizedCpSat util.OptionalBoolean `protobuf:"varint,47,opt,name=use_generalized_cp_sat,json=useGeneralizedCpSat,proto3,enum=operations_research.OptionalBoolean" json:"use_generalized_cp_sat,omitempty"`
	// If use_cp_sat or use_generalized_cp_sat is true, contains the SAT algorithm
	// parameters which will be used.
	SatParameters                *sat.SatParameters                       `protobuf:"bytes,48,opt,name=sat_parameters,json=satParameters,proto3" json:"sat_parameters,omitempty"`
	ContinuousSchedulingSolver   RoutingSearchParameters_SchedulingSolver `protobuf:"varint,33,opt,name=continuous_scheduling_solver,json=continuousSchedulingSolver,proto3,enum=operations_research.RoutingSearchParameters_SchedulingSolver" json:"continuous_scheduling_solver,omitempty"`
	MixedIntegerSchedulingSolver RoutingSearchParameters_SchedulingSolver `protobuf:"varint,34,opt,name=mixed_integer_scheduling_solver,json=mixedIntegerSchedulingSolver,proto3,enum=operations_research.RoutingSearchParameters_SchedulingSolver" json:"mixed_integer_scheduling_solver,omitempty"`
	// Minimum step by which the solution must be improved in local search. 0
	// means "unspecified". If this value is fractional, it will get rounded to
	// the nearest integer.
	OptimizationStep float64 `protobuf:"fixed64,7,opt,name=optimization_step,json=optimizationStep,proto3" json:"optimization_step,omitempty"`
	// Number of solutions to collect during the search. Corresponds to the best
	// solutions found during the search. 0 means "unspecified".
	NumberOfSolutionsToCollect int32 `protobuf:"varint,17,opt,name=number_of_solutions_to_collect,json=numberOfSolutionsToCollect,proto3" json:"number_of_solutions_to_collect,omitempty"`
	// -- Search limits --
	// Limit to the number of solutions generated during the search. 0 means
	// "unspecified".
	SolutionLimit int64 `protobuf:"varint,8,opt,name=solution_limit,json=solutionLimit,proto3" json:"solution_limit,omitempty"`
	// Limit to the time spent in the search.
	TimeLimit *durationpb.Duration `protobuf:"bytes,9,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	// Limit to the time spent in the completion search for each local search
	// neighbor.
	LnsTimeLimit *durationpb.Duration `protobuf:"bytes,10,opt,name=lns_time_limit,json=lnsTimeLimit,proto3" json:"lns_time_limit,omitempty"`
	// The improvement search limit is added to the solver if the following
	// parameters are set.
	ImprovementLimitParameters *RoutingSearchParameters_ImprovementSearchLimitParameters `protobuf:"bytes,37,opt,name=improvement_limit_parameters,json=improvementLimitParameters,proto3" json:"improvement_limit_parameters,omitempty"`
	// --- Propagation control ---
	// These are advanced settings which should not be modified unless you know
	// what you are doing.
	//
	// Use constraints with full propagation in routing model (instead of 'light'
	// propagation only). Full propagation is only necessary when using
	// depth-first search or for models which require strong propagation to
	// finalize the value of secondary variables.
	// Changing this setting to true will slow down the search in most cases and
	// increase memory consumption in all cases.
	UseFullPropagation bool `protobuf:"varint,11,opt,name=use_full_propagation,json=useFullPropagation,proto3" json:"use_full_propagation,omitempty"`
	// --- Miscellaneous ---
	// Some of these are advanced settings which should not be modified unless you
	// know what you are doing.
	//
	// Activates search logging. For each solution found during the search, the
	// following will be displayed: its objective value, the maximum objective
	// value since the beginning of the search, the elapsed time since the
	// beginning of the search, the number of branches explored in the search
	// tree, the number of failures in the search tree, the depth of the search
	// tree, the number of local search neighbors explored, the number of local
	// search neighbors filtered by local search filters, the number of local
	// search neighbors accepted, the total memory used and the percentage of the
	// search done.
	LogSearch bool `protobuf:"varint,13,opt,name=log_search,json=logSearch,proto3" json:"log_search,omitempty"`
	// In logs, cost values will be scaled and offset by the given values in the
	// following way: log_cost_scaling_factor * (cost + log_cost_offset)
	LogCostScalingFactor float64 `protobuf:"fixed64,22,opt,name=log_cost_scaling_factor,json=logCostScalingFactor,proto3" json:"log_cost_scaling_factor,omitempty"`
	LogCostOffset        float64 `protobuf:"fixed64,29,opt,name=log_cost_offset,json=logCostOffset,proto3" json:"log_cost_offset,omitempty"`
	// In logs, this tag will be appended to each line corresponding to a new
	// solution. Useful to sort out logs when several solves are run in parallel.
	LogTag string `protobuf:"bytes,36,opt,name=log_tag,json=logTag,proto3" json:"log_tag,omitempty"`
}

func (x *RoutingSearchParameters) Reset() {
	*x = RoutingSearchParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ortools_constraint_solver_routing_parameters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingSearchParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingSearchParameters) ProtoMessage() {}

func (x *RoutingSearchParameters) ProtoReflect() protoreflect.Message {
	mi := &file_ortools_constraint_solver_routing_parameters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingSearchParameters.ProtoReflect.Descriptor instead.
func (*RoutingSearchParameters) Descriptor() ([]byte, []int) {
	return file_ortools_constraint_solver_routing_parameters_proto_rawDescGZIP(), []int{0}
}

func (x *RoutingSearchParameters) GetFirstSolutionStrategy() FirstSolutionStrategy_Value {
	if x != nil {
		return x.FirstSolutionStrategy
	}
	return FirstSolutionStrategy_UNSET
}

func (x *RoutingSearchParameters) GetUseUnfilteredFirstSolutionStrategy() bool {
	if x != nil {
		return x.UseUnfilteredFirstSolutionStrategy
	}
	return false
}

func (x *RoutingSearchParameters) GetSavingsNeighborsRatio() float64 {
	if x != nil {
		return x.SavingsNeighborsRatio
	}
	return 0
}

func (x *RoutingSearchParameters) GetSavingsMaxMemoryUsageBytes() float64 {
	if x != nil {
		return x.SavingsMaxMemoryUsageBytes
	}
	return 0
}

func (x *RoutingSearchParameters) GetSavingsAddReverseArcs() bool {
	if x != nil {
		return x.SavingsAddReverseArcs
	}
	return false
}

func (x *RoutingSearchParameters) GetSavingsArcCoefficient() float64 {
	if x != nil {
		return x.SavingsArcCoefficient
	}
	return 0
}

func (x *RoutingSearchParameters) GetSavingsParallelRoutes() bool {
	if x != nil {
		return x.SavingsParallelRoutes
	}
	return false
}

func (x *RoutingSearchParameters) GetCheapestInsertionFarthestSeedsRatio() float64 {
	if x != nil {
		return x.CheapestInsertionFarthestSeedsRatio
	}
	return 0
}

func (x *RoutingSearchParameters) GetCheapestInsertionFirstSolutionNeighborsRatio() float64 {
	if x != nil {
		return x.CheapestInsertionFirstSolutionNeighborsRatio
	}
	return 0
}

func (x *RoutingSearchParameters) GetCheapestInsertionFirstSolutionMinNeighbors() int32 {
	if x != nil {
		return x.CheapestInsertionFirstSolutionMinNeighbors
	}
	return 0
}

func (x *RoutingSearchParameters) GetCheapestInsertionLsOperatorNeighborsRatio() float64 {
	if x != nil {
		return x.CheapestInsertionLsOperatorNeighborsRatio
	}
	return 0
}

func (x *RoutingSearchParameters) GetCheapestInsertionLsOperatorMinNeighbors() int32 {
	if x != nil {
		return x.CheapestInsertionLsOperatorMinNeighbors
	}
	return 0
}

func (x *RoutingSearchParameters) GetCheapestInsertionFirstSolutionUseNeighborsRatioForInitialization() bool {
	if x != nil {
		return x.CheapestInsertionFirstSolutionUseNeighborsRatioForInitialization
	}
	return false
}

func (x *RoutingSearchParameters) GetCheapestInsertionAddUnperformedEntries() bool {
	if x != nil {
		return x.CheapestInsertionAddUnperformedEntries
	}
	return false
}

func (x *RoutingSearchParameters) GetChristofidesUseMinimumMatching() bool {
	if x != nil {
		return x.ChristofidesUseMinimumMatching
	}
	return false
}

func (x *RoutingSearchParameters) GetLocalSearchOperators() *RoutingSearchParameters_LocalSearchNeighborhoodOperators {
	if x != nil {
		return x.LocalSearchOperators
	}
	return nil
}

func (x *RoutingSearchParameters) GetUseMultiArmedBanditConcatenateOperators() bool {
	if x != nil {
		return x.UseMultiArmedBanditConcatenateOperators
	}
	return false
}

func (x *RoutingSearchParameters) GetMultiArmedBanditCompoundOperatorMemoryCoefficient() float64 {
	if x != nil {
		return x.MultiArmedBanditCompoundOperatorMemoryCoefficient
	}
	return 0
}

func (x *RoutingSearchParameters) GetMultiArmedBanditCompoundOperatorExplorationCoefficient() float64 {
	if x != nil {
		return x.MultiArmedBanditCompoundOperatorExplorationCoefficient
	}
	return 0
}

func (x *RoutingSearchParameters) GetRelocateExpensiveChainNumArcsToConsider() int32 {
	if x != nil {
		return x.RelocateExpensiveChainNumArcsToConsider
	}
	return 0
}

func (x *RoutingSearchParameters) GetHeuristicExpensiveChainLnsNumArcsToConsider() int32 {
	if x != nil {
		return x.HeuristicExpensiveChainLnsNumArcsToConsider
	}
	return 0
}

func (x *RoutingSearchParameters) GetHeuristicCloseNodesLnsNumNodes() int32 {
	if x != nil {
		return x.HeuristicCloseNodesLnsNumNodes
	}
	return 0
}

func (x *RoutingSearchParameters) GetLocalSearchMetaheuristic() LocalSearchMetaheuristic_Value {
	if x != nil {
		return x.LocalSearchMetaheuristic
	}
	return LocalSearchMetaheuristic_UNSET
}

func (x *RoutingSearchParameters) GetGuidedLocalSearchLambdaCoefficient() float64 {
	if x != nil {
		return x.GuidedLocalSearchLambdaCoefficient
	}
	return 0
}

func (x *RoutingSearchParameters) GetUseDepthFirstSearch() bool {
	if x != nil {
		return x.UseDepthFirstSearch
	}
	return false
}

func (x *RoutingSearchParameters) GetUseCp() util.OptionalBoolean {
	if x != nil {
		return x.UseCp
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters) GetUseCpSat() util.OptionalBoolean {
	if x != nil {
		return x.UseCpSat
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters) GetUseGeneralizedCpSat() util.OptionalBoolean {
	if x != nil {
		return x.UseGeneralizedCpSat
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters) GetSatParameters() *sat.SatParameters {
	if x != nil {
		return x.SatParameters
	}
	return nil
}

func (x *RoutingSearchParameters) GetContinuousSchedulingSolver() RoutingSearchParameters_SchedulingSolver {
	if x != nil {
		return x.ContinuousSchedulingSolver
	}
	return RoutingSearchParameters_UNSET
}

func (x *RoutingSearchParameters) GetMixedIntegerSchedulingSolver() RoutingSearchParameters_SchedulingSolver {
	if x != nil {
		return x.MixedIntegerSchedulingSolver
	}
	return RoutingSearchParameters_UNSET
}

func (x *RoutingSearchParameters) GetOptimizationStep() float64 {
	if x != nil {
		return x.OptimizationStep
	}
	return 0
}

func (x *RoutingSearchParameters) GetNumberOfSolutionsToCollect() int32 {
	if x != nil {
		return x.NumberOfSolutionsToCollect
	}
	return 0
}

func (x *RoutingSearchParameters) GetSolutionLimit() int64 {
	if x != nil {
		return x.SolutionLimit
	}
	return 0
}

func (x *RoutingSearchParameters) GetTimeLimit() *durationpb.Duration {
	if x != nil {
		return x.TimeLimit
	}
	return nil
}

func (x *RoutingSearchParameters) GetLnsTimeLimit() *durationpb.Duration {
	if x != nil {
		return x.LnsTimeLimit
	}
	return nil
}

func (x *RoutingSearchParameters) GetImprovementLimitParameters() *RoutingSearchParameters_ImprovementSearchLimitParameters {
	if x != nil {
		return x.ImprovementLimitParameters
	}
	return nil
}

func (x *RoutingSearchParameters) GetUseFullPropagation() bool {
	if x != nil {
		return x.UseFullPropagation
	}
	return false
}

func (x *RoutingSearchParameters) GetLogSearch() bool {
	if x != nil {
		return x.LogSearch
	}
	return false
}

func (x *RoutingSearchParameters) GetLogCostScalingFactor() float64 {
	if x != nil {
		return x.LogCostScalingFactor
	}
	return 0
}

func (x *RoutingSearchParameters) GetLogCostOffset() float64 {
	if x != nil {
		return x.LogCostOffset
	}
	return 0
}

func (x *RoutingSearchParameters) GetLogTag() string {
	if x != nil {
		return x.LogTag
	}
	return ""
}

// Parameters which have to be set when creating a RoutingModel.
type RoutingModelParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters to use in the underlying constraint solver.
	SolverParameters *ConstraintSolverParameters `protobuf:"bytes,1,opt,name=solver_parameters,json=solverParameters,proto3" json:"solver_parameters,omitempty"`
	// Advanced settings.
	// If set to true reduction of the underlying constraint model will be
	// attempted when all vehicles have exactly the same cost structure. This can
	// result in significant speedups.
	ReduceVehicleCostModel bool `protobuf:"varint,2,opt,name=reduce_vehicle_cost_model,json=reduceVehicleCostModel,proto3" json:"reduce_vehicle_cost_model,omitempty"`
	// Cache callback calls if the number of nodes in the model is less or equal
	// to this value.
	MaxCallbackCacheSize int32 `protobuf:"varint,3,opt,name=max_callback_cache_size,json=maxCallbackCacheSize,proto3" json:"max_callback_cache_size,omitempty"`
}

func (x *RoutingModelParameters) Reset() {
	*x = RoutingModelParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ortools_constraint_solver_routing_parameters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingModelParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingModelParameters) ProtoMessage() {}

func (x *RoutingModelParameters) ProtoReflect() protoreflect.Message {
	mi := &file_ortools_constraint_solver_routing_parameters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingModelParameters.ProtoReflect.Descriptor instead.
func (*RoutingModelParameters) Descriptor() ([]byte, []int) {
	return file_ortools_constraint_solver_routing_parameters_proto_rawDescGZIP(), []int{1}
}

func (x *RoutingModelParameters) GetSolverParameters() *ConstraintSolverParameters {
	if x != nil {
		return x.SolverParameters
	}
	return nil
}

func (x *RoutingModelParameters) GetReduceVehicleCostModel() bool {
	if x != nil {
		return x.ReduceVehicleCostModel
	}
	return false
}

func (x *RoutingModelParameters) GetMaxCallbackCacheSize() int32 {
	if x != nil {
		return x.MaxCallbackCacheSize
	}
	return 0
}

// Local search neighborhood operators used to build a solutions neighborhood.
// Next ID: 34
type RoutingSearchParameters_LocalSearchNeighborhoodOperators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// --- Inter-route operators ---
	// Operator which moves a single node to another position.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 -> 5
	// (where (1, 5) are first and last nodes of the path and can therefore not
	// be moved):
	//   1 ->  3  -> [2] ->  4  -> 5
	//   1 ->  3  ->  4  -> [2] -> 5
	//   1 ->  2  ->  4  -> [3] -> 5
	//   1 -> [4] ->  2  ->  3  -> 5
	UseRelocate util.OptionalBoolean `protobuf:"varint,1,opt,name=use_relocate,json=useRelocate,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate,omitempty"`
	// Operator which moves a pair of pickup and delivery nodes to another
	// position where the first node of the pair must be before the second node
	// on the same path. Compared to the light_relocate_pair operator, tries all
	// possible positions of insertion of a pair (not only after another pair).
	// Possible neighbors for the path 1 -> A -> B -> 2 -> 3 (where (1, 3) are
	// first and last nodes of the path and can therefore not be moved, and
	// (A, B) is a pair of nodes):
	//   1 -> [A] ->  2  -> [B] -> 3
	//   1 ->  2  -> [A] -> [B] -> 3
	UseRelocatePair util.OptionalBoolean `protobuf:"varint,2,opt,name=use_relocate_pair,json=useRelocatePair,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_pair,omitempty"`
	// Operator which moves a pair of pickup and delivery nodes after another
	// pair.
	// Possible neighbors for paths 1 -> A -> B -> 2, 3 -> C -> D -> 4 (where
	// (1, 2) and (3, 4) are first and last nodes of paths and can therefore not
	// be moved, and (A, B) and (C, D) are pair of nodes):
	//   1 -> 2, 3 -> C -> [A] -> D -> [B] -> 4
	//   1 -> A -> [C] -> B -> [D] -> 2, 3 -> 4
	UseLightRelocatePair util.OptionalBoolean `protobuf:"varint,24,opt,name=use_light_relocate_pair,json=useLightRelocatePair,proto3,enum=operations_research.OptionalBoolean" json:"use_light_relocate_pair,omitempty"`
	// Relocate neighborhood which moves chains of neighbors.
	// The operator starts by relocating a node n after a node m, then continues
	// moving nodes which were after n as long as the "cost" added is less than
	// the "cost" of the arc (m, n). If the new chain doesn't respect the domain
	// of next variables, it will try reordering the nodes until it finds a
	// valid path.
	// Possible neighbors for path 1 -> A -> B -> C -> D -> E -> 2 (where (1, 2)
	// are first and last nodes of the path and can therefore not be moved, A
	// must be performed before B, and A, D and E are located at the same
	// place):
	// 1 -> A -> C -> [B] -> D -> E -> 2
	// 1 -> A -> C -> D -> [B] -> E -> 2
	// 1 -> A -> C -> D -> E -> [B] -> 2
	// 1 -> A -> B -> D -> [C] -> E -> 2
	// 1 -> A -> B -> D -> E -> [C] -> 2
	// 1 -> A -> [D] -> [E] -> B -> C -> 2
	// 1 -> A -> B -> [D] -> [E] ->  C -> 2
	// 1 -> A -> [E] -> B -> C -> D -> 2
	// 1 -> A -> B -> [E] -> C -> D -> 2
	// 1 -> A -> B -> C -> [E] -> D -> 2
	// This operator is extremely useful to move chains of nodes which are
	// located at the same place (for instance nodes part of a same stop).
	UseRelocateNeighbors util.OptionalBoolean `protobuf:"varint,3,opt,name=use_relocate_neighbors,json=useRelocateNeighbors,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_neighbors,omitempty"`
	// Relocate neighborhood that moves subpaths all pickup and delivery
	// pairs have both pickup and delivery inside the subpath or both outside
	// the subpath. For instance, for given paths:
	// 0 -> A -> B -> A' -> B' -> 5 -> 6 -> 8
	// 7 -> 9
	// Pairs (A,A') and (B,B') are interleaved, so the expected neighbors are:
	// 0 -> 5 -> A -> B -> A' -> B' -> 6 -> 8
	// 7 -> 9
	//
	// 0 -> 5 -> 6 -> A -> B -> A' -> B' -> 8
	// 7 -> 9
	//
	// 0 -> 5 -> 6 -> 8
	// 7 -> A -> B -> A' -> B' -> 9
	UseRelocateSubtrip util.OptionalBoolean `protobuf:"varint,25,opt,name=use_relocate_subtrip,json=useRelocateSubtrip,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_subtrip,omitempty"`
	// Operator which exchanges the positions of two nodes.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 -> 5
	// (where (1, 5) are first and last nodes of the path and can therefore not
	// be moved):
	//   1 -> [3] -> [2] ->  4  -> 5
	//   1 -> [4] ->  3  -> [2] -> 5
	//   1 ->  2  -> [4] -> [3] -> 5
	UseExchange util.OptionalBoolean `protobuf:"varint,4,opt,name=use_exchange,json=useExchange,proto3,enum=operations_research.OptionalBoolean" json:"use_exchange,omitempty"`
	// Operator which exchanges the positions of two pair of nodes. Pairs
	// correspond to the pickup and delivery pairs defined in the routing model.
	// Possible neighbor for the paths
	// 1 -> A -> B -> 2 -> 3 and 4 -> C -> D -> 5
	// (where (1, 3) and (4, 5) are first and last nodes of the paths and can
	// therefore not be moved, and (A, B) and (C,D) are pairs of nodes):
	//   1 -> [C] ->  [D] -> 2 -> 3, 4 -> [A] -> [B] -> 5
	UseExchangePair util.OptionalBoolean `protobuf:"varint,22,opt,name=use_exchange_pair,json=useExchangePair,proto3,enum=operations_research.OptionalBoolean" json:"use_exchange_pair,omitempty"`
	// Operator which exchanges subtrips associated to two pairs of nodes,
	// see use_relocate_subtrip for a definition of subtrips.
	UseExchangeSubtrip util.OptionalBoolean `protobuf:"varint,26,opt,name=use_exchange_subtrip,json=useExchangeSubtrip,proto3,enum=operations_research.OptionalBoolean" json:"use_exchange_subtrip,omitempty"`
	// Operator which cross exchanges the starting chains of 2 paths, including
	// exchanging the whole paths.
	// First and last nodes are not moved.
	// Possible neighbors for the paths 1 -> 2 -> 3 -> 4 -> 5 and 6 -> 7 -> 8
	// (where (1, 5) and (6, 8) are first and last nodes of the paths and can
	// therefore not be moved):
	//   1 -> [7] -> 3 -> 4 -> 5  6 -> [2] -> 8
	//   1 -> [7] -> 4 -> 5       6 -> [2 -> 3] -> 8
	//   1 -> [7] -> 5            6 -> [2 -> 3 -> 4] -> 8
	UseCross util.OptionalBoolean `protobuf:"varint,5,opt,name=use_cross,json=useCross,proto3,enum=operations_research.OptionalBoolean" json:"use_cross,omitempty"`
	// Not implemented yet. TODO(b/68128619): Implement.
	UseCrossExchange util.OptionalBoolean `protobuf:"varint,6,opt,name=use_cross_exchange,json=useCrossExchange,proto3,enum=operations_research.OptionalBoolean" json:"use_cross_exchange,omitempty"`
	// Operator which detects the relocate_expensive_chain_num_arcs_to_consider
	// most expensive arcs on a path, and moves the chain resulting from cutting
	// pairs of arcs among these to another position.
	// Possible neighbors for paths 1 -> 2 (empty) and
	// 3 -> A ------> B --> C -----> D -> 4 (where A -> B and C -> D are the 2
	// most expensive arcs, and the chain resulting from breaking them is
	// B -> C):
	//   1 -> [B -> C] -> 2     3 -> A -> D -> 4
	//   1 -> 2      3 -> [B -> C] -> A -> D -> 4
	//   1 -> 2      3 -> A -> D -> [B -> C] -> 4
	UseRelocateExpensiveChain util.OptionalBoolean `protobuf:"varint,23,opt,name=use_relocate_expensive_chain,json=useRelocateExpensiveChain,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_expensive_chain,omitempty"`
	// --- Intra-route operators ---
	// Operator which reverses a subchain of a path. It is called TwoOpt
	// because it breaks two arcs on the path; resulting paths are called
	// two-optimal.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 -> 5
	// (where (1, 5) are first and last nodes of the path and can therefore not
	// be moved):
	//   1 -> [3 -> 2] -> 4  -> 5
	//   1 -> [4 -> 3  -> 2] -> 5
	//   1 ->  2 -> [4 -> 3] -> 5
	UseTwoOpt util.OptionalBoolean `protobuf:"varint,7,opt,name=use_two_opt,json=useTwoOpt,proto3,enum=operations_research.OptionalBoolean" json:"use_two_opt,omitempty"`
	// Operator which moves sub-chains of a path of length 1, 2 and 3 to another
	// position in the same path.
	// When the length of the sub-chain is 1, the operator simply moves a node
	// to another position.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 -> 5, for a sub-chain
	// length of 2 (where (1, 5) are first and last nodes of the path and can
	// therefore not be moved):
	//   1 ->  4 -> [2 -> 3] -> 5
	//   1 -> [3 -> 4] -> 2  -> 5
	// The OR_OPT operator is a limited version of 3-Opt (breaks 3 arcs on a
	// path).
	UseOrOpt util.OptionalBoolean `protobuf:"varint,8,opt,name=use_or_opt,json=useOrOpt,proto3,enum=operations_research.OptionalBoolean" json:"use_or_opt,omitempty"`
	// Lin-Kernighan operator.
	// While the accumulated local gain is positive, performs a 2-OPT or a 3-OPT
	// move followed by a series of 2-OPT moves. Returns a neighbor for which
	// the global gain is positive.
	UseLinKernighan util.OptionalBoolean `protobuf:"varint,9,opt,name=use_lin_kernighan,json=useLinKernighan,proto3,enum=operations_research.OptionalBoolean" json:"use_lin_kernighan,omitempty"`
	// Sliding TSP operator.
	// Uses an exact dynamic programming algorithm to solve the TSP
	// corresponding to path sub-chains.
	// For a subchain 1 -> 2 -> 3 -> 4 -> 5 -> 6, solves the TSP on
	// nodes A, 2, 3, 4, 5, where A is a merger of nodes 1 and 6 such that
	// cost(A,i) = cost(1,i) and cost(i,A) = cost(i,6).
	UseTspOpt util.OptionalBoolean `protobuf:"varint,10,opt,name=use_tsp_opt,json=useTspOpt,proto3,enum=operations_research.OptionalBoolean" json:"use_tsp_opt,omitempty"`
	// --- Operators on inactive nodes ---
	// Operator which inserts an inactive node into a path.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 with 5 inactive
	// (where 1 and 4 are first and last nodes of the path) are:
	//   1 -> [5] ->  2  ->  3  -> 4
	//   1 ->  2  -> [5] ->  3  -> 4
	//   1 ->  2  ->  3  -> [5] -> 4
	UseMakeActive util.OptionalBoolean `protobuf:"varint,11,opt,name=use_make_active,json=useMakeActive,proto3,enum=operations_research.OptionalBoolean" json:"use_make_active,omitempty"`
	// Operator which relocates a node while making an inactive one active.
	// As of 3/2017, the operator is limited to two kinds of moves:
	// - Relocating a node and replacing it by an inactive node.
	//   Possible neighbor for path 1 -> 5, 2 -> 3 -> 6 and 4 inactive
	//   (where 1,2 and 5,6 are first and last nodes of paths) is:
	//   1 -> 3 -> 5, 2 -> 4 -> 6.
	// - Relocating a node and inserting an inactive node next to it.
	//   Possible neighbor for path 1 -> 5, 2 -> 3 -> 6 and 4 inactive
	//   (where 1,2 and 5,6 are first and last nodes of paths) is:
	//   1 -> 4 -> 3 -> 5, 2 -> 6.
	UseRelocateAndMakeActive util.OptionalBoolean `protobuf:"varint,21,opt,name=use_relocate_and_make_active,json=useRelocateAndMakeActive,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_and_make_active,omitempty"`
	// Operator which makes path nodes inactive.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 (where 1 and 4 are first
	// and last nodes of the path) are:
	//   1 -> 3 -> 4 with 2 inactive
	//   1 -> 2 -> 4 with 3 inactive
	UseMakeInactive util.OptionalBoolean `protobuf:"varint,12,opt,name=use_make_inactive,json=useMakeInactive,proto3,enum=operations_research.OptionalBoolean" json:"use_make_inactive,omitempty"`
	// Operator which makes a "chain" of path nodes inactive.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 (where 1 and 4 are first
	// and last nodes of the path) are:
	//   1 -> 3 -> 4 with 2 inactive
	//   1 -> 2 -> 4 with 3 inactive
	//   1 -> 4 with 2 and 3 inactive
	UseMakeChainInactive util.OptionalBoolean `protobuf:"varint,13,opt,name=use_make_chain_inactive,json=useMakeChainInactive,proto3,enum=operations_research.OptionalBoolean" json:"use_make_chain_inactive,omitempty"`
	// Operator which replaces an active node by an inactive one.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 with 5 inactive
	// (where 1 and 4 are first and last nodes of the path) are:
	//   1 -> [5] ->  3  -> 4 with 2 inactive
	//   1 ->  2  -> [5] -> 4 with 3 inactive
	UseSwapActive util.OptionalBoolean `protobuf:"varint,14,opt,name=use_swap_active,json=useSwapActive,proto3,enum=operations_research.OptionalBoolean" json:"use_swap_active,omitempty"`
	// Operator which makes an inactive node active and an active one inactive.
	// It is similar to SwapActiveOperator excepts that it tries to insert the
	// inactive node in all possible positions instead of just the position of
	// the node made inactive.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 with 5 inactive
	// (where 1 and 4 are first and last nodes of the path) are:
	//   1 -> [5] ->  3  -> 4 with 2 inactive
	//   1 ->  3  -> [5] -> 4 with 2 inactive
	//   1 -> [5] ->  2  -> 4 with 3 inactive
	//   1 ->  2  -> [5] -> 4 with 3 inactive
	UseExtendedSwapActive util.OptionalBoolean `protobuf:"varint,15,opt,name=use_extended_swap_active,json=useExtendedSwapActive,proto3,enum=operations_research.OptionalBoolean" json:"use_extended_swap_active,omitempty"`
	// Operator which makes an inactive node active and an active pair of nodes
	// inactive OR makes an inactive pair of nodes active and an active node
	// inactive.
	// Possible neighbors for the path 1 -> 2 -> 3 -> 4 with 5 inactive
	// (where 1 and 4 are first and last nodes of the path and (2,3) is a pair
	// of nodes) are:
	//   1 -> [5] -> 4 with (2,3) inactive
	// Possible neighbors for the path 1 -> 2 -> 3 with (4,5) inactive
	// (where 1 and 3 are first and last nodes of the path and (4,5) is a pair
	// of nodes) are:
	//   1 -> [4] -> [5] -> 3 with 2 inactive
	UseNodePairSwapActive util.OptionalBoolean `protobuf:"varint,20,opt,name=use_node_pair_swap_active,json=useNodePairSwapActive,proto3,enum=operations_research.OptionalBoolean" json:"use_node_pair_swap_active,omitempty"`
	// --- Large neighborhood search operators ---
	// Operator which relaxes two sub-chains of three consecutive arcs each.
	// Each sub-chain is defined by a start node and the next three arcs. Those
	// six arcs are relaxed to build a new neighbor.
	// PATH_LNS explores all possible pairs of starting nodes and so defines
	// n^2 neighbors, n being the number of nodes.
	// Note that the two sub-chains can be part of the same path; they even may
	// overlap.
	UsePathLns util.OptionalBoolean `protobuf:"varint,16,opt,name=use_path_lns,json=usePathLns,proto3,enum=operations_research.OptionalBoolean" json:"use_path_lns,omitempty"`
	// Operator which relaxes one entire path and all inactive nodes.
	UseFullPathLns util.OptionalBoolean `protobuf:"varint,17,opt,name=use_full_path_lns,json=useFullPathLns,proto3,enum=operations_research.OptionalBoolean" json:"use_full_path_lns,omitempty"`
	// TSP-base LNS.
	// Randomly merges consecutive nodes until n "meta"-nodes remain and solves
	// the corresponding TSP.
	// This defines an "unlimited" neighborhood which must be stopped by search
	// limits. To force diversification, the operator iteratively forces each
	// node to serve as base of a meta-node.
	UseTspLns util.OptionalBoolean `protobuf:"varint,18,opt,name=use_tsp_lns,json=useTspLns,proto3,enum=operations_research.OptionalBoolean" json:"use_tsp_lns,omitempty"`
	// Operator which relaxes all inactive nodes and one sub-chain of six
	// consecutive arcs. That way the path can be improved by inserting inactive
	// nodes or swapping arcs.
	UseInactiveLns util.OptionalBoolean `protobuf:"varint,19,opt,name=use_inactive_lns,json=useInactiveLns,proto3,enum=operations_research.OptionalBoolean" json:"use_inactive_lns,omitempty"`
	// --- LNS-like large neighborhood search operators using heuristics ---
	// Operator which makes all nodes on a route unperformed, and reinserts them
	// using the GlobalCheapestInsertion heuristic.
	UseGlobalCheapestInsertionPathLns util.OptionalBoolean `protobuf:"varint,27,opt,name=use_global_cheapest_insertion_path_lns,json=useGlobalCheapestInsertionPathLns,proto3,enum=operations_research.OptionalBoolean" json:"use_global_cheapest_insertion_path_lns,omitempty"`
	// Same as above but using LocalCheapestInsertion as a heuristic.
	UseLocalCheapestInsertionPathLns util.OptionalBoolean `protobuf:"varint,28,opt,name=use_local_cheapest_insertion_path_lns,json=useLocalCheapestInsertionPathLns,proto3,enum=operations_research.OptionalBoolean" json:"use_local_cheapest_insertion_path_lns,omitempty"`
	// The following operator relocates an entire route to an empty path and
	// then tries to insert the unperformed nodes using the global cheapest
	// insertion heuristic.
	UseRelocatePathGlobalCheapestInsertionInsertUnperformed util.OptionalBoolean `protobuf:"varint,33,opt,name=use_relocate_path_global_cheapest_insertion_insert_unperformed,json=useRelocatePathGlobalCheapestInsertionInsertUnperformed,proto3,enum=operations_research.OptionalBoolean" json:"use_relocate_path_global_cheapest_insertion_insert_unperformed,omitempty"`
	// This operator finds heuristic_expensive_chain_lns_num_arcs_to_consider
	// most expensive arcs on a route, makes the nodes in between pairs of these
	// expensive arcs unperformed, and reinserts them using the
	// GlobalCheapestInsertion heuristic.
	UseGlobalCheapestInsertionExpensiveChainLns util.OptionalBoolean `protobuf:"varint,29,opt,name=use_global_cheapest_insertion_expensive_chain_lns,json=useGlobalCheapestInsertionExpensiveChainLns,proto3,enum=operations_research.OptionalBoolean" json:"use_global_cheapest_insertion_expensive_chain_lns,omitempty"`
	// Same as above but using LocalCheapestInsertion as a heuristic for
	// insertion.
	UseLocalCheapestInsertionExpensiveChainLns util.OptionalBoolean `protobuf:"varint,30,opt,name=use_local_cheapest_insertion_expensive_chain_lns,json=useLocalCheapestInsertionExpensiveChainLns,proto3,enum=operations_research.OptionalBoolean" json:"use_local_cheapest_insertion_expensive_chain_lns,omitempty"`
	// The following operator makes a node and its
	// heuristic_close_nodes_lns_num_nodes closest neighbors unperformed along
	// with each of their corresponding performed pickup/delivery pairs, and
	// then reinserts them using the GlobalCheapestInsertion heuristic.
	UseGlobalCheapestInsertionCloseNodesLns util.OptionalBoolean `protobuf:"varint,31,opt,name=use_global_cheapest_insertion_close_nodes_lns,json=useGlobalCheapestInsertionCloseNodesLns,proto3,enum=operations_research.OptionalBoolean" json:"use_global_cheapest_insertion_close_nodes_lns,omitempty"`
	// Same as above, but insertion positions for nodes are determined by the
	// LocalCheapestInsertion heuristic.
	UseLocalCheapestInsertionCloseNodesLns util.OptionalBoolean `protobuf:"varint,32,opt,name=use_local_cheapest_insertion_close_nodes_lns,json=useLocalCheapestInsertionCloseNodesLns,proto3,enum=operations_research.OptionalBoolean" json:"use_local_cheapest_insertion_close_nodes_lns,omitempty"`
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) Reset() {
	*x = RoutingSearchParameters_LocalSearchNeighborhoodOperators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ortools_constraint_solver_routing_parameters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingSearchParameters_LocalSearchNeighborhoodOperators) ProtoMessage() {}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) ProtoReflect() protoreflect.Message {
	mi := &file_ortools_constraint_solver_routing_parameters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingSearchParameters_LocalSearchNeighborhoodOperators.ProtoReflect.Descriptor instead.
func (*RoutingSearchParameters_LocalSearchNeighborhoodOperators) Descriptor() ([]byte, []int) {
	return file_ortools_constraint_solver_routing_parameters_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocate() util.OptionalBoolean {
	if x != nil {
		return x.UseRelocate
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocatePair() util.OptionalBoolean {
	if x != nil {
		return x.UseRelocatePair
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseLightRelocatePair() util.OptionalBoolean {
	if x != nil {
		return x.UseLightRelocatePair
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocateNeighbors() util.OptionalBoolean {
	if x != nil {
		return x.UseRelocateNeighbors
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocateSubtrip() util.OptionalBoolean {
	if x != nil {
		return x.UseRelocateSubtrip
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseExchange() util.OptionalBoolean {
	if x != nil {
		return x.UseExchange
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseExchangePair() util.OptionalBoolean {
	if x != nil {
		return x.UseExchangePair
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseExchangeSubtrip() util.OptionalBoolean {
	if x != nil {
		return x.UseExchangeSubtrip
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseCross() util.OptionalBoolean {
	if x != nil {
		return x.UseCross
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseCrossExchange() util.OptionalBoolean {
	if x != nil {
		return x.UseCrossExchange
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocateExpensiveChain() util.OptionalBoolean {
	if x != nil {
		return x.UseRelocateExpensiveChain
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseTwoOpt() util.OptionalBoolean {
	if x != nil {
		return x.UseTwoOpt
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseOrOpt() util.OptionalBoolean {
	if x != nil {
		return x.UseOrOpt
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseLinKernighan() util.OptionalBoolean {
	if x != nil {
		return x.UseLinKernighan
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseTspOpt() util.OptionalBoolean {
	if x != nil {
		return x.UseTspOpt
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseMakeActive() util.OptionalBoolean {
	if x != nil {
		return x.UseMakeActive
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocateAndMakeActive() util.OptionalBoolean {
	if x != nil {
		return x.UseRelocateAndMakeActive
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseMakeInactive() util.OptionalBoolean {
	if x != nil {
		return x.UseMakeInactive
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseMakeChainInactive() util.OptionalBoolean {
	if x != nil {
		return x.UseMakeChainInactive
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseSwapActive() util.OptionalBoolean {
	if x != nil {
		return x.UseSwapActive
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseExtendedSwapActive() util.OptionalBoolean {
	if x != nil {
		return x.UseExtendedSwapActive
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseNodePairSwapActive() util.OptionalBoolean {
	if x != nil {
		return x.UseNodePairSwapActive
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUsePathLns() util.OptionalBoolean {
	if x != nil {
		return x.UsePathLns
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseFullPathLns() util.OptionalBoolean {
	if x != nil {
		return x.UseFullPathLns
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseTspLns() util.OptionalBoolean {
	if x != nil {
		return x.UseTspLns
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseInactiveLns() util.OptionalBoolean {
	if x != nil {
		return x.UseInactiveLns
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseGlobalCheapestInsertionPathLns() util.OptionalBoolean {
	if x != nil {
		return x.UseGlobalCheapestInsertionPathLns
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseLocalCheapestInsertionPathLns() util.OptionalBoolean {
	if x != nil {
		return x.UseLocalCheapestInsertionPathLns
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseRelocatePathGlobalCheapestInsertionInsertUnperformed() util.OptionalBoolean {
	if x != nil {
		return x.UseRelocatePathGlobalCheapestInsertionInsertUnperformed
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseGlobalCheapestInsertionExpensiveChainLns() util.OptionalBoolean {
	if x != nil {
		return x.UseGlobalCheapestInsertionExpensiveChainLns
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseLocalCheapestInsertionExpensiveChainLns() util.OptionalBoolean {
	if x != nil {
		return x.UseLocalCheapestInsertionExpensiveChainLns
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseGlobalCheapestInsertionCloseNodesLns() util.OptionalBoolean {
	if x != nil {
		return x.UseGlobalCheapestInsertionCloseNodesLns
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

func (x *RoutingSearchParameters_LocalSearchNeighborhoodOperators) GetUseLocalCheapestInsertionCloseNodesLns() util.OptionalBoolean {
	if x != nil {
		return x.UseLocalCheapestInsertionCloseNodesLns
	}
	return util.OptionalBoolean_BOOL_UNSPECIFIED
}

// Parameters required for the improvement search limit.
type RoutingSearchParameters_ImprovementSearchLimitParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameter that regulates exchange rate between objective improvement and
	// number of neighbors spent. The smaller the value, the sooner the limit
	// stops the search. Must be positive.
	ImprovementRateCoefficient float64 `protobuf:"fixed64,38,opt,name=improvement_rate_coefficient,json=improvementRateCoefficient,proto3" json:"improvement_rate_coefficient,omitempty"`
	// Parameter that specifies the distance between improvements taken into
	// consideration for calculating the improvement rate.
	// Example: For 5 objective improvements = (10, 8, 6, 4, 2), and the
	// solutions_distance parameter of 2, then the improvement_rate will be
	// computed for (10, 6), (8, 4), and (6, 2).
	ImprovementRateSolutionsDistance int32 `protobuf:"varint,39,opt,name=improvement_rate_solutions_distance,json=improvementRateSolutionsDistance,proto3" json:"improvement_rate_solutions_distance,omitempty"`
}

func (x *RoutingSearchParameters_ImprovementSearchLimitParameters) Reset() {
	*x = RoutingSearchParameters_ImprovementSearchLimitParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ortools_constraint_solver_routing_parameters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingSearchParameters_ImprovementSearchLimitParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingSearchParameters_ImprovementSearchLimitParameters) ProtoMessage() {}

func (x *RoutingSearchParameters_ImprovementSearchLimitParameters) ProtoReflect() protoreflect.Message {
	mi := &file_ortools_constraint_solver_routing_parameters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingSearchParameters_ImprovementSearchLimitParameters.ProtoReflect.Descriptor instead.
func (*RoutingSearchParameters_ImprovementSearchLimitParameters) Descriptor() ([]byte, []int) {
	return file_ortools_constraint_solver_routing_parameters_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RoutingSearchParameters_ImprovementSearchLimitParameters) GetImprovementRateCoefficient() float64 {
	if x != nil {
		return x.ImprovementRateCoefficient
	}
	return 0
}

func (x *RoutingSearchParameters_ImprovementSearchLimitParameters) GetImprovementRateSolutionsDistance() int32 {
	if x != nil {
		return x.ImprovementRateSolutionsDistance
	}
	return 0
}

var File_ortools_constraint_solver_routing_parameters_proto protoreflect.FileDescriptor

var file_ortools_constraint_solver_routing_parameters_proto_rawDesc = []byte{
	0x0a, 0x32, 0x6f, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6f, 0x72, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6f, 0x72, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x2f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6f, 0x72, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x73, 0x61, 0x74, 0x2f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6f,
	0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd6, 0x35, 0x0a, 0x17, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x68,
	0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x52, 0x0a, 0x26, 0x75, 0x73, 0x65, 0x5f,
	0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x75, 0x73, 0x65, 0x55, 0x6e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x73, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x61, 0x72, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x72, 0x63,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x61, 0x72, 0x63,
	0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x72, 0x63, 0x43, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x54, 0x0a, 0x27, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x72, 0x74, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x23, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x72, 0x74, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x64, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x67, 0x0a, 0x31, 0x63, 0x68, 0x65, 0x61, 0x70,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x2c, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x63, 0x0a, 0x2f, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x63, 0x68, 0x65, 0x61, 0x70,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x2e, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x29, 0x63,
	0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x5d, 0x0a, 0x2c, 0x63, 0x68, 0x65, 0x61,
	0x70, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27,
	0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x48, 0x63, 0x68, 0x65, 0x61,
	0x70, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x40, 0x63, 0x68, 0x65, 0x61,
	0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x2a,
	0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x75, 0x6e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x26, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x55, 0x6e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x68, 0x72, 0x69,
	0x73, 0x74, 0x6f, 0x66, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x63, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x66, 0x69, 0x64, 0x65,
	0x73, 0x55, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x68, 0x6f, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x2c, 0x75, 0x73, 0x65,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x27, 0x75, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x61,
	0x6e, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x72, 0x0a, 0x37, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x31, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x3c,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x36, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x61,
	0x6e, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x2d, 0x72, 0x65,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x72, 0x63, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x27, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x63, 0x73,
	0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x32, 0x68, 0x65,
	0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x61, 0x72, 0x63, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c,
	0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x63, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x23, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x6c, 0x6e, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1e, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x71, 0x0a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x52, 0x0a, 0x26, 0x67, 0x75, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x22, 0x67, 0x75, 0x69, 0x64, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x43, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x5f, 0x63, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x05, 0x75, 0x73, 0x65, 0x43, 0x70, 0x12, 0x42, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x5f, 0x63, 0x70, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x70, 0x53, 0x61, 0x74, 0x12, 0x59, 0x0a,
	0x16, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x63, 0x70, 0x5f, 0x73, 0x61, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x13, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x43, 0x70, 0x53, 0x61, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x61, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x73, 0x61, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x7f, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x1a, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x1f, 0x6d, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x52, 0x1c, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x12, 0x42, 0x0a, 0x1e,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x6c, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x1c, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x1a, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x67, 0x1a, 0xc0, 0x18,
	0x0a, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x68, 0x6f, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0f, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x5b, 0x0a,
	0x17, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x14, 0x75, 0x73, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x5a, 0x0a, 0x16, 0x75, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x14, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x72, 0x69, 0x70, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x12, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x69, 0x70, 0x12, 0x47,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x56, 0x0a, 0x14, 0x75, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x72, 0x69,
	0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x12, 0x75,
	0x73, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x69,
	0x70, 0x12, 0x41, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x10, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x19, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x44, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x75, 0x73, 0x65, 0x54,
	0x77, 0x6f, 0x4f, 0x70, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x5f,
	0x6f, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x4f, 0x72, 0x4f, 0x70, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x69, 0x67, 0x68, 0x61, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x4c,
	0x69, 0x6e, 0x4b, 0x65, 0x72, 0x6e, 0x69, 0x67, 0x68, 0x61, 0x6e, 0x12, 0x44, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x5f, 0x74, 0x73, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x75, 0x73, 0x65, 0x54, 0x73, 0x70, 0x4f, 0x70,
	0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x64, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x18, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x6b, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x6b,
	0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x6d,
	0x61, 0x6b, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x14,
	0x75, 0x73, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x15, 0x75, 0x73, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x5e, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x15, 0x75, 0x73, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x61, 0x69, 0x72, 0x53, 0x77, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x46, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x6e,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x6e, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x5f, 0x74, 0x73, 0x70, 0x5f, 0x6c, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x75, 0x73, 0x65, 0x54, 0x73, 0x70, 0x4c, 0x6e, 0x73,
	0x12, 0x4e, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6c, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6e, 0x73,
	0x12, 0x77, 0x0a, 0x26, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x21, 0x75, 0x73, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x43, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x25, 0x75, 0x73, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c,
	0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x20,
	0x75, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x6e, 0x73,
	0x12, 0xa5, 0x01, 0x0a, 0x3e, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x68,
	0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x75, 0x6e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x37, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x6e, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x8c, 0x01, 0x0a, 0x31, 0x75, 0x73, 0x65,
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6e, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x2b, 0x75, 0x73, 0x65, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x4c, 0x6e, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x30, 0x75, 0x73, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x2a, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x43, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x4c, 0x6e, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x2d, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x5f, 0x6c, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x27, 0x75, 0x73, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x65,
	0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x6e, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x2c,
	0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x70, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x6c, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x26, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x43, 0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x6e, 0x73,
	0x1a, 0xb3, 0x01, 0x0a, 0x20, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x69, 0x6d, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x23, 0x69, 0x6d, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x33, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4c, 0x4f, 0x50, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x50, 0x5f, 0x53, 0x41, 0x54, 0x10, 0x02, 0x22, 0xe8, 0x01, 0x0a, 0x16,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x10, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x9b, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x01,
	0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x72,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65,
	0x73, 0x2f, 0x6f, 0x72, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x6f, 0x72, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x67,
	0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x4f, 0x72, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ortools_constraint_solver_routing_parameters_proto_rawDescOnce sync.Once
	file_ortools_constraint_solver_routing_parameters_proto_rawDescData = file_ortools_constraint_solver_routing_parameters_proto_rawDesc
)

func file_ortools_constraint_solver_routing_parameters_proto_rawDescGZIP() []byte {
	file_ortools_constraint_solver_routing_parameters_proto_rawDescOnce.Do(func() {
		file_ortools_constraint_solver_routing_parameters_proto_rawDescData = protoimpl.X.CompressGZIP(file_ortools_constraint_solver_routing_parameters_proto_rawDescData)
	})
	return file_ortools_constraint_solver_routing_parameters_proto_rawDescData
}

var file_ortools_constraint_solver_routing_parameters_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ortools_constraint_solver_routing_parameters_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ortools_constraint_solver_routing_parameters_proto_goTypes = []interface{}{
	(RoutingSearchParameters_SchedulingSolver)(0),                    // 0: operations_research.RoutingSearchParameters.SchedulingSolver
	(*RoutingSearchParameters)(nil),                                  // 1: operations_research.RoutingSearchParameters
	(*RoutingModelParameters)(nil),                                   // 2: operations_research.RoutingModelParameters
	(*RoutingSearchParameters_LocalSearchNeighborhoodOperators)(nil), // 3: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators
	(*RoutingSearchParameters_ImprovementSearchLimitParameters)(nil), // 4: operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters
	(FirstSolutionStrategy_Value)(0),                                 // 5: operations_research.FirstSolutionStrategy.Value
	(LocalSearchMetaheuristic_Value)(0),                              // 6: operations_research.LocalSearchMetaheuristic.Value
	(util.OptionalBoolean)(0),                                        // 7: operations_research.OptionalBoolean
	(*sat.SatParameters)(nil),                                        // 8: operations_research.sat.SatParameters
	(*durationpb.Duration)(nil),                                      // 9: google.protobuf.Duration
	(*ConstraintSolverParameters)(nil),                               // 10: operations_research.ConstraintSolverParameters
}
var file_ortools_constraint_solver_routing_parameters_proto_depIdxs = []int32{
	5,  // 0: operations_research.RoutingSearchParameters.first_solution_strategy:type_name -> operations_research.FirstSolutionStrategy.Value
	3,  // 1: operations_research.RoutingSearchParameters.local_search_operators:type_name -> operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators
	6,  // 2: operations_research.RoutingSearchParameters.local_search_metaheuristic:type_name -> operations_research.LocalSearchMetaheuristic.Value
	7,  // 3: operations_research.RoutingSearchParameters.use_cp:type_name -> operations_research.OptionalBoolean
	7,  // 4: operations_research.RoutingSearchParameters.use_cp_sat:type_name -> operations_research.OptionalBoolean
	7,  // 5: operations_research.RoutingSearchParameters.use_generalized_cp_sat:type_name -> operations_research.OptionalBoolean
	8,  // 6: operations_research.RoutingSearchParameters.sat_parameters:type_name -> operations_research.sat.SatParameters
	0,  // 7: operations_research.RoutingSearchParameters.continuous_scheduling_solver:type_name -> operations_research.RoutingSearchParameters.SchedulingSolver
	0,  // 8: operations_research.RoutingSearchParameters.mixed_integer_scheduling_solver:type_name -> operations_research.RoutingSearchParameters.SchedulingSolver
	9,  // 9: operations_research.RoutingSearchParameters.time_limit:type_name -> google.protobuf.Duration
	9,  // 10: operations_research.RoutingSearchParameters.lns_time_limit:type_name -> google.protobuf.Duration
	4,  // 11: operations_research.RoutingSearchParameters.improvement_limit_parameters:type_name -> operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters
	10, // 12: operations_research.RoutingModelParameters.solver_parameters:type_name -> operations_research.ConstraintSolverParameters
	7,  // 13: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate:type_name -> operations_research.OptionalBoolean
	7,  // 14: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_pair:type_name -> operations_research.OptionalBoolean
	7,  // 15: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_light_relocate_pair:type_name -> operations_research.OptionalBoolean
	7,  // 16: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_neighbors:type_name -> operations_research.OptionalBoolean
	7,  // 17: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_subtrip:type_name -> operations_research.OptionalBoolean
	7,  // 18: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_exchange:type_name -> operations_research.OptionalBoolean
	7,  // 19: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_exchange_pair:type_name -> operations_research.OptionalBoolean
	7,  // 20: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_exchange_subtrip:type_name -> operations_research.OptionalBoolean
	7,  // 21: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_cross:type_name -> operations_research.OptionalBoolean
	7,  // 22: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_cross_exchange:type_name -> operations_research.OptionalBoolean
	7,  // 23: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_expensive_chain:type_name -> operations_research.OptionalBoolean
	7,  // 24: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_two_opt:type_name -> operations_research.OptionalBoolean
	7,  // 25: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_or_opt:type_name -> operations_research.OptionalBoolean
	7,  // 26: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_lin_kernighan:type_name -> operations_research.OptionalBoolean
	7,  // 27: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_tsp_opt:type_name -> operations_research.OptionalBoolean
	7,  // 28: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_make_active:type_name -> operations_research.OptionalBoolean
	7,  // 29: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_and_make_active:type_name -> operations_research.OptionalBoolean
	7,  // 30: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_make_inactive:type_name -> operations_research.OptionalBoolean
	7,  // 31: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_make_chain_inactive:type_name -> operations_research.OptionalBoolean
	7,  // 32: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_swap_active:type_name -> operations_research.OptionalBoolean
	7,  // 33: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_extended_swap_active:type_name -> operations_research.OptionalBoolean
	7,  // 34: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_node_pair_swap_active:type_name -> operations_research.OptionalBoolean
	7,  // 35: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_path_lns:type_name -> operations_research.OptionalBoolean
	7,  // 36: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_full_path_lns:type_name -> operations_research.OptionalBoolean
	7,  // 37: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_tsp_lns:type_name -> operations_research.OptionalBoolean
	7,  // 38: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_inactive_lns:type_name -> operations_research.OptionalBoolean
	7,  // 39: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_global_cheapest_insertion_path_lns:type_name -> operations_research.OptionalBoolean
	7,  // 40: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_local_cheapest_insertion_path_lns:type_name -> operations_research.OptionalBoolean
	7,  // 41: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_path_global_cheapest_insertion_insert_unperformed:type_name -> operations_research.OptionalBoolean
	7,  // 42: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_global_cheapest_insertion_expensive_chain_lns:type_name -> operations_research.OptionalBoolean
	7,  // 43: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_local_cheapest_insertion_expensive_chain_lns:type_name -> operations_research.OptionalBoolean
	7,  // 44: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_global_cheapest_insertion_close_nodes_lns:type_name -> operations_research.OptionalBoolean
	7,  // 45: operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_local_cheapest_insertion_close_nodes_lns:type_name -> operations_research.OptionalBoolean
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_ortools_constraint_solver_routing_parameters_proto_init() }
func file_ortools_constraint_solver_routing_parameters_proto_init() {
	if File_ortools_constraint_solver_routing_parameters_proto != nil {
		return
	}
	file_ortools_constraint_solver_routing_enums_proto_init()
	file_ortools_constraint_solver_solver_parameters_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ortools_constraint_solver_routing_parameters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingSearchParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ortools_constraint_solver_routing_parameters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingModelParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ortools_constraint_solver_routing_parameters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingSearchParameters_LocalSearchNeighborhoodOperators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ortools_constraint_solver_routing_parameters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingSearchParameters_ImprovementSearchLimitParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ortools_constraint_solver_routing_parameters_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ortools_constraint_solver_routing_parameters_proto_goTypes,
		DependencyIndexes: file_ortools_constraint_solver_routing_parameters_proto_depIdxs,
		EnumInfos:         file_ortools_constraint_solver_routing_parameters_proto_enumTypes,
		MessageInfos:      file_ortools_constraint_solver_routing_parameters_proto_msgTypes,
	}.Build()
	File_ortools_constraint_solver_routing_parameters_proto = out.File
	file_ortools_constraint_solver_routing_parameters_proto_rawDesc = nil
	file_ortools_constraint_solver_routing_parameters_proto_goTypes = nil
	file_ortools_constraint_solver_routing_parameters_proto_depIdxs = nil
}
