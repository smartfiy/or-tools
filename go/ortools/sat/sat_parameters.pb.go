// Copyright 2010-2024 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: ortools/sat/sat_parameters.proto

package sat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	math "math"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Variables without activity (i.e. at the beginning of the search) will be
// tried in this preferred order.
type SatParameters_VariableOrder int32

const (
	SatParameters_IN_ORDER         SatParameters_VariableOrder = 0 // As specified by the problem.
	SatParameters_IN_REVERSE_ORDER SatParameters_VariableOrder = 1
	SatParameters_IN_RANDOM_ORDER  SatParameters_VariableOrder = 2
)

// Enum value maps for SatParameters_VariableOrder.
var (
	SatParameters_VariableOrder_name = map[int32]string{
		0: "IN_ORDER",
		1: "IN_REVERSE_ORDER",
		2: "IN_RANDOM_ORDER",
	}
	SatParameters_VariableOrder_value = map[string]int32{
		"IN_ORDER":         0,
		"IN_REVERSE_ORDER": 1,
		"IN_RANDOM_ORDER":  2,
	}
)

func (x SatParameters_VariableOrder) Enum() *SatParameters_VariableOrder {
	p := new(SatParameters_VariableOrder)
	*p = x
	return p
}

func (x SatParameters_VariableOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_VariableOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[0].Descriptor()
}

func (SatParameters_VariableOrder) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[0]
}

func (x SatParameters_VariableOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_VariableOrder) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_VariableOrder(num)
	return nil
}

// Deprecated: Use SatParameters_VariableOrder.Descriptor instead.
func (SatParameters_VariableOrder) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 0}
}

// Specifies the initial polarity (true/false) when the solver branches on a
// variable. This can be modified later by the user, or the phase saving
// heuristic.
//
// Note(user): POLARITY_FALSE is usually a good choice because of the
// "natural" way to express a linear boolean problem.
type SatParameters_Polarity int32

const (
	SatParameters_POLARITY_TRUE   SatParameters_Polarity = 0
	SatParameters_POLARITY_FALSE  SatParameters_Polarity = 1
	SatParameters_POLARITY_RANDOM SatParameters_Polarity = 2
)

// Enum value maps for SatParameters_Polarity.
var (
	SatParameters_Polarity_name = map[int32]string{
		0: "POLARITY_TRUE",
		1: "POLARITY_FALSE",
		2: "POLARITY_RANDOM",
	}
	SatParameters_Polarity_value = map[string]int32{
		"POLARITY_TRUE":   0,
		"POLARITY_FALSE":  1,
		"POLARITY_RANDOM": 2,
	}
)

func (x SatParameters_Polarity) Enum() *SatParameters_Polarity {
	p := new(SatParameters_Polarity)
	*p = x
	return p
}

func (x SatParameters_Polarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_Polarity) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[1].Descriptor()
}

func (SatParameters_Polarity) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[1]
}

func (x SatParameters_Polarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_Polarity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_Polarity(num)
	return nil
}

// Deprecated: Use SatParameters_Polarity.Descriptor instead.
func (SatParameters_Polarity) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 1}
}

// Do we try to minimize conflicts (greedily) when creating them.
type SatParameters_ConflictMinimizationAlgorithm int32

const (
	SatParameters_NONE         SatParameters_ConflictMinimizationAlgorithm = 0
	SatParameters_SIMPLE       SatParameters_ConflictMinimizationAlgorithm = 1
	SatParameters_RECURSIVE    SatParameters_ConflictMinimizationAlgorithm = 2
	SatParameters_EXPERIMENTAL SatParameters_ConflictMinimizationAlgorithm = 3
)

// Enum value maps for SatParameters_ConflictMinimizationAlgorithm.
var (
	SatParameters_ConflictMinimizationAlgorithm_name = map[int32]string{
		0: "NONE",
		1: "SIMPLE",
		2: "RECURSIVE",
		3: "EXPERIMENTAL",
	}
	SatParameters_ConflictMinimizationAlgorithm_value = map[string]int32{
		"NONE":         0,
		"SIMPLE":       1,
		"RECURSIVE":    2,
		"EXPERIMENTAL": 3,
	}
)

func (x SatParameters_ConflictMinimizationAlgorithm) Enum() *SatParameters_ConflictMinimizationAlgorithm {
	p := new(SatParameters_ConflictMinimizationAlgorithm)
	*p = x
	return p
}

func (x SatParameters_ConflictMinimizationAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_ConflictMinimizationAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[2].Descriptor()
}

func (SatParameters_ConflictMinimizationAlgorithm) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[2]
}

func (x SatParameters_ConflictMinimizationAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_ConflictMinimizationAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_ConflictMinimizationAlgorithm(num)
	return nil
}

// Deprecated: Use SatParameters_ConflictMinimizationAlgorithm.Descriptor instead.
func (SatParameters_ConflictMinimizationAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 2}
}

// Whether to expoit the binary clause to minimize learned clauses further.
type SatParameters_BinaryMinizationAlgorithm int32

const (
	SatParameters_NO_BINARY_MINIMIZATION                              SatParameters_BinaryMinizationAlgorithm = 0
	SatParameters_BINARY_MINIMIZATION_FIRST                           SatParameters_BinaryMinizationAlgorithm = 1
	SatParameters_BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION SatParameters_BinaryMinizationAlgorithm = 4
	SatParameters_BINARY_MINIMIZATION_WITH_REACHABILITY               SatParameters_BinaryMinizationAlgorithm = 2
	SatParameters_EXPERIMENTAL_BINARY_MINIMIZATION                    SatParameters_BinaryMinizationAlgorithm = 3
)

// Enum value maps for SatParameters_BinaryMinizationAlgorithm.
var (
	SatParameters_BinaryMinizationAlgorithm_name = map[int32]string{
		0: "NO_BINARY_MINIMIZATION",
		1: "BINARY_MINIMIZATION_FIRST",
		4: "BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION",
		2: "BINARY_MINIMIZATION_WITH_REACHABILITY",
		3: "EXPERIMENTAL_BINARY_MINIMIZATION",
	}
	SatParameters_BinaryMinizationAlgorithm_value = map[string]int32{
		"NO_BINARY_MINIMIZATION":                              0,
		"BINARY_MINIMIZATION_FIRST":                           1,
		"BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION": 4,
		"BINARY_MINIMIZATION_WITH_REACHABILITY":               2,
		"EXPERIMENTAL_BINARY_MINIMIZATION":                    3,
	}
)

func (x SatParameters_BinaryMinizationAlgorithm) Enum() *SatParameters_BinaryMinizationAlgorithm {
	p := new(SatParameters_BinaryMinizationAlgorithm)
	*p = x
	return p
}

func (x SatParameters_BinaryMinizationAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_BinaryMinizationAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[3].Descriptor()
}

func (SatParameters_BinaryMinizationAlgorithm) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[3]
}

func (x SatParameters_BinaryMinizationAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_BinaryMinizationAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_BinaryMinizationAlgorithm(num)
	return nil
}

// Deprecated: Use SatParameters_BinaryMinizationAlgorithm.Descriptor instead.
func (SatParameters_BinaryMinizationAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 3}
}

// Each time a clause activity is bumped, the clause has a chance to be
// protected during the next cleanup phase. Note that clauses used as a reason
// are always protected.
type SatParameters_ClauseProtection int32

const (
	SatParameters_PROTECTION_NONE   SatParameters_ClauseProtection = 0 // No protection.
	SatParameters_PROTECTION_ALWAYS SatParameters_ClauseProtection = 1 // Protect all clauses whose activity is bumped.
	SatParameters_PROTECTION_LBD    SatParameters_ClauseProtection = 2 // Only protect clause with a better LBD.
)

// Enum value maps for SatParameters_ClauseProtection.
var (
	SatParameters_ClauseProtection_name = map[int32]string{
		0: "PROTECTION_NONE",
		1: "PROTECTION_ALWAYS",
		2: "PROTECTION_LBD",
	}
	SatParameters_ClauseProtection_value = map[string]int32{
		"PROTECTION_NONE":   0,
		"PROTECTION_ALWAYS": 1,
		"PROTECTION_LBD":    2,
	}
)

func (x SatParameters_ClauseProtection) Enum() *SatParameters_ClauseProtection {
	p := new(SatParameters_ClauseProtection)
	*p = x
	return p
}

func (x SatParameters_ClauseProtection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_ClauseProtection) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[4].Descriptor()
}

func (SatParameters_ClauseProtection) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[4]
}

func (x SatParameters_ClauseProtection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_ClauseProtection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_ClauseProtection(num)
	return nil
}

// Deprecated: Use SatParameters_ClauseProtection.Descriptor instead.
func (SatParameters_ClauseProtection) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 4}
}

// The clauses that will be kept during a cleanup are the ones that come
// first under this order. We always keep or exclude ties together.
type SatParameters_ClauseOrdering int32

const (
	// Order clause by decreasing activity, then by increasing LBD.
	SatParameters_CLAUSE_ACTIVITY SatParameters_ClauseOrdering = 0
	// Order clause by increasing LBD, then by decreasing activity.
	SatParameters_CLAUSE_LBD SatParameters_ClauseOrdering = 1
)

// Enum value maps for SatParameters_ClauseOrdering.
var (
	SatParameters_ClauseOrdering_name = map[int32]string{
		0: "CLAUSE_ACTIVITY",
		1: "CLAUSE_LBD",
	}
	SatParameters_ClauseOrdering_value = map[string]int32{
		"CLAUSE_ACTIVITY": 0,
		"CLAUSE_LBD":      1,
	}
)

func (x SatParameters_ClauseOrdering) Enum() *SatParameters_ClauseOrdering {
	p := new(SatParameters_ClauseOrdering)
	*p = x
	return p
}

func (x SatParameters_ClauseOrdering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_ClauseOrdering) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[5].Descriptor()
}

func (SatParameters_ClauseOrdering) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[5]
}

func (x SatParameters_ClauseOrdering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_ClauseOrdering) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_ClauseOrdering(num)
	return nil
}

// Deprecated: Use SatParameters_ClauseOrdering.Descriptor instead.
func (SatParameters_ClauseOrdering) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 5}
}

// Restart algorithms.
//
// A reference for the more advanced ones is:
// Gilles Audemard, Laurent Simon, "Refining Restarts Strategies for SAT
// and UNSAT", Principles and Practice of Constraint Programming Lecture
// Notes in Computer Science 2012, pp 118-126
type SatParameters_RestartAlgorithm int32

const (
	SatParameters_NO_RESTART SatParameters_RestartAlgorithm = 0
	// Just follow a Luby sequence times restart_period.
	SatParameters_LUBY_RESTART SatParameters_RestartAlgorithm = 1
	// Moving average restart based on the decision level of conflicts.
	SatParameters_DL_MOVING_AVERAGE_RESTART SatParameters_RestartAlgorithm = 2
	// Moving average restart based on the LBD of conflicts.
	SatParameters_LBD_MOVING_AVERAGE_RESTART SatParameters_RestartAlgorithm = 3
	// Fixed period restart every restart period.
	SatParameters_FIXED_RESTART SatParameters_RestartAlgorithm = 4
)

// Enum value maps for SatParameters_RestartAlgorithm.
var (
	SatParameters_RestartAlgorithm_name = map[int32]string{
		0: "NO_RESTART",
		1: "LUBY_RESTART",
		2: "DL_MOVING_AVERAGE_RESTART",
		3: "LBD_MOVING_AVERAGE_RESTART",
		4: "FIXED_RESTART",
	}
	SatParameters_RestartAlgorithm_value = map[string]int32{
		"NO_RESTART":                 0,
		"LUBY_RESTART":               1,
		"DL_MOVING_AVERAGE_RESTART":  2,
		"LBD_MOVING_AVERAGE_RESTART": 3,
		"FIXED_RESTART":              4,
	}
)

func (x SatParameters_RestartAlgorithm) Enum() *SatParameters_RestartAlgorithm {
	p := new(SatParameters_RestartAlgorithm)
	*p = x
	return p
}

func (x SatParameters_RestartAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_RestartAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[6].Descriptor()
}

func (SatParameters_RestartAlgorithm) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[6]
}

func (x SatParameters_RestartAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_RestartAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_RestartAlgorithm(num)
	return nil
}

// Deprecated: Use SatParameters_RestartAlgorithm.Descriptor instead.
func (SatParameters_RestartAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 6}
}

// In what order do we add the assumptions in a core-based max-sat algorithm
type SatParameters_MaxSatAssumptionOrder int32

const (
	SatParameters_DEFAULT_ASSUMPTION_ORDER   SatParameters_MaxSatAssumptionOrder = 0
	SatParameters_ORDER_ASSUMPTION_BY_DEPTH  SatParameters_MaxSatAssumptionOrder = 1
	SatParameters_ORDER_ASSUMPTION_BY_WEIGHT SatParameters_MaxSatAssumptionOrder = 2
)

// Enum value maps for SatParameters_MaxSatAssumptionOrder.
var (
	SatParameters_MaxSatAssumptionOrder_name = map[int32]string{
		0: "DEFAULT_ASSUMPTION_ORDER",
		1: "ORDER_ASSUMPTION_BY_DEPTH",
		2: "ORDER_ASSUMPTION_BY_WEIGHT",
	}
	SatParameters_MaxSatAssumptionOrder_value = map[string]int32{
		"DEFAULT_ASSUMPTION_ORDER":   0,
		"ORDER_ASSUMPTION_BY_DEPTH":  1,
		"ORDER_ASSUMPTION_BY_WEIGHT": 2,
	}
)

func (x SatParameters_MaxSatAssumptionOrder) Enum() *SatParameters_MaxSatAssumptionOrder {
	p := new(SatParameters_MaxSatAssumptionOrder)
	*p = x
	return p
}

func (x SatParameters_MaxSatAssumptionOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_MaxSatAssumptionOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[7].Descriptor()
}

func (SatParameters_MaxSatAssumptionOrder) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[7]
}

func (x SatParameters_MaxSatAssumptionOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_MaxSatAssumptionOrder) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_MaxSatAssumptionOrder(num)
	return nil
}

// Deprecated: Use SatParameters_MaxSatAssumptionOrder.Descriptor instead.
func (SatParameters_MaxSatAssumptionOrder) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 7}
}

// What stratification algorithm we use in the presence of weight.
type SatParameters_MaxSatStratificationAlgorithm int32

const (
	// No stratification of the problem.
	SatParameters_STRATIFICATION_NONE SatParameters_MaxSatStratificationAlgorithm = 0
	// Start with literals with the highest weight, and when SAT, add the
	// literals with the next highest weight and so on.
	SatParameters_STRATIFICATION_DESCENT SatParameters_MaxSatStratificationAlgorithm = 1
	// Start with all literals. Each time a core is found with a given minimum
	// weight, do not consider literals with a lower weight for the next core
	// computation. If the subproblem is SAT, do like in STRATIFICATION_DESCENT
	// and just add the literals with the next highest weight.
	SatParameters_STRATIFICATION_ASCENT SatParameters_MaxSatStratificationAlgorithm = 2
)

// Enum value maps for SatParameters_MaxSatStratificationAlgorithm.
var (
	SatParameters_MaxSatStratificationAlgorithm_name = map[int32]string{
		0: "STRATIFICATION_NONE",
		1: "STRATIFICATION_DESCENT",
		2: "STRATIFICATION_ASCENT",
	}
	SatParameters_MaxSatStratificationAlgorithm_value = map[string]int32{
		"STRATIFICATION_NONE":    0,
		"STRATIFICATION_DESCENT": 1,
		"STRATIFICATION_ASCENT":  2,
	}
)

func (x SatParameters_MaxSatStratificationAlgorithm) Enum() *SatParameters_MaxSatStratificationAlgorithm {
	p := new(SatParameters_MaxSatStratificationAlgorithm)
	*p = x
	return p
}

func (x SatParameters_MaxSatStratificationAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_MaxSatStratificationAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[8].Descriptor()
}

func (SatParameters_MaxSatStratificationAlgorithm) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[8]
}

func (x SatParameters_MaxSatStratificationAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_MaxSatStratificationAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_MaxSatStratificationAlgorithm(num)
	return nil
}

// Deprecated: Use SatParameters_MaxSatStratificationAlgorithm.Descriptor instead.
func (SatParameters_MaxSatStratificationAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 8}
}

// The search branching will be used to decide how to branch on unfixed nodes.
type SatParameters_SearchBranching int32

const (
	// Try to fix all literals using the underlying SAT solver's heuristics,
	// then generate and fix literals until integer variables are fixed. New
	// literals on integer variables are generated using the fixed search
	// specified by the user or our default one.
	SatParameters_AUTOMATIC_SEARCH SatParameters_SearchBranching = 0
	// If used then all decisions taken by the solver are made using a fixed
	// order as specified in the API or in the CpModelProto search_strategy
	// field.
	SatParameters_FIXED_SEARCH SatParameters_SearchBranching = 1
	// Simple portfolio search used by LNS workers.
	SatParameters_PORTFOLIO_SEARCH SatParameters_SearchBranching = 2
	// If used, the solver will use heuristics from the LP relaxation. This
	// exploit the reduced costs of the variables in the relaxation.
	SatParameters_LP_SEARCH SatParameters_SearchBranching = 3
	// If used, the solver uses the pseudo costs for branching. Pseudo costs
	// are computed using the historical change in objective bounds when some
	// decision are taken. Note that this works whether we use an LP or not.
	SatParameters_PSEUDO_COST_SEARCH SatParameters_SearchBranching = 4
	// Mainly exposed here for testing. This quickly tries a lot of randomized
	// heuristics with a low conflict limit. It usually provides a good first
	// solution.
	SatParameters_PORTFOLIO_WITH_QUICK_RESTART_SEARCH SatParameters_SearchBranching = 5
	// Mainly used internally. This is like FIXED_SEARCH, except we follow the
	// solution_hint field of the CpModelProto rather than using the information
	// provided in the search_strategy.
	SatParameters_HINT_SEARCH SatParameters_SearchBranching = 6
	// Similar to FIXED_SEARCH, but differ in how the variable not listed into
	// the fixed search heuristics are branched on. This will always start the
	// search tree according to the specified fixed search strategy, but will
	// complete it using the default automatic search.
	SatParameters_PARTIAL_FIXED_SEARCH SatParameters_SearchBranching = 7
	// Randomized search. Used to increase entropy in the search.
	SatParameters_RANDOMIZED_SEARCH SatParameters_SearchBranching = 8
)

// Enum value maps for SatParameters_SearchBranching.
var (
	SatParameters_SearchBranching_name = map[int32]string{
		0: "AUTOMATIC_SEARCH",
		1: "FIXED_SEARCH",
		2: "PORTFOLIO_SEARCH",
		3: "LP_SEARCH",
		4: "PSEUDO_COST_SEARCH",
		5: "PORTFOLIO_WITH_QUICK_RESTART_SEARCH",
		6: "HINT_SEARCH",
		7: "PARTIAL_FIXED_SEARCH",
		8: "RANDOMIZED_SEARCH",
	}
	SatParameters_SearchBranching_value = map[string]int32{
		"AUTOMATIC_SEARCH":                    0,
		"FIXED_SEARCH":                        1,
		"PORTFOLIO_SEARCH":                    2,
		"LP_SEARCH":                           3,
		"PSEUDO_COST_SEARCH":                  4,
		"PORTFOLIO_WITH_QUICK_RESTART_SEARCH": 5,
		"HINT_SEARCH":                         6,
		"PARTIAL_FIXED_SEARCH":                7,
		"RANDOMIZED_SEARCH":                   8,
	}
)

func (x SatParameters_SearchBranching) Enum() *SatParameters_SearchBranching {
	p := new(SatParameters_SearchBranching)
	*p = x
	return p
}

func (x SatParameters_SearchBranching) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_SearchBranching) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[9].Descriptor()
}

func (SatParameters_SearchBranching) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[9]
}

func (x SatParameters_SearchBranching) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_SearchBranching) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_SearchBranching(num)
	return nil
}

// Deprecated: Use SatParameters_SearchBranching.Descriptor instead.
func (SatParameters_SearchBranching) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 9}
}

type SatParameters_SharedTreeSplitStrategy int32

const (
	// Uses the default strategy, currently equivalent to
	// SPLIT_STRATEGY_DISCREPANCY.
	SatParameters_SPLIT_STRATEGY_AUTO SatParameters_SharedTreeSplitStrategy = 0
	// Only accept splits if the node to be split's depth+discrepancy is minimal
	// for the desired number of leaves.
	// The preferred child for discrepancy calculation is the one with the
	// lowest objective lower bound or the original branch direction if the
	// bounds are equal. This rule allows twice as many workers to work in the
	// preferred subtree as non-preferred.
	SatParameters_SPLIT_STRATEGY_DISCREPANCY SatParameters_SharedTreeSplitStrategy = 1
	// Only split nodes with an objective lb equal to the global lb.
	SatParameters_SPLIT_STRATEGY_OBJECTIVE_LB SatParameters_SharedTreeSplitStrategy = 2
	// Attempt to keep the shared tree balanced.
	SatParameters_SPLIT_STRATEGY_BALANCED_TREE SatParameters_SharedTreeSplitStrategy = 3
	// Workers race to split their subtree, the winner's proposal is accepted.
	SatParameters_SPLIT_STRATEGY_FIRST_PROPOSAL SatParameters_SharedTreeSplitStrategy = 4
)

// Enum value maps for SatParameters_SharedTreeSplitStrategy.
var (
	SatParameters_SharedTreeSplitStrategy_name = map[int32]string{
		0: "SPLIT_STRATEGY_AUTO",
		1: "SPLIT_STRATEGY_DISCREPANCY",
		2: "SPLIT_STRATEGY_OBJECTIVE_LB",
		3: "SPLIT_STRATEGY_BALANCED_TREE",
		4: "SPLIT_STRATEGY_FIRST_PROPOSAL",
	}
	SatParameters_SharedTreeSplitStrategy_value = map[string]int32{
		"SPLIT_STRATEGY_AUTO":           0,
		"SPLIT_STRATEGY_DISCREPANCY":    1,
		"SPLIT_STRATEGY_OBJECTIVE_LB":   2,
		"SPLIT_STRATEGY_BALANCED_TREE":  3,
		"SPLIT_STRATEGY_FIRST_PROPOSAL": 4,
	}
)

func (x SatParameters_SharedTreeSplitStrategy) Enum() *SatParameters_SharedTreeSplitStrategy {
	p := new(SatParameters_SharedTreeSplitStrategy)
	*p = x
	return p
}

func (x SatParameters_SharedTreeSplitStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_SharedTreeSplitStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[10].Descriptor()
}

func (SatParameters_SharedTreeSplitStrategy) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[10]
}

func (x SatParameters_SharedTreeSplitStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_SharedTreeSplitStrategy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_SharedTreeSplitStrategy(num)
	return nil
}

// Deprecated: Use SatParameters_SharedTreeSplitStrategy.Descriptor instead.
func (SatParameters_SharedTreeSplitStrategy) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 10}
}

// Rounding method to use for feasibility pump.
type SatParameters_FPRoundingMethod int32

const (
	// Rounds to the nearest integer value.
	SatParameters_NEAREST_INTEGER SatParameters_FPRoundingMethod = 0
	// Counts the number of linear constraints restricting the variable in the
	// increasing values (up locks) and decreasing values (down locks). Rounds
	// the variable in the direction of lesser locks.
	SatParameters_LOCK_BASED SatParameters_FPRoundingMethod = 1
	// Similar to lock based rounding except this only considers locks of active
	// constraints from the last lp solve.
	SatParameters_ACTIVE_LOCK_BASED SatParameters_FPRoundingMethod = 3
	// This is expensive rounding algorithm. We round variables one by one and
	// propagate the bounds in between. If none of the rounded values fall in
	// the continuous domain specified by lower and upper bound, we use the
	// current lower/upper bound (whichever one is closest) instead of rounding
	// the fractional lp solution value. If both the rounded values are in the
	// domain, we round to nearest integer.
	SatParameters_PROPAGATION_ASSISTED SatParameters_FPRoundingMethod = 2
)

// Enum value maps for SatParameters_FPRoundingMethod.
var (
	SatParameters_FPRoundingMethod_name = map[int32]string{
		0: "NEAREST_INTEGER",
		1: "LOCK_BASED",
		3: "ACTIVE_LOCK_BASED",
		2: "PROPAGATION_ASSISTED",
	}
	SatParameters_FPRoundingMethod_value = map[string]int32{
		"NEAREST_INTEGER":      0,
		"LOCK_BASED":           1,
		"ACTIVE_LOCK_BASED":    3,
		"PROPAGATION_ASSISTED": 2,
	}
)

func (x SatParameters_FPRoundingMethod) Enum() *SatParameters_FPRoundingMethod {
	p := new(SatParameters_FPRoundingMethod)
	*p = x
	return p
}

func (x SatParameters_FPRoundingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatParameters_FPRoundingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_sat_sat_parameters_proto_enumTypes[11].Descriptor()
}

func (SatParameters_FPRoundingMethod) Type() protoreflect.EnumType {
	return &file_ortools_sat_sat_parameters_proto_enumTypes[11]
}

func (x SatParameters_FPRoundingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SatParameters_FPRoundingMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SatParameters_FPRoundingMethod(num)
	return nil
}

// Deprecated: Use SatParameters_FPRoundingMethod.Descriptor instead.
func (SatParameters_FPRoundingMethod) EnumDescriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0, 11}
}

// Contains the definitions for all the sat algorithm parameters and their
// default values.
//
// NEXT TAG: 280
type SatParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In some context, like in a portfolio of search, it makes sense to name a
	// given parameters set for logging purpose.
	Name                   *string                      `protobuf:"bytes,171,opt,name=name,def=" json:"name,omitempty"`
	PreferredVariableOrder *SatParameters_VariableOrder `protobuf:"varint,1,opt,name=preferred_variable_order,json=preferredVariableOrder,enum=operations_research.sat.SatParameters_VariableOrder,def=0" json:"preferred_variable_order,omitempty"`
	InitialPolarity        *SatParameters_Polarity      `protobuf:"varint,2,opt,name=initial_polarity,json=initialPolarity,enum=operations_research.sat.SatParameters_Polarity,def=1" json:"initial_polarity,omitempty"`
	// If this is true, then the polarity of a variable will be the last value it
	// was assigned to, or its default polarity if it was never assigned since the
	// call to ResetDecisionHeuristic().
	//
	// Actually, we use a newer version where we follow the last value in the
	// longest non-conflicting partial assignment in the current phase.
	//
	// This is called 'literal phase saving'. For details see 'A Lightweight
	// Component Caching Scheme for Satisfiability Solvers' K. Pipatsrisawat and
	// A.Darwiche, In 10th International Conference on Theory and Applications of
	// Satisfiability Testing, 2007.
	UsePhaseSaving *bool `protobuf:"varint,44,opt,name=use_phase_saving,json=usePhaseSaving,def=1" json:"use_phase_saving,omitempty"`
	// If non-zero, then we change the polarity heuristic after that many number
	// of conflicts in an arithmetically increasing fashion. So x the first time,
	// 2 * x the second time, etc...
	PolarityRephaseIncrement *int32 `protobuf:"varint,168,opt,name=polarity_rephase_increment,json=polarityRephaseIncrement,def=1000" json:"polarity_rephase_increment,omitempty"`
	// The proportion of polarity chosen at random. Note that this take
	// precedence over the phase saving heuristic. This is different from
	// initial_polarity:POLARITY_RANDOM because it will select a new random
	// polarity each time the variable is branched upon instead of selecting one
	// initially and then always taking this choice.
	RandomPolarityRatio *float64 `protobuf:"fixed64,45,opt,name=random_polarity_ratio,json=randomPolarityRatio,def=0" json:"random_polarity_ratio,omitempty"`
	// A number between 0 and 1 that indicates the proportion of branching
	// variables that are selected randomly instead of choosing the first variable
	// from the given variable_ordering strategy.
	RandomBranchesRatio *float64 `protobuf:"fixed64,32,opt,name=random_branches_ratio,json=randomBranchesRatio,def=0" json:"random_branches_ratio,omitempty"`
	// Whether we use the ERWA (Exponential Recency Weighted Average) heuristic as
	// described in "Learning Rate Based Branching Heuristic for SAT solvers",
	// J.H.Liang, V. Ganesh, P. Poupart, K.Czarnecki, SAT 2016.
	UseErwaHeuristic *bool `protobuf:"varint,75,opt,name=use_erwa_heuristic,json=useErwaHeuristic,def=0" json:"use_erwa_heuristic,omitempty"`
	// The initial value of the variables activity. A non-zero value only make
	// sense when use_erwa_heuristic is true. Experiments with a value of 1e-2
	// together with the ERWA heuristic showed slighthly better result than simply
	// using zero. The idea is that when the "learning rate" of a variable becomes
	// lower than this value, then we prefer to branch on never explored before
	// variables. This is not in the ERWA paper.
	InitialVariablesActivity *float64 `protobuf:"fixed64,76,opt,name=initial_variables_activity,json=initialVariablesActivity,def=0" json:"initial_variables_activity,omitempty"`
	// When this is true, then the variables that appear in any of the reason of
	// the variables in a conflict have their activity bumped. This is addition to
	// the variables in the conflict, and the one that were used during conflict
	// resolution.
	AlsoBumpVariablesInConflictReasons *bool                                        `protobuf:"varint,77,opt,name=also_bump_variables_in_conflict_reasons,json=alsoBumpVariablesInConflictReasons,def=0" json:"also_bump_variables_in_conflict_reasons,omitempty"`
	MinimizationAlgorithm              *SatParameters_ConflictMinimizationAlgorithm `protobuf:"varint,4,opt,name=minimization_algorithm,json=minimizationAlgorithm,enum=operations_research.sat.SatParameters_ConflictMinimizationAlgorithm,def=2" json:"minimization_algorithm,omitempty"`
	BinaryMinimizationAlgorithm        *SatParameters_BinaryMinizationAlgorithm     `protobuf:"varint,34,opt,name=binary_minimization_algorithm,json=binaryMinimizationAlgorithm,enum=operations_research.sat.SatParameters_BinaryMinizationAlgorithm,def=1" json:"binary_minimization_algorithm,omitempty"`
	// At a really low cost, during the 1-UIP conflict computation, it is easy to
	// detect if some of the involved reasons are subsumed by the current
	// conflict. When this is true, such clauses are detached and later removed
	// from the problem.
	SubsumptionDuringConflictAnalysis *bool `protobuf:"varint,56,opt,name=subsumption_during_conflict_analysis,json=subsumptionDuringConflictAnalysis,def=1" json:"subsumption_during_conflict_analysis,omitempty"`
	// Trigger a cleanup when this number of "deletable" clauses is learned.
	ClauseCleanupPeriod *int32 `protobuf:"varint,11,opt,name=clause_cleanup_period,json=clauseCleanupPeriod,def=10000" json:"clause_cleanup_period,omitempty"`
	// During a cleanup, we will always keep that number of "deletable" clauses.
	// Note that this doesn't include the "protected" clauses.
	ClauseCleanupTarget *int32 `protobuf:"varint,13,opt,name=clause_cleanup_target,json=clauseCleanupTarget,def=0" json:"clause_cleanup_target,omitempty"`
	// During a cleanup, if clause_cleanup_target is 0, we will delete the
	// clause_cleanup_ratio of "deletable" clauses instead of aiming for a fixed
	// target of clauses to keep.
	ClauseCleanupRatio      *float64                        `protobuf:"fixed64,190,opt,name=clause_cleanup_ratio,json=clauseCleanupRatio,def=0.5" json:"clause_cleanup_ratio,omitempty"`
	ClauseCleanupProtection *SatParameters_ClauseProtection `protobuf:"varint,58,opt,name=clause_cleanup_protection,json=clauseCleanupProtection,enum=operations_research.sat.SatParameters_ClauseProtection,def=0" json:"clause_cleanup_protection,omitempty"`
	// All the clauses with a LBD (literal blocks distance) lower or equal to this
	// parameters will always be kept.
	ClauseCleanupLbdBound *int32                        `protobuf:"varint,59,opt,name=clause_cleanup_lbd_bound,json=clauseCleanupLbdBound,def=5" json:"clause_cleanup_lbd_bound,omitempty"`
	ClauseCleanupOrdering *SatParameters_ClauseOrdering `protobuf:"varint,60,opt,name=clause_cleanup_ordering,json=clauseCleanupOrdering,enum=operations_research.sat.SatParameters_ClauseOrdering,def=0" json:"clause_cleanup_ordering,omitempty"`
	// Same as for the clauses, but for the learned pseudo-Boolean constraints.
	PbCleanupIncrement *int32   `protobuf:"varint,46,opt,name=pb_cleanup_increment,json=pbCleanupIncrement,def=200" json:"pb_cleanup_increment,omitempty"`
	PbCleanupRatio     *float64 `protobuf:"fixed64,47,opt,name=pb_cleanup_ratio,json=pbCleanupRatio,def=0.5" json:"pb_cleanup_ratio,omitempty"`
	// Each time a conflict is found, the activities of some variables are
	// increased by one. Then, the activity of all variables are multiplied by
	// variable_activity_decay.
	//
	// To implement this efficiently, the activity of all the variables is not
	// decayed at each conflict. Instead, the activity increment is multiplied by
	// 1 / decay. When an activity reach max_variable_activity_value, all the
	// activity are multiplied by 1 / max_variable_activity_value.
	VariableActivityDecay    *float64 `protobuf:"fixed64,15,opt,name=variable_activity_decay,json=variableActivityDecay,def=0.8" json:"variable_activity_decay,omitempty"`
	MaxVariableActivityValue *float64 `protobuf:"fixed64,16,opt,name=max_variable_activity_value,json=maxVariableActivityValue,def=1e+100" json:"max_variable_activity_value,omitempty"`
	// The activity starts at 0.8 and increment by 0.01 every 5000 conflicts until
	// 0.95. This "hack" seems to work well and comes from:
	//
	// Glucose 2.3 in the SAT 2013 Competition - SAT Competition 2013
	// http://edacc4.informatik.uni-ulm.de/SC13/solver-description-download/136
	GlucoseMaxDecay             *float64 `protobuf:"fixed64,22,opt,name=glucose_max_decay,json=glucoseMaxDecay,def=0.95" json:"glucose_max_decay,omitempty"`
	GlucoseDecayIncrement       *float64 `protobuf:"fixed64,23,opt,name=glucose_decay_increment,json=glucoseDecayIncrement,def=0.01" json:"glucose_decay_increment,omitempty"`
	GlucoseDecayIncrementPeriod *int32   `protobuf:"varint,24,opt,name=glucose_decay_increment_period,json=glucoseDecayIncrementPeriod,def=5000" json:"glucose_decay_increment_period,omitempty"`
	// Clause activity parameters (same effect as the one on the variables).
	ClauseActivityDecay    *float64 `protobuf:"fixed64,17,opt,name=clause_activity_decay,json=clauseActivityDecay,def=0.999" json:"clause_activity_decay,omitempty"`
	MaxClauseActivityValue *float64 `protobuf:"fixed64,18,opt,name=max_clause_activity_value,json=maxClauseActivityValue,def=1e+20" json:"max_clause_activity_value,omitempty"`
	// The restart strategies will change each time the strategy_counter is
	// increased. The current strategy will simply be the one at index
	// strategy_counter modulo the number of strategy. Note that if this list
	// includes a NO_RESTART, nothing will change when it is reached because the
	// strategy_counter will only increment after a restart.
	//
	// The idea of switching of search strategy tailored for SAT/UNSAT comes from
	// Chanseok Oh with his COMiniSatPS solver, see http://cs.nyu.edu/~chanseok/.
	// But more generally, it seems REALLY beneficial to try different strategy.
	RestartAlgorithms        []SatParameters_RestartAlgorithm `protobuf:"varint,61,rep,name=restart_algorithms,json=restartAlgorithms,enum=operations_research.sat.SatParameters_RestartAlgorithm" json:"restart_algorithms,omitempty"`
	DefaultRestartAlgorithms *string                          `protobuf:"bytes,70,opt,name=default_restart_algorithms,json=defaultRestartAlgorithms,def=LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART" json:"default_restart_algorithms,omitempty"`
	// Restart period for the FIXED_RESTART strategy. This is also the multiplier
	// used by the LUBY_RESTART strategy.
	RestartPeriod *int32 `protobuf:"varint,30,opt,name=restart_period,json=restartPeriod,def=50" json:"restart_period,omitempty"`
	// Size of the window for the moving average restarts.
	RestartRunningWindowSize *int32 `protobuf:"varint,62,opt,name=restart_running_window_size,json=restartRunningWindowSize,def=50" json:"restart_running_window_size,omitempty"`
	// In the moving average restart algorithms, a restart is triggered if the
	// window average times this ratio is greater that the global average.
	RestartDlAverageRatio  *float64 `protobuf:"fixed64,63,opt,name=restart_dl_average_ratio,json=restartDlAverageRatio,def=1" json:"restart_dl_average_ratio,omitempty"`
	RestartLbdAverageRatio *float64 `protobuf:"fixed64,71,opt,name=restart_lbd_average_ratio,json=restartLbdAverageRatio,def=1" json:"restart_lbd_average_ratio,omitempty"`
	// Block a moving restart algorithm if the trail size of the current conflict
	// is greater than the multiplier times the moving average of the trail size
	// at the previous conflicts.
	UseBlockingRestart        *bool    `protobuf:"varint,64,opt,name=use_blocking_restart,json=useBlockingRestart,def=0" json:"use_blocking_restart,omitempty"`
	BlockingRestartWindowSize *int32   `protobuf:"varint,65,opt,name=blocking_restart_window_size,json=blockingRestartWindowSize,def=5000" json:"blocking_restart_window_size,omitempty"`
	BlockingRestartMultiplier *float64 `protobuf:"fixed64,66,opt,name=blocking_restart_multiplier,json=blockingRestartMultiplier,def=1.4" json:"blocking_restart_multiplier,omitempty"`
	// After each restart, if the number of conflict since the last strategy
	// change is greater that this, then we increment a "strategy_counter" that
	// can be use to change the search strategy used by the following restarts.
	NumConflictsBeforeStrategyChanges *int32 `protobuf:"varint,68,opt,name=num_conflicts_before_strategy_changes,json=numConflictsBeforeStrategyChanges,def=0" json:"num_conflicts_before_strategy_changes,omitempty"`
	// The parameter num_conflicts_before_strategy_changes is increased by that
	// much after each strategy change.
	StrategyChangeIncreaseRatio *float64 `protobuf:"fixed64,69,opt,name=strategy_change_increase_ratio,json=strategyChangeIncreaseRatio,def=0" json:"strategy_change_increase_ratio,omitempty"`
	// Maximum time allowed in seconds to solve a problem.
	// The counter will starts at the beginning of the Solve() call.
	MaxTimeInSeconds *float64 `protobuf:"fixed64,36,opt,name=max_time_in_seconds,json=maxTimeInSeconds,def=inf" json:"max_time_in_seconds,omitempty"`
	// Maximum time allowed in deterministic time to solve a problem.
	// The deterministic time should be correlated with the real time used by the
	// solver, the time unit being as close as possible to a second.
	MaxDeterministicTime *float64 `protobuf:"fixed64,67,opt,name=max_deterministic_time,json=maxDeterministicTime,def=inf" json:"max_deterministic_time,omitempty"`
	// Maximum number of conflicts allowed to solve a problem.
	//
	// TODO(user): Maybe change the way the conflict limit is enforced?
	// currently it is enforced on each independent internal SAT solve, rather
	// than on the overall number of conflicts across all solves. So in the
	// context of an optimization problem, this is not really usable directly by a
	// client.
	MaxNumberOfConflicts *int64 `protobuf:"varint,37,opt,name=max_number_of_conflicts,json=maxNumberOfConflicts,def=9223372036854775807" json:"max_number_of_conflicts,omitempty"` // kint64max
	// Maximum memory allowed for the whole thread containing the solver. The
	// solver will abort as soon as it detects that this limit is crossed. As a
	// result, this limit is approximative, but usually the solver will not go too
	// much over.
	//
	// TODO(user): This is only used by the pure SAT solver, generalize to CP-SAT.
	MaxMemoryInMb *int64 `protobuf:"varint,40,opt,name=max_memory_in_mb,json=maxMemoryInMb,def=10000" json:"max_memory_in_mb,omitempty"`
	// Stop the search when the gap between the best feasible objective (O) and
	// our best objective bound (B) is smaller than a limit.
	// The exact definition is:
	// - Absolute: abs(O - B)
	// - Relative: abs(O - B) / max(1, abs(O)).
	//
	// Important: The relative gap depends on the objective offset! If you
	// artificially shift the objective, you will get widely different value of
	// the relative gap.
	//
	// Note that if the gap is reached, the search status will be OPTIMAL. But
	// one can check the best objective bound to see the actual gap.
	//
	// If the objective is integer, then any absolute gap < 1 will lead to a true
	// optimal. If the objective is floating point, a gap of zero make little
	// sense so is is why we use a non-zero default value. At the end of the
	// search, we will display a warning if OPTIMAL is reported yet the gap is
	// greater than this absolute gap.
	AbsoluteGapLimit *float64 `protobuf:"fixed64,159,opt,name=absolute_gap_limit,json=absoluteGapLimit,def=0.0001" json:"absolute_gap_limit,omitempty"`
	RelativeGapLimit *float64 `protobuf:"fixed64,160,opt,name=relative_gap_limit,json=relativeGapLimit,def=0" json:"relative_gap_limit,omitempty"`
	// At the beginning of each solve, the random number generator used in some
	// part of the solver is reinitialized to this seed. If you change the random
	// seed, the solver may make different choices during the solving process.
	//
	// For some problems, the running time may vary a lot depending on small
	// change in the solving algorithm. Running the solver with different seeds
	// enables to have more robust benchmarks when evaluating new features.
	RandomSeed *int32 `protobuf:"varint,31,opt,name=random_seed,json=randomSeed,def=1" json:"random_seed,omitempty"`
	// This is mainly here to test the solver variability. Note that in tests, if
	// not explicitly set to false, all 3 options will be set to true so that
	// clients do not rely on the solver returning a specific solution if they are
	// many equivalent optimal solutions.
	PermuteVariableRandomly        *bool `protobuf:"varint,178,opt,name=permute_variable_randomly,json=permuteVariableRandomly,def=0" json:"permute_variable_randomly,omitempty"`
	PermutePresolveConstraintOrder *bool `protobuf:"varint,179,opt,name=permute_presolve_constraint_order,json=permutePresolveConstraintOrder,def=0" json:"permute_presolve_constraint_order,omitempty"`
	UseAbslRandom                  *bool `protobuf:"varint,180,opt,name=use_absl_random,json=useAbslRandom,def=0" json:"use_absl_random,omitempty"`
	// Whether the solver should log the search progress. This is the maing
	// logging parameter and if this is false, none of the logging (callbacks,
	// log_to_stdout, log_to_response, ...) will do anything.
	LogSearchProgress *bool `protobuf:"varint,41,opt,name=log_search_progress,json=logSearchProgress,def=0" json:"log_search_progress,omitempty"`
	// Whether the solver should display per sub-solver search statistics.
	// This is only useful is log_search_progress is set to true, and if the
	// number of search workers is > 1. Note that in all case we display a bit
	// of stats with one line per subsolver.
	LogSubsolverStatistics *bool `protobuf:"varint,189,opt,name=log_subsolver_statistics,json=logSubsolverStatistics,def=0" json:"log_subsolver_statistics,omitempty"`
	// Add a prefix to all logs.
	LogPrefix *string `protobuf:"bytes,185,opt,name=log_prefix,json=logPrefix,def=" json:"log_prefix,omitempty"`
	// Log to stdout.
	LogToStdout *bool `protobuf:"varint,186,opt,name=log_to_stdout,json=logToStdout,def=1" json:"log_to_stdout,omitempty"`
	// Log to response proto.
	LogToResponse *bool `protobuf:"varint,187,opt,name=log_to_response,json=logToResponse,def=0" json:"log_to_response,omitempty"`
	// Whether to use pseudo-Boolean resolution to analyze a conflict. Note that
	// this option only make sense if your problem is modelized using
	// pseudo-Boolean constraints. If you only have clauses, this shouldn't change
	// anything (except slow the solver down).
	UsePbResolution *bool `protobuf:"varint,43,opt,name=use_pb_resolution,json=usePbResolution,def=0" json:"use_pb_resolution,omitempty"`
	// A different algorithm during PB resolution. It minimizes the number of
	// calls to ReduceCoefficients() which can be time consuming. However, the
	// search space will be different and if the coefficients are large, this may
	// lead to integer overflows that could otherwise be prevented.
	MinimizeReductionDuringPbResolution *bool `protobuf:"varint,48,opt,name=minimize_reduction_during_pb_resolution,json=minimizeReductionDuringPbResolution,def=0" json:"minimize_reduction_during_pb_resolution,omitempty"`
	// Whether or not the assumption levels are taken into account during the LBD
	// computation. According to the reference below, not counting them improves
	// the solver in some situation. Note that this only impact solves under
	// assumptions.
	//
	// Gilles Audemard, Jean-Marie Lagniez, Laurent Simon, "Improving Glucose for
	// Incremental SAT Solving with Assumptions: Application to MUS Extraction"
	// Theory and Applications of Satisfiability Testing - SAT 2013, Lecture Notes
	// in Computer Science Volume 7962, 2013, pp 309-317.
	CountAssumptionLevelsInLbd *bool `protobuf:"varint,49,opt,name=count_assumption_levels_in_lbd,json=countAssumptionLevelsInLbd,def=1" json:"count_assumption_levels_in_lbd,omitempty"`
	// During presolve, only try to perform the bounded variable elimination (BVE)
	// of a variable x if the number of occurrences of x times the number of
	// occurrences of not(x) is not greater than this parameter.
	PresolveBveThreshold *int32 `protobuf:"varint,54,opt,name=presolve_bve_threshold,json=presolveBveThreshold,def=500" json:"presolve_bve_threshold,omitempty"`
	// During presolve, we apply BVE only if this weight times the number of
	// clauses plus the number of clause literals is not increased.
	PresolveBveClauseWeight *int32 `protobuf:"varint,55,opt,name=presolve_bve_clause_weight,json=presolveBveClauseWeight,def=3" json:"presolve_bve_clause_weight,omitempty"`
	// The maximum "deterministic" time limit to spend in probing. A value of
	// zero will disable the probing.
	//
	// TODO(user): Clean up. The first one is used in CP-SAT, the other in pure
	// SAT presolve.
	ProbingDeterministicTimeLimit         *float64 `protobuf:"fixed64,226,opt,name=probing_deterministic_time_limit,json=probingDeterministicTimeLimit,def=1" json:"probing_deterministic_time_limit,omitempty"`
	PresolveProbingDeterministicTimeLimit *float64 `protobuf:"fixed64,57,opt,name=presolve_probing_deterministic_time_limit,json=presolveProbingDeterministicTimeLimit,def=30" json:"presolve_probing_deterministic_time_limit,omitempty"`
	// Whether we use an heuristic to detect some basic case of blocked clause
	// in the SAT presolve.
	PresolveBlockedClause *bool `protobuf:"varint,88,opt,name=presolve_blocked_clause,json=presolveBlockedClause,def=1" json:"presolve_blocked_clause,omitempty"`
	// Whether or not we use Bounded Variable Addition (BVA) in the presolve.
	PresolveUseBva *bool `protobuf:"varint,72,opt,name=presolve_use_bva,json=presolveUseBva,def=1" json:"presolve_use_bva,omitempty"`
	// Apply Bounded Variable Addition (BVA) if the number of clauses is reduced
	// by stricly more than this threshold. The algorithm described in the paper
	// uses 0, but quick experiments showed that 1 is a good value. It may not be
	// worth it to add a new variable just to remove one clause.
	PresolveBvaThreshold *int32 `protobuf:"varint,73,opt,name=presolve_bva_threshold,json=presolveBvaThreshold,def=1" json:"presolve_bva_threshold,omitempty"`
	// In case of large reduction in a presolve iteration, we perform multiple
	// presolve iterations. This parameter controls the maximum number of such
	// presolve iterations.
	MaxPresolveIterations *int32 `protobuf:"varint,138,opt,name=max_presolve_iterations,json=maxPresolveIterations,def=3" json:"max_presolve_iterations,omitempty"`
	// Whether we presolve the cp_model before solving it.
	CpModelPresolve *bool `protobuf:"varint,86,opt,name=cp_model_presolve,json=cpModelPresolve,def=1" json:"cp_model_presolve,omitempty"`
	// How much effort do we spend on probing. 0 disables it completely.
	CpModelProbingLevel *int32 `protobuf:"varint,110,opt,name=cp_model_probing_level,json=cpModelProbingLevel,def=2" json:"cp_model_probing_level,omitempty"`
	// Whether we also use the sat presolve when cp_model_presolve is true.
	CpModelUseSatPresolve *bool `protobuf:"varint,93,opt,name=cp_model_use_sat_presolve,json=cpModelUseSatPresolve,def=1" json:"cp_model_use_sat_presolve,omitempty"`
	// If true, we detect variable that are unique to a table constraint and only
	// there to encode a cost on each tuple. This is usually the case when a WCSP
	// (weighted constraint program) is encoded into CP-SAT format.
	//
	// This can lead to a dramatic speed-up for such problems but is still
	// experimental at this point.
	DetectTableWithCost *bool `protobuf:"varint,216,opt,name=detect_table_with_cost,json=detectTableWithCost,def=0" json:"detect_table_with_cost,omitempty"`
	// How much we try to "compress" a table constraint. Compressing more leads to
	// less Booleans and faster propagation but can reduced the quality of the lp
	// relaxation. Values goes from 0 to 3 where we always try to fully compress a
	// table. At 2, we try to automatically decide if it is worth it.
	TableCompressionLevel *int32 `protobuf:"varint,217,opt,name=table_compression_level,json=tableCompressionLevel,def=2" json:"table_compression_level,omitempty"`
	// If true, expand all_different constraints that are not permutations.
	// Permutations (#Variables = #Values) are always expanded.
	ExpandAlldiffConstraints *bool `protobuf:"varint,170,opt,name=expand_alldiff_constraints,json=expandAlldiffConstraints,def=0" json:"expand_alldiff_constraints,omitempty"`
	// If true, expand the reservoir constraints by creating booleans for all
	// possible precedences between event and encoding the constraint.
	ExpandReservoirConstraints *bool `protobuf:"varint,182,opt,name=expand_reservoir_constraints,json=expandReservoirConstraints,def=1" json:"expand_reservoir_constraints,omitempty"`
	// If true, it disable all constraint expansion.
	// This should only be used to test the presolve of expanded constraints.
	DisableConstraintExpansion *bool `protobuf:"varint,181,opt,name=disable_constraint_expansion,json=disableConstraintExpansion,def=0" json:"disable_constraint_expansion,omitempty"`
	// Linear constraint with a complex right hand side (more than a single
	// interval) need to be expanded, there is a couple of way to do that.
	EncodeComplexLinearConstraintWithInteger *bool `protobuf:"varint,223,opt,name=encode_complex_linear_constraint_with_integer,json=encodeComplexLinearConstraintWithInteger,def=0" json:"encode_complex_linear_constraint_with_integer,omitempty"`
	// During presolve, we use a maximum clique heuristic to merge together
	// no-overlap constraints or at most one constraints. This code can be slow,
	// so we have a limit in place on the number of explored nodes in the
	// underlying graph. The internal limit is an int64, but we use double here to
	// simplify manual input.
	MergeNoOverlapWorkLimit *float64 `protobuf:"fixed64,145,opt,name=merge_no_overlap_work_limit,json=mergeNoOverlapWorkLimit,def=1e+12" json:"merge_no_overlap_work_limit,omitempty"`
	MergeAtMostOneWorkLimit *float64 `protobuf:"fixed64,146,opt,name=merge_at_most_one_work_limit,json=mergeAtMostOneWorkLimit,def=1e+08" json:"merge_at_most_one_work_limit,omitempty"`
	// How much substitution (also called free variable aggregation in MIP
	// litterature) should we perform at presolve. This currently only concerns
	// variable appearing only in linear constraints. For now the value 0 turns it
	// off and any positive value performs substitution.
	PresolveSubstitutionLevel *int32 `protobuf:"varint,147,opt,name=presolve_substitution_level,json=presolveSubstitutionLevel,def=1" json:"presolve_substitution_level,omitempty"`
	// If true, we will extract from linear constraints, enforcement literals of
	// the form "integer variable at bound => simplified constraint". This should
	// always be beneficial except that we don't always handle them as efficiently
	// as we could for now. This causes problem on manna81.mps (LP relaxation not
	// as tight it seems) and on neos-3354841-apure.mps.gz (too many literals
	// created this way).
	PresolveExtractIntegerEnforcement *bool `protobuf:"varint,174,opt,name=presolve_extract_integer_enforcement,json=presolveExtractIntegerEnforcement,def=0" json:"presolve_extract_integer_enforcement,omitempty"`
	// A few presolve operations involve detecting constraints included in other
	// constraint. Since there can be a quadratic number of such pairs, and
	// processing them usually involve scanning them, the complexity of these
	// operations can be big. This enforce a local deterministic limit on the
	// number of entries scanned. Default is 1e8.
	//
	// A value of zero will disable these presolve rules completely.
	PresolveInclusionWorkLimit *int64 `protobuf:"varint,201,opt,name=presolve_inclusion_work_limit,json=presolveInclusionWorkLimit,def=100000000" json:"presolve_inclusion_work_limit,omitempty"`
	// If true, we don't keep names in our internal copy of the user given model.
	IgnoreNames *bool `protobuf:"varint,202,opt,name=ignore_names,json=ignoreNames,def=1" json:"ignore_names,omitempty"`
	// Run a max-clique code amongst all the x != y we can find and try to infer
	// set of variables that are all different. This allows to close neos16.mps
	// for instance. Note that we only run this code if there is no all_diff
	// already in the model so that if a user want to add some all_diff, we assume
	// it is well done and do not try to add more.
	InferAllDiffs *bool `protobuf:"varint,233,opt,name=infer_all_diffs,json=inferAllDiffs,def=1" json:"infer_all_diffs,omitempty"`
	// Try to find large "rectangle" in the linear constraint matrix with
	// identical lines. If such rectangle is big enough, we can introduce a new
	// integer variable corresponding to the common expression and greatly reduce
	// the number of non-zero.
	FindBigLinearOverlap *bool `protobuf:"varint,234,opt,name=find_big_linear_overlap,json=findBigLinearOverlap,def=1" json:"find_big_linear_overlap,omitempty"`
	// Enable or disable "inprocessing" which is some SAT presolving done at
	// each restart to the root level.
	UseSatInprocessing *bool `protobuf:"varint,163,opt,name=use_sat_inprocessing,json=useSatInprocessing,def=1" json:"use_sat_inprocessing,omitempty"`
	// Proportion of deterministic time we should spend on inprocessing.
	// At each "restart", if the proportion is below this ratio, we will do some
	// inprocessing, otherwise, we skip it for this restart.
	InprocessingDtimeRatio *float64 `protobuf:"fixed64,273,opt,name=inprocessing_dtime_ratio,json=inprocessingDtimeRatio,def=0.2" json:"inprocessing_dtime_ratio,omitempty"`
	// The amount of dtime we should spend on probing for each inprocessing round.
	InprocessingProbingDtime *float64 `protobuf:"fixed64,274,opt,name=inprocessing_probing_dtime,json=inprocessingProbingDtime,def=1" json:"inprocessing_probing_dtime,omitempty"`
	// Parameters for an heuristic similar to the one described in "An effective
	// learnt clause minimization approach for CDCL Sat Solvers",
	// https://www.ijcai.org/proceedings/2017/0098.pdf
	//
	// This is the amount of dtime we should spend on this technique during each
	// inprocessing phase.
	//
	// The minimization technique is the same as the one used to minimize core in
	// max-sat. We also minimize problem clauses and not just the learned clause
	// that we keep forever like in the paper.
	InprocessingMinimizationDtime *float64 `protobuf:"fixed64,275,opt,name=inprocessing_minimization_dtime,json=inprocessingMinimizationDtime,def=1" json:"inprocessing_minimization_dtime,omitempty"`
	// Specify the number of parallel workers (i.e. threads) to use during search.
	// This should usually be lower than your number of available cpus +
	// hyperthread in your machine.
	//
	// A value of 0 means the solver will try to use all cores on the machine.
	// A number of 1 means no parallelism.
	//
	// Note that 'num_workers' is the preferred name, but if it is set to zero,
	// we will still read the deprecated 'num_search_worker'.
	//
	// As of 2020-04-10, if you're using SAT via MPSolver (to solve integer
	// programs) this field is overridden with a value of 8, if the field is not
	// set *explicitly*. Thus, always set this field explicitly or via
	// MPSolver::SetNumThreads().
	NumWorkers       *int32 `protobuf:"varint,206,opt,name=num_workers,json=numWorkers,def=0" json:"num_workers,omitempty"`
	NumSearchWorkers *int32 `protobuf:"varint,100,opt,name=num_search_workers,json=numSearchWorkers,def=0" json:"num_search_workers,omitempty"`
	// Obsolete parameter. No-op.
	MinNumLnsWorkers *int32 `protobuf:"varint,211,opt,name=min_num_lns_workers,json=minNumLnsWorkers,def=2" json:"min_num_lns_workers,omitempty"`
	// In multi-thread, the solver can be mainly seen as a portfolio of solvers
	// with different parameters. This field indicates the names of the parameters
	// that are used in multithread.
	//
	// See cp_model_search.cc to see a list of the names and the default value (if
	// left empty) that looks like:
	// - default_lp           (linearization_level:1)
	// - fixed                (only if fixed search specified or scheduling)
	// - no_lp                (linearization_level:0)
	// - max_lp               (linearization_level:2)
	// - pseudo_costs         (only if objective, change search heuristic)
	// - reduced_costs        (only if objective, change search heuristic)
	// - quick_restart        (kind of probing)
	// - quick_restart_no_lp  (kind of probing with linearization_level:0)
	// - lb_tree_search       (to improve lower bound, MIP like tree search)
	// - probing              (continuous probing and shaving)
	//
	// Also, note that some set of parameters will be ignored if they do not make
	// sense. For instance if there is no objective, pseudo_cost or reduced_cost
	// search will be ignored. Core based search will only work if the objective
	// has many terms. If there is no fixed strategy fixed will be ignored. And so
	// on.
	//
	// The order is important, as only the first usable "num_workers -
	// min_num_lns_workers" subsolvers will be scheduled. You can see in the log
	// which one are selected for a given run. All the others will be LNS if there
	// is an objective, or randomized SAT search for pure satisfiability problems.
	Subsolvers []string `protobuf:"bytes,207,rep,name=subsolvers" json:"subsolvers,omitempty"`
	// A convenient way to add more workers types.
	// These will be added at the beginning of the list.
	ExtraSubsolvers []string `protobuf:"bytes,219,rep,name=extra_subsolvers,json=extraSubsolvers" json:"extra_subsolvers,omitempty"`
	// Rather than fully specifying subsolvers, it is often convenient to just
	// remove the ones that are not useful on a given problem.
	IgnoreSubsolvers []string `protobuf:"bytes,209,rep,name=ignore_subsolvers,json=ignoreSubsolvers" json:"ignore_subsolvers,omitempty"`
	// It is possible to specify additional subsolver configuration. These can be
	// referred by their params.name() in the fields above. Note that only the
	// specified field will "overwrite" the ones of the base parameter. If a
	// subsolver_params has the name of an existing subsolver configuration, the
	// named parameters will be merged into the subsolver configuration.
	SubsolverParams []*SatParameters `protobuf:"bytes,210,rep,name=subsolver_params,json=subsolverParams" json:"subsolver_params,omitempty"`
	// Experimental. If this is true, then we interleave all our major search
	// strategy and distribute the work amongst num_workers.
	//
	// The search is deterministic (independently of num_workers!), and we
	// schedule and wait for interleave_batch_size task to be completed before
	// synchronizing and scheduling the next batch of tasks.
	InterleaveSearch    *bool  `protobuf:"varint,136,opt,name=interleave_search,json=interleaveSearch,def=0" json:"interleave_search,omitempty"`
	InterleaveBatchSize *int32 `protobuf:"varint,134,opt,name=interleave_batch_size,json=interleaveBatchSize,def=0" json:"interleave_batch_size,omitempty"`
	// Allows objective sharing between workers.
	ShareObjectiveBounds *bool `protobuf:"varint,113,opt,name=share_objective_bounds,json=shareObjectiveBounds,def=1" json:"share_objective_bounds,omitempty"`
	// Allows sharing of the bounds of modified variables at level 0.
	ShareLevelZeroBounds *bool `protobuf:"varint,114,opt,name=share_level_zero_bounds,json=shareLevelZeroBounds,def=1" json:"share_level_zero_bounds,omitempty"`
	// Allows sharing of new learned binary clause between workers.
	ShareBinaryClauses *bool `protobuf:"varint,203,opt,name=share_binary_clauses,json=shareBinaryClauses,def=1" json:"share_binary_clauses,omitempty"`
	// We have two different postsolve code. The default one should be better and
	// it allows for a more powerful presolve, but it can be useful to postsolve
	// using the full solver instead.
	DebugPostsolveWithFullSolver *bool `protobuf:"varint,162,opt,name=debug_postsolve_with_full_solver,json=debugPostsolveWithFullSolver,def=0" json:"debug_postsolve_with_full_solver,omitempty"`
	// If positive, try to stop just after that many presolve rules have been
	// applied. This is mainly useful for debugging presolve.
	DebugMaxNumPresolveOperations *int32 `protobuf:"varint,151,opt,name=debug_max_num_presolve_operations,json=debugMaxNumPresolveOperations,def=0" json:"debug_max_num_presolve_operations,omitempty"`
	// Crash if we do not manage to complete the hint into a full solution.
	DebugCrashOnBadHint *bool `protobuf:"varint,195,opt,name=debug_crash_on_bad_hint,json=debugCrashOnBadHint,def=0" json:"debug_crash_on_bad_hint,omitempty"`
	// For an optimization problem, whether we follow some hints in order to find
	// a better first solution. For a variable with hint, the solver will always
	// try to follow the hint. It will revert to the variable_branching default
	// otherwise.
	UseOptimizationHints *bool `protobuf:"varint,35,opt,name=use_optimization_hints,json=useOptimizationHints,def=1" json:"use_optimization_hints,omitempty"`
	// If positive, we spend some effort on each core:
	//   - At level 1, we use a simple heuristic to try to minimize an UNSAT core.
	//   - At level 2, we use propagation to minimize the core but also identify
	//     literal in at most one relationship in this core.
	CoreMinimizationLevel *int32 `protobuf:"varint,50,opt,name=core_minimization_level,json=coreMinimizationLevel,def=2" json:"core_minimization_level,omitempty"`
	// Whether we try to find more independent cores for a given set of
	// assumptions in the core based max-SAT algorithms.
	FindMultipleCores *bool `protobuf:"varint,84,opt,name=find_multiple_cores,json=findMultipleCores,def=1" json:"find_multiple_cores,omitempty"`
	// If true, when the max-sat algo find a core, we compute the minimal number
	// of literals in the core that needs to be true to have a feasible solution.
	// This is also called core exhaustion in more recent max-SAT papers.
	CoverOptimization     *bool                                `protobuf:"varint,89,opt,name=cover_optimization,json=coverOptimization,def=1" json:"cover_optimization,omitempty"`
	MaxSatAssumptionOrder *SatParameters_MaxSatAssumptionOrder `protobuf:"varint,51,opt,name=max_sat_assumption_order,json=maxSatAssumptionOrder,enum=operations_research.sat.SatParameters_MaxSatAssumptionOrder,def=0" json:"max_sat_assumption_order,omitempty"`
	// If true, adds the assumption in the reverse order of the one defined by
	// max_sat_assumption_order.
	MaxSatReverseAssumptionOrder *bool                                        `protobuf:"varint,52,opt,name=max_sat_reverse_assumption_order,json=maxSatReverseAssumptionOrder,def=0" json:"max_sat_reverse_assumption_order,omitempty"`
	MaxSatStratification         *SatParameters_MaxSatStratificationAlgorithm `protobuf:"varint,53,opt,name=max_sat_stratification,json=maxSatStratification,enum=operations_research.sat.SatParameters_MaxSatStratificationAlgorithm,def=1" json:"max_sat_stratification,omitempty"`
	// Some search decisions might cause a really large number of propagations to
	// happen when integer variables with large domains are only reduced by 1 at
	// each step. If we propagate more than the number of variable times this
	// parameters we try to take counter-measure. Setting this to 0.0 disable this
	// feature.
	//
	// TODO(user): Setting this to something like 10 helps in most cases, but the
	// code is currently buggy and can cause the solve to enter a bad state where
	// no progress is made.
	PropagationLoopDetectionFactor *float64 `protobuf:"fixed64,221,opt,name=propagation_loop_detection_factor,json=propagationLoopDetectionFactor,def=10" json:"propagation_loop_detection_factor,omitempty"`
	// When this is true, then a disjunctive constraint will try to use the
	// precedence relations between time intervals to propagate their bounds
	// further. For instance if task A and B are both before C and task A and B
	// are in disjunction, then we can deduce that task C must start after
	// duration(A) + duration(B) instead of simply max(duration(A), duration(B)),
	// provided that the start time for all task was currently zero.
	//
	// This always result in better propagation, but it is usually slow, so
	// depending on the problem, turning this off may lead to a faster solution.
	UsePrecedencesInDisjunctiveConstraint *bool `protobuf:"varint,74,opt,name=use_precedences_in_disjunctive_constraint,json=usePrecedencesInDisjunctiveConstraint,def=1" json:"use_precedences_in_disjunctive_constraint,omitempty"`
	// Create one literal for each disjunction of two pairs of tasks. This slows
	// down the solve time, but improves the lower bound of the objective in the
	// makespan case. This will be triggered if the number of intervals is less or
	// equal than the parameter and if use_strong_propagation_in_disjunctive is
	// true.
	MaxSizeToCreatePrecedenceLiteralsInDisjunctive *int32 `protobuf:"varint,229,opt,name=max_size_to_create_precedence_literals_in_disjunctive,json=maxSizeToCreatePrecedenceLiteralsInDisjunctive,def=60" json:"max_size_to_create_precedence_literals_in_disjunctive,omitempty"`
	// Enable stronger and more expensive propagation on no_overlap constraint.
	UseStrongPropagationInDisjunctive *bool `protobuf:"varint,230,opt,name=use_strong_propagation_in_disjunctive,json=useStrongPropagationInDisjunctive,def=0" json:"use_strong_propagation_in_disjunctive,omitempty"`
	// Whether we try to branch on decision "interval A before interval B" rather
	// than on intervals bounds. This usually works better, but slow down a bit
	// the time to find the first solution.
	//
	// These parameters are still EXPERIMENTAL, the result should be correct, but
	// it some corner cases, they can cause some failing CHECK in the solver.
	UseDynamicPrecedenceInDisjunctive *bool `protobuf:"varint,263,opt,name=use_dynamic_precedence_in_disjunctive,json=useDynamicPrecedenceInDisjunctive,def=0" json:"use_dynamic_precedence_in_disjunctive,omitempty"`
	UseDynamicPrecedenceInCumulative  *bool `protobuf:"varint,268,opt,name=use_dynamic_precedence_in_cumulative,json=useDynamicPrecedenceInCumulative,def=0" json:"use_dynamic_precedence_in_cumulative,omitempty"`
	// When this is true, the cumulative constraint is reinforced with overload
	// checking, i.e., an additional level of reasoning based on energy. This
	// additional level supplements the default level of reasoning as well as
	// timetable edge finding.
	//
	// This always result in better propagation, but it is usually slow, so
	// depending on the problem, turning this off may lead to a faster solution.
	UseOverloadCheckerInCumulative *bool `protobuf:"varint,78,opt,name=use_overload_checker_in_cumulative,json=useOverloadCheckerInCumulative,def=0" json:"use_overload_checker_in_cumulative,omitempty"`
	// When this is true, the cumulative constraint is reinforced with timetable
	// edge finding, i.e., an additional level of reasoning based on the
	// conjunction of energy and mandatory parts. This additional level
	// supplements the default level of reasoning as well as overload_checker.
	//
	// This always result in better propagation, but it is usually slow, so
	// depending on the problem, turning this off may lead to a faster solution.
	UseTimetableEdgeFindingInCumulative *bool `protobuf:"varint,79,opt,name=use_timetable_edge_finding_in_cumulative,json=useTimetableEdgeFindingInCumulative,def=0" json:"use_timetable_edge_finding_in_cumulative,omitempty"`
	// Max number of intervals for the timetable_edge_finding algorithm to
	// propagate. A value of 0 disables the constraint.
	MaxNumIntervalsForTimetableEdgeFinding *int32 `protobuf:"varint,260,opt,name=max_num_intervals_for_timetable_edge_finding,json=maxNumIntervalsForTimetableEdgeFinding,def=100" json:"max_num_intervals_for_timetable_edge_finding,omitempty"`
	// If true, detect and create constraint for integer variable that are "after"
	// a set of intervals in the same cumulative constraint.
	//
	// Experimental: by default we just use "direct" precedences. If
	// exploit_all_precedences is true, we explore the full precedence graph. This
	// assumes we have a DAG otherwise it fails.
	UseHardPrecedencesInCumulative *bool `protobuf:"varint,215,opt,name=use_hard_precedences_in_cumulative,json=useHardPrecedencesInCumulative,def=0" json:"use_hard_precedences_in_cumulative,omitempty"`
	ExploitAllPrecedences          *bool `protobuf:"varint,220,opt,name=exploit_all_precedences,json=exploitAllPrecedences,def=0" json:"exploit_all_precedences,omitempty"`
	// When this is true, the cumulative constraint is reinforced with propagators
	// from the disjunctive constraint to improve the inference on a set of tasks
	// that are disjunctive at the root of the problem. This additional level
	// supplements the default level of reasoning.
	//
	// Propagators of the cumulative constraint will not be used at all if all the
	// tasks are disjunctive at root node.
	//
	// This always result in better propagation, but it is usually slow, so
	// depending on the problem, turning this off may lead to a faster solution.
	UseDisjunctiveConstraintInCumulative *bool `protobuf:"varint,80,opt,name=use_disjunctive_constraint_in_cumulative,json=useDisjunctiveConstraintInCumulative,def=1" json:"use_disjunctive_constraint_in_cumulative,omitempty"`
	// When this is true, the no_overlap_2d constraint is reinforced with
	// propagators from the cumulative constraints. It consists of ignoring the
	// position of rectangles in one position and projecting the no_overlap_2d on
	// the other dimension to create a cumulative constraint. This is done on both
	// axis. This additional level supplements the default level of reasoning.
	UseTimetablingInNoOverlap_2D *bool `protobuf:"varint,200,opt,name=use_timetabling_in_no_overlap_2d,json=useTimetablingInNoOverlap2d,def=0" json:"use_timetabling_in_no_overlap_2d,omitempty"`
	// When this is true, the no_overlap_2d constraint is reinforced with
	// energetic reasoning. This additional level supplements the default level of
	// reasoning.
	UseEnergeticReasoningInNoOverlap_2D *bool `protobuf:"varint,213,opt,name=use_energetic_reasoning_in_no_overlap_2d,json=useEnergeticReasoningInNoOverlap2d,def=0" json:"use_energetic_reasoning_in_no_overlap_2d,omitempty"`
	// When this is true, the no_overlap_2d constraint is reinforced with
	// an energetic reasoning that uses an area-based energy. This can be combined
	// with the two other overlap heuristics above.
	UseAreaEnergeticReasoningInNoOverlap_2D *bool `protobuf:"varint,271,opt,name=use_area_energetic_reasoning_in_no_overlap_2d,json=useAreaEnergeticReasoningInNoOverlap2d,def=0" json:"use_area_energetic_reasoning_in_no_overlap_2d,omitempty"`
	// If the number of pairs to look is below this threshold, do an extra step of
	// propagation in the no_overlap_2d constraint by looking at all pairs of
	// intervals.
	MaxPairsPairwiseReasoningInNoOverlap_2D *int32 `protobuf:"varint,276,opt,name=max_pairs_pairwise_reasoning_in_no_overlap_2d,json=maxPairsPairwiseReasoningInNoOverlap2d,def=1250" json:"max_pairs_pairwise_reasoning_in_no_overlap_2d,omitempty"`
	// When set, it activates a few scheduling parameters to improve the lower
	// bound of scheduling problems. This is only effective with multiple workers
	// as it modifies the reduced_cost, lb_tree_search, and probing workers.
	UseDualSchedulingHeuristics *bool                          `protobuf:"varint,214,opt,name=use_dual_scheduling_heuristics,json=useDualSchedulingHeuristics,def=1" json:"use_dual_scheduling_heuristics,omitempty"`
	SearchBranching             *SatParameters_SearchBranching `protobuf:"varint,82,opt,name=search_branching,json=searchBranching,enum=operations_research.sat.SatParameters_SearchBranching,def=0" json:"search_branching,omitempty"`
	// Conflict limit used in the phase that exploit the solution hint.
	HintConflictLimit *int32 `protobuf:"varint,153,opt,name=hint_conflict_limit,json=hintConflictLimit,def=10" json:"hint_conflict_limit,omitempty"`
	// If true, the solver tries to repair the solution given in the hint. This
	// search terminates after the 'hint_conflict_limit' is reached and the solver
	// switches to regular search. If false, then  we do a FIXED_SEARCH using the
	// hint until the hint_conflict_limit is reached.
	RepairHint *bool `protobuf:"varint,167,opt,name=repair_hint,json=repairHint,def=0" json:"repair_hint,omitempty"`
	// If true, variables appearing in the solution hints will be fixed to their
	// hinted value.
	FixVariablesToTheirHintedValue *bool `protobuf:"varint,192,opt,name=fix_variables_to_their_hinted_value,json=fixVariablesToTheirHintedValue,def=0" json:"fix_variables_to_their_hinted_value,omitempty"`
	// If true, search will continuously probe Boolean variables, and integer
	// variable bounds. This parameter is set to true in parallel on the probing
	// worker.
	UseProbingSearch *bool `protobuf:"varint,176,opt,name=use_probing_search,json=useProbingSearch,def=0" json:"use_probing_search,omitempty"`
	// Use extended probing (probe bool_or, at_most_one, exactly_one).
	UseExtendedProbing *bool `protobuf:"varint,269,opt,name=use_extended_probing,json=useExtendedProbing,def=1" json:"use_extended_probing,omitempty"`
	// How many combinations of pairs or triplets of variables we want to scan.
	ProbingNumCombinationsLimit *int32 `protobuf:"varint,272,opt,name=probing_num_combinations_limit,json=probingNumCombinationsLimit,def=20000" json:"probing_num_combinations_limit,omitempty"`
	// Add a shaving phase (where the solver tries to prove that the lower or
	// upper bound of a variable are infeasible) to the probing search.
	UseShavingInProbingSearch *bool `protobuf:"varint,204,opt,name=use_shaving_in_probing_search,json=useShavingInProbingSearch,def=1" json:"use_shaving_in_probing_search,omitempty"`
	// Specifies the amount of deterministic time spent of each try at shaving a
	// bound in the shaving search.
	ShavingSearchDeterministicTime *float64 `protobuf:"fixed64,205,opt,name=shaving_search_deterministic_time,json=shavingSearchDeterministicTime,def=0.001" json:"shaving_search_deterministic_time,omitempty"`
	// If true, search will search in ascending max objective value (when
	// minimizing) starting from the lower bound of the objective.
	UseObjectiveLbSearch *bool `protobuf:"varint,228,opt,name=use_objective_lb_search,json=useObjectiveLbSearch,def=0" json:"use_objective_lb_search,omitempty"`
	// This search differs from the previous search as it will not use assumptions
	// to bound the objective, and it will recreate a full model with the
	// hardcoded objective value.
	UseObjectiveShavingSearch *bool `protobuf:"varint,253,opt,name=use_objective_shaving_search,json=useObjectiveShavingSearch,def=0" json:"use_objective_shaving_search,omitempty"`
	// The solver ignores the pseudo costs of variables with number of recordings
	// less than this threshold.
	PseudoCostReliabilityThreshold *int64 `protobuf:"varint,123,opt,name=pseudo_cost_reliability_threshold,json=pseudoCostReliabilityThreshold,def=100" json:"pseudo_cost_reliability_threshold,omitempty"`
	// The default optimization method is a simple "linear scan", each time trying
	// to find a better solution than the previous one. If this is true, then we
	// use a core-based approach (like in max-SAT) when we try to increase the
	// lower bound instead.
	OptimizeWithCore *bool `protobuf:"varint,83,opt,name=optimize_with_core,json=optimizeWithCore,def=0" json:"optimize_with_core,omitempty"`
	// Do a more conventional tree search (by opposition to SAT based one) where
	// we keep all the explored node in a tree. This is meant to be used in a
	// portfolio and focus on improving the objective lower bound. Keeping the
	// whole tree allow us to report a better objective lower bound coming from
	// the worst open node in the tree.
	OptimizeWithLbTreeSearch *bool `protobuf:"varint,188,opt,name=optimize_with_lb_tree_search,json=optimizeWithLbTreeSearch,def=0" json:"optimize_with_lb_tree_search,omitempty"`
	// If non-negative, perform a binary search on the objective variable in order
	// to find an [min, max] interval outside of which the solver proved unsat/sat
	// under this amount of conflict. This can quickly reduce the objective domain
	// on some problems.
	BinarySearchNumConflicts *int32 `protobuf:"varint,99,opt,name=binary_search_num_conflicts,json=binarySearchNumConflicts,def=-1" json:"binary_search_num_conflicts,omitempty"`
	// This has no effect if optimize_with_core is false. If true, use a different
	// core-based algorithm similar to the max-HS algo for max-SAT. This is a
	// hybrid MIP/CP approach and it uses a MIP solver in addition to the CP/SAT
	// one. This is also related to the PhD work of tobyodavies@
	// "Automatic Logic-Based Benders Decomposition with MiniZinc"
	// http://aaai.org/ocs/index.php/AAAI/AAAI17/paper/view/14489
	OptimizeWithMaxHs *bool `protobuf:"varint,85,opt,name=optimize_with_max_hs,json=optimizeWithMaxHs,def=0" json:"optimize_with_max_hs,omitempty"`
	// Parameters for an heuristic similar to the one described in the paper:
	// "Feasibility Jump: an LP-free Lagrangian MIP heuristic", Bjørnar
	// Luteberget, Giorgio Sartor, 2023, Mathematical Programming Computation.
	UseFeasibilityJump *bool `protobuf:"varint,265,opt,name=use_feasibility_jump,json=useFeasibilityJump,def=1" json:"use_feasibility_jump,omitempty"`
	// Disable every other type of subsolver, setting this turns CP-SAT into a
	// pure local-search solver.
	TestFeasibilityJump *bool `protobuf:"varint,240,opt,name=test_feasibility_jump,json=testFeasibilityJump,def=0" json:"test_feasibility_jump,omitempty"`
	// On each restart, we randomly choose if we use decay (with this parameter)
	// or no decay.
	FeasibilityJumpDecay *float64 `protobuf:"fixed64,242,opt,name=feasibility_jump_decay,json=feasibilityJumpDecay,def=0.95" json:"feasibility_jump_decay,omitempty"`
	// How much do we linearize the problem in the local search code.
	FeasibilityJumpLinearizationLevel *int32 `protobuf:"varint,257,opt,name=feasibility_jump_linearization_level,json=feasibilityJumpLinearizationLevel,def=2" json:"feasibility_jump_linearization_level,omitempty"`
	// This is a factor that directly influence the work before each restart.
	// Setting this to zero disable restart, and increasing it lead to longer
	// restarts.
	FeasibilityJumpRestartFactor *int32 `protobuf:"varint,258,opt,name=feasibility_jump_restart_factor,json=feasibilityJumpRestartFactor,def=1" json:"feasibility_jump_restart_factor,omitempty"`
	// Probability for a variable to have a non default value upon restarts or
	// perturbations.
	FeasibilityJumpVarRandomizationProbability *float64 `protobuf:"fixed64,247,opt,name=feasibility_jump_var_randomization_probability,json=feasibilityJumpVarRandomizationProbability,def=0" json:"feasibility_jump_var_randomization_probability,omitempty"`
	// Max distance between the default value and the pertubated value relative to
	// the range of the domain of the variable.
	FeasibilityJumpVarPerburbationRangeRatio *float64 `protobuf:"fixed64,248,opt,name=feasibility_jump_var_perburbation_range_ratio,json=feasibilityJumpVarPerburbationRangeRatio,def=0.2" json:"feasibility_jump_var_perburbation_range_ratio,omitempty"`
	// When stagnating, feasibility jump will either restart from a default
	// solution (with some possible randomization), or randomly pertubate the
	// current solution. This parameter selects the first option.
	FeasibilityJumpEnableRestarts *bool `protobuf:"varint,250,opt,name=feasibility_jump_enable_restarts,json=feasibilityJumpEnableRestarts,def=1" json:"feasibility_jump_enable_restarts,omitempty"`
	// Maximum size of no_overlap or no_overlap_2d constraint for a quadratic
	// expansion.
	FeasibilityJumpMaxExpandedConstraintSize *int32 `protobuf:"varint,264,opt,name=feasibility_jump_max_expanded_constraint_size,json=feasibilityJumpMaxExpandedConstraintSize,def=100" json:"feasibility_jump_max_expanded_constraint_size,omitempty"`
	// This will create incomplete subsolvers (that are not LNS subsolvers)
	// that use the feasibility jump code to find improving solution, treating
	// the objective improvement as a hard constraint.
	NumViolationLs *int32 `protobuf:"varint,244,opt,name=num_violation_ls,json=numViolationLs,def=0" json:"num_violation_ls,omitempty"`
	// How long violation_ls should wait before perturbating a solution.
	ViolationLsPerturbationPeriod *int32 `protobuf:"varint,249,opt,name=violation_ls_perturbation_period,json=violationLsPerturbationPeriod,def=100" json:"violation_ls_perturbation_period,omitempty"`
	// Probability of using compound move search each restart.
	// TODO(user): Add reference to paper when published.
	ViolationLsCompoundMoveProbability *float64 `protobuf:"fixed64,259,opt,name=violation_ls_compound_move_probability,json=violationLsCompoundMoveProbability,def=0.5" json:"violation_ls_compound_move_probability,omitempty"`
	// Enables experimental workstealing-like shared tree search.
	// If non-zero, start this many complete worker threads to explore a shared
	// search tree. These workers communicate objective bounds and simple decision
	// nogoods relating to the shared prefix of the tree, and will avoid exploring
	// the same subtrees as one another.
	SharedTreeNumWorkers *int32 `protobuf:"varint,235,opt,name=shared_tree_num_workers,json=sharedTreeNumWorkers,def=0" json:"shared_tree_num_workers,omitempty"`
	// Set on shared subtree workers. Users should not set this directly.
	UseSharedTreeSearch *bool `protobuf:"varint,236,opt,name=use_shared_tree_search,json=useSharedTreeSearch,def=0" json:"use_shared_tree_search,omitempty"`
	// After their assigned prefix, shared tree workers will branch on the
	// objective with this probability. Higher numbers cause the shared tree
	// search to focus on improving the lower bound over finding primal solutions.
	SharedTreeWorkerObjectiveSplitProbability *float64 `protobuf:"fixed64,237,opt,name=shared_tree_worker_objective_split_probability,json=sharedTreeWorkerObjectiveSplitProbability,def=0.5" json:"shared_tree_worker_objective_split_probability,omitempty"`
	// In order to limit total shared memory and communication overhead, limit the
	// total number of nodes that may be generated in the shared tree. If the
	// shared tree runs out of unassigned leaves, workers act as portfolio
	// workers. Note: this limit includes interior nodes, not just leaves.
	SharedTreeMaxNodesPerWorker *int32                                 `protobuf:"varint,238,opt,name=shared_tree_max_nodes_per_worker,json=sharedTreeMaxNodesPerWorker,def=128" json:"shared_tree_max_nodes_per_worker,omitempty"`
	SharedTreeSplitStrategy     *SatParameters_SharedTreeSplitStrategy `protobuf:"varint,239,opt,name=shared_tree_split_strategy,json=sharedTreeSplitStrategy,enum=operations_research.sat.SatParameters_SharedTreeSplitStrategy,def=0" json:"shared_tree_split_strategy,omitempty"`
	// Whether we enumerate all solutions of a problem without objective. Note
	// that setting this to true automatically disable some presolve reduction
	// that can remove feasible solution. That is it has the same effect as
	// setting keep_all_feasible_solutions_in_presolve.
	//
	// TODO(user): Do not do that and let the user choose what behavior is best by
	// setting keep_all_feasible_solutions_in_presolve ?
	EnumerateAllSolutions *bool `protobuf:"varint,87,opt,name=enumerate_all_solutions,json=enumerateAllSolutions,def=0" json:"enumerate_all_solutions,omitempty"`
	// If true, we disable the presolve reductions that remove feasible solutions
	// from the search space. Such solution are usually dominated by a "better"
	// solution that is kept, but depending on the situation, we might want to
	// keep all solutions.
	//
	// A trivial example is when a variable is unused. If this is true, then the
	// presolve will not fix it to an arbitrary value and it will stay in the
	// search space.
	KeepAllFeasibleSolutionsInPresolve *bool `protobuf:"varint,173,opt,name=keep_all_feasible_solutions_in_presolve,json=keepAllFeasibleSolutionsInPresolve,def=0" json:"keep_all_feasible_solutions_in_presolve,omitempty"`
	// If true, add information about the derived variable domains to the
	// CpSolverResponse. It is an option because it makes the response slighly
	// bigger and there is a bit more work involved during the postsolve to
	// construct it, but it should still have a low overhead. See the
	// tightened_variables field in CpSolverResponse for more details.
	FillTightenedDomainsInResponse *bool `protobuf:"varint,132,opt,name=fill_tightened_domains_in_response,json=fillTightenedDomainsInResponse,def=0" json:"fill_tightened_domains_in_response,omitempty"`
	// If true, the final response addition_solutions field will be filled with
	// all solutions from our solutions pool.
	//
	// Note that if both this field and enumerate_all_solutions is true, we will
	// copy to the pool all of the solution found. So if solution_pool_size is big
	// enough, you can get all solutions this way instead of using the solution
	// callback.
	//
	// Note that this only affect the "final" solution, not the one passed to the
	// solution callbacks.
	FillAdditionalSolutionsInResponse *bool `protobuf:"varint,194,opt,name=fill_additional_solutions_in_response,json=fillAdditionalSolutionsInResponse,def=0" json:"fill_additional_solutions_in_response,omitempty"`
	// If true, the solver will add a default integer branching strategy to the
	// already defined search strategy. If not, some variable might still not be
	// fixed at the end of the search. For now we assume these variable can just
	// be set to their lower bound.
	InstantiateAllVariables *bool `protobuf:"varint,106,opt,name=instantiate_all_variables,json=instantiateAllVariables,def=1" json:"instantiate_all_variables,omitempty"`
	// If true, then the precedences propagator try to detect for each variable if
	// it has a set of "optional incoming arc" for which at least one of them is
	// present. This is usually useful to have but can be slow on model with a lot
	// of precedence.
	AutoDetectGreaterThanAtLeastOneOf *bool `protobuf:"varint,95,opt,name=auto_detect_greater_than_at_least_one_of,json=autoDetectGreaterThanAtLeastOneOf,def=1" json:"auto_detect_greater_than_at_least_one_of,omitempty"`
	// For an optimization problem, stop the solver as soon as we have a solution.
	StopAfterFirstSolution *bool `protobuf:"varint,98,opt,name=stop_after_first_solution,json=stopAfterFirstSolution,def=0" json:"stop_after_first_solution,omitempty"`
	// Mainly used when improving the presolver. When true, stops the solver after
	// the presolve is complete (or after loading and root level propagation).
	StopAfterPresolve        *bool `protobuf:"varint,149,opt,name=stop_after_presolve,json=stopAfterPresolve,def=0" json:"stop_after_presolve,omitempty"`
	StopAfterRootPropagation *bool `protobuf:"varint,252,opt,name=stop_after_root_propagation,json=stopAfterRootPropagation,def=0" json:"stop_after_root_propagation,omitempty"`
	// LNS parameters.
	UseLnsOnly *bool `protobuf:"varint,101,opt,name=use_lns_only,json=useLnsOnly,def=0" json:"use_lns_only,omitempty"`
	// Size of the top-n different solutions kept by the solver.
	// This parameter must be > 0.
	// Currently this only impact the "base" solution chosen for a LNS fragment.
	SolutionPoolSize *int32 `protobuf:"varint,193,opt,name=solution_pool_size,json=solutionPoolSize,def=3" json:"solution_pool_size,omitempty"`
	// Turns on relaxation induced neighborhood generator.
	UseRinsLns *bool `protobuf:"varint,129,opt,name=use_rins_lns,json=useRinsLns,def=1" json:"use_rins_lns,omitempty"`
	// Adds a feasibility pump subsolver along with lns subsolvers.
	UseFeasibilityPump *bool `protobuf:"varint,164,opt,name=use_feasibility_pump,json=useFeasibilityPump,def=1" json:"use_feasibility_pump,omitempty"`
	// Turns on neighborhood generator based on local branching LP. Based on Huang
	// et al., "Local Branching Relaxation Heuristics for Integer Linear
	// Programs", 2023.
	UseLbRelaxLns *bool                           `protobuf:"varint,255,opt,name=use_lb_relax_lns,json=useLbRelaxLns,def=0" json:"use_lb_relax_lns,omitempty"`
	FpRounding    *SatParameters_FPRoundingMethod `protobuf:"varint,165,opt,name=fp_rounding,json=fpRounding,enum=operations_research.sat.SatParameters_FPRoundingMethod,def=2" json:"fp_rounding,omitempty"`
	// If true, registers more lns subsolvers with different parameters.
	DiversifyLnsParams *bool `protobuf:"varint,137,opt,name=diversify_lns_params,json=diversifyLnsParams,def=0" json:"diversify_lns_params,omitempty"`
	// Randomize fixed search.
	RandomizeSearch *bool `protobuf:"varint,103,opt,name=randomize_search,json=randomizeSearch,def=0" json:"randomize_search,omitempty"`
	// Search randomization will collect the top
	// 'search_random_variable_pool_size' valued variables, and pick one randomly.
	// The value of the variable is specific to each strategy.
	SearchRandomVariablePoolSize *int64 `protobuf:"varint,104,opt,name=search_random_variable_pool_size,json=searchRandomVariablePoolSize,def=0" json:"search_random_variable_pool_size,omitempty"`
	// Experimental code: specify if the objective pushes all tasks toward the
	// start of the schedule.
	PushAllTasksTowardStart *bool `protobuf:"varint,262,opt,name=push_all_tasks_toward_start,json=pushAllTasksTowardStart,def=0" json:"push_all_tasks_toward_start,omitempty"`
	// If true, we automatically detect variables whose constraint are always
	// enforced by the same literal and we mark them as optional. This allows
	// to propagate them as if they were present in some situation.
	//
	// TODO(user): This is experimental and seems to lead to wrong optimal in
	// some situation. It should however gives correct solutions. Fix.
	UseOptionalVariables *bool `protobuf:"varint,108,opt,name=use_optional_variables,json=useOptionalVariables,def=0" json:"use_optional_variables,omitempty"`
	// The solver usually exploit the LP relaxation of a model. If this option is
	// true, then whatever is infered by the LP will be used like an heuristic to
	// compute EXACT propagation on the IP. So with this option, there is no
	// numerical imprecision issues.
	UseExactLpReason *bool `protobuf:"varint,109,opt,name=use_exact_lp_reason,json=useExactLpReason,def=1" json:"use_exact_lp_reason,omitempty"`
	// This can be beneficial if there is a lot of no-overlap constraints but a
	// relatively low number of different intervals in the problem. Like 1000
	// intervals, but 1M intervals in the no-overlap constraints covering them.
	UseCombinedNoOverlap *bool `protobuf:"varint,133,opt,name=use_combined_no_overlap,json=useCombinedNoOverlap,def=0" json:"use_combined_no_overlap,omitempty"`
	// All at_most_one constraints with a size <= param will be replaced by a
	// quadratic number of binary implications.
	AtMostOneMaxExpansionSize *int32 `protobuf:"varint,270,opt,name=at_most_one_max_expansion_size,json=atMostOneMaxExpansionSize,def=3" json:"at_most_one_max_expansion_size,omitempty"`
	// Indicates if the CP-SAT layer should catch Control-C (SIGINT) signals
	// when calling solve. If set, catching the SIGINT signal will terminate the
	// search gracefully, as if a time limit was reached.
	CatchSigintSignal *bool `protobuf:"varint,135,opt,name=catch_sigint_signal,json=catchSigintSignal,def=1" json:"catch_sigint_signal,omitempty"`
	// Stores and exploits "implied-bounds" in the solver. That is, relations of
	// the form literal => (var >= bound). This is currently used to derive
	// stronger cuts.
	UseImpliedBounds *bool `protobuf:"varint,144,opt,name=use_implied_bounds,json=useImpliedBounds,def=1" json:"use_implied_bounds,omitempty"`
	// Whether we try to do a few degenerate iteration at the end of an LP solve
	// to minimize the fractionality of the integer variable in the basis. This
	// helps on some problems, but not so much on others. It also cost of bit of
	// time to do such polish step.
	PolishLpSolution *bool `protobuf:"varint,175,opt,name=polish_lp_solution,json=polishLpSolution,def=0" json:"polish_lp_solution,omitempty"`
	// The internal LP tolerances used by CP-SAT. These applies to the internal
	// and scaled problem. If the domains of your variables are large it might be
	// good to use lower tolerances. If your problem is binary with low
	// coefficients, it might be good to use higher ones to speed-up the lp
	// solves.
	LpPrimalTolerance *float64 `protobuf:"fixed64,266,opt,name=lp_primal_tolerance,json=lpPrimalTolerance,def=1e-07" json:"lp_primal_tolerance,omitempty"`
	LpDualTolerance   *float64 `protobuf:"fixed64,267,opt,name=lp_dual_tolerance,json=lpDualTolerance,def=1e-07" json:"lp_dual_tolerance,omitempty"`
	// Temporary flag util the feature is more mature. This convert intervals to
	// the newer proto format that support affine start/var/end instead of just
	// variables.
	ConvertIntervals *bool `protobuf:"varint,177,opt,name=convert_intervals,json=convertIntervals,def=1" json:"convert_intervals,omitempty"`
	// Whether we try to automatically detect the symmetries in a model and
	// exploit them. Currently, at level 1 we detect them in presolve and try
	// to fix Booleans. At level 2, we also do some form of dynamic symmetry
	// breaking during search.
	SymmetryLevel *int32 `protobuf:"varint,183,opt,name=symmetry_level,json=symmetryLevel,def=2" json:"symmetry_level,omitempty"`
	// Experimental. Use new code to propagate linear constraint.
	NewLinearPropagation *bool `protobuf:"varint,224,opt,name=new_linear_propagation,json=newLinearPropagation,def=0" json:"new_linear_propagation,omitempty"`
	// Linear constraints that are not pseudo-Boolean and that are longer than
	// this size will be split into sqrt(size) intermediate sums in order to have
	// faster propation in the CP engine.
	LinearSplitSize *int32 `protobuf:"varint,256,opt,name=linear_split_size,json=linearSplitSize,def=100" json:"linear_split_size,omitempty"`
	// A non-negative level indicating the type of constraints we consider in the
	// LP relaxation. At level zero, no LP relaxation is used. At level 1, only
	// the linear constraint and full encoding are added. At level 2, we also add
	// all the Boolean constraints.
	LinearizationLevel *int32 `protobuf:"varint,90,opt,name=linearization_level,json=linearizationLevel,def=1" json:"linearization_level,omitempty"`
	// A non-negative level indicating how much we should try to fully encode
	// Integer variables as Boolean.
	BooleanEncodingLevel *int32 `protobuf:"varint,107,opt,name=boolean_encoding_level,json=booleanEncodingLevel,def=1" json:"boolean_encoding_level,omitempty"`
	// When loading a*x + b*y ==/!= c when x and y are both fully encoded.
	// The solver may decide to replace the linear equation by a set of clauses.
	// This is triggered if the sizes of the domains of x and y are below the
	// threshold.
	MaxDomainSizeWhenEncodingEqNeqConstraints *int32 `protobuf:"varint,191,opt,name=max_domain_size_when_encoding_eq_neq_constraints,json=maxDomainSizeWhenEncodingEqNeqConstraints,def=16" json:"max_domain_size_when_encoding_eq_neq_constraints,omitempty"`
	// The limit on the number of cuts in our cut pool. When this is reached we do
	// not generate cuts anymore.
	//
	// TODO(user): We should probably remove this parameters, and just always
	// generate cuts but only keep the best n or something.
	MaxNumCuts *int32 `protobuf:"varint,91,opt,name=max_num_cuts,json=maxNumCuts,def=10000" json:"max_num_cuts,omitempty"`
	// Control the global cut effort. Zero will turn off all cut. For now we just
	// have one level. Note also that most cuts are only used at linearization
	// level >= 2.
	CutLevel *int32 `protobuf:"varint,196,opt,name=cut_level,json=cutLevel,def=1" json:"cut_level,omitempty"`
	// For the cut that can be generated at any level, this control if we only
	// try to generate them at the root node.
	OnlyAddCutsAtLevelZero *bool `protobuf:"varint,92,opt,name=only_add_cuts_at_level_zero,json=onlyAddCutsAtLevelZero,def=0" json:"only_add_cuts_at_level_zero,omitempty"`
	// When the LP objective is fractional, do we add the cut that forces the
	// linear objective expression to be greater or equal to this fractional value
	// rounded up? We can always do that since our objective is integer, and
	// combined with MIR heuristic to reduce the coefficient of such cut, it can
	// help.
	AddObjectiveCut *bool `protobuf:"varint,197,opt,name=add_objective_cut,json=addObjectiveCut,def=0" json:"add_objective_cut,omitempty"`
	// Whether we generate and add Chvatal-Gomory cuts to the LP at root node.
	// Note that for now, this is not heavily tuned.
	AddCgCuts *bool `protobuf:"varint,117,opt,name=add_cg_cuts,json=addCgCuts,def=1" json:"add_cg_cuts,omitempty"`
	// Whether we generate MIR cuts at root node.
	// Note that for now, this is not heavily tuned.
	AddMirCuts *bool `protobuf:"varint,120,opt,name=add_mir_cuts,json=addMirCuts,def=1" json:"add_mir_cuts,omitempty"`
	// Whether we generate Zero-Half cuts at root node.
	// Note that for now, this is not heavily tuned.
	AddZeroHalfCuts *bool `protobuf:"varint,169,opt,name=add_zero_half_cuts,json=addZeroHalfCuts,def=1" json:"add_zero_half_cuts,omitempty"`
	// Whether we generate clique cuts from the binary implication graph. Note
	// that as the search goes on, this graph will contains new binary clauses
	// learned by the SAT engine.
	AddCliqueCuts *bool `protobuf:"varint,172,opt,name=add_clique_cuts,json=addCliqueCuts,def=1" json:"add_clique_cuts,omitempty"`
	// Whether we generate RLT cuts. This is still experimental but can help on
	// binary problem with a lot of clauses of size 3.
	AddRltCuts *bool `protobuf:"varint,279,opt,name=add_rlt_cuts,json=addRltCuts,def=1" json:"add_rlt_cuts,omitempty"`
	// Cut generator for all diffs can add too many cuts for large all_diff
	// constraints. This parameter restricts the large all_diff constraints to
	// have a cut generator.
	MaxAllDiffCutSize *int32 `protobuf:"varint,148,opt,name=max_all_diff_cut_size,json=maxAllDiffCutSize,def=64" json:"max_all_diff_cut_size,omitempty"`
	// For the lin max constraints, generates the cuts described in "Strong
	// mixed-integer programming formulations for trained neural networks" by Ross
	// Anderson et. (https://arxiv.org/pdf/1811.01988.pdf)
	AddLinMaxCuts *bool `protobuf:"varint,152,opt,name=add_lin_max_cuts,json=addLinMaxCuts,def=1" json:"add_lin_max_cuts,omitempty"`
	// In the integer rounding procedure used for MIR and Gomory cut, the maximum
	// "scaling" we use (must be positive). The lower this is, the lower the
	// integer coefficients of the cut will be. Note that cut generated by lower
	// values are not necessarily worse than cut generated by larger value. There
	// is no strict dominance relationship.
	//
	// Setting this to 2 result in the "strong fractional rouding" of Letchford
	// and Lodi.
	MaxIntegerRoundingScaling *int32 `protobuf:"varint,119,opt,name=max_integer_rounding_scaling,json=maxIntegerRoundingScaling,def=600" json:"max_integer_rounding_scaling,omitempty"`
	// If true, we start by an empty LP, and only add constraints not satisfied
	// by the current LP solution batch by batch. A constraint that is only added
	// like this is known as a "lazy" constraint in the literature, except that we
	// currently consider all constraints as lazy here.
	AddLpConstraintsLazily *bool `protobuf:"varint,112,opt,name=add_lp_constraints_lazily,json=addLpConstraintsLazily,def=1" json:"add_lp_constraints_lazily,omitempty"`
	// Even at the root node, we do not want to spend too much time on the LP if
	// it is "difficult". So we solve it in "chunks" of that many iterations. The
	// solve will be continued down in the tree or the next time we go back to the
	// root node.
	RootLpIterations *int32 `protobuf:"varint,227,opt,name=root_lp_iterations,json=rootLpIterations,def=2000" json:"root_lp_iterations,omitempty"`
	// While adding constraints, skip the constraints which have orthogonality
	// less than 'min_orthogonality_for_lp_constraints' with already added
	// constraints during current call. Orthogonality is defined as 1 -
	// cosine(vector angle between constraints). A value of zero disable this
	// feature.
	MinOrthogonalityForLpConstraints *float64 `protobuf:"fixed64,115,opt,name=min_orthogonality_for_lp_constraints,json=minOrthogonalityForLpConstraints,def=0.05" json:"min_orthogonality_for_lp_constraints,omitempty"`
	// Max number of time we perform cut generation and resolve the LP at level 0.
	MaxCutRoundsAtLevelZero *int32 `protobuf:"varint,154,opt,name=max_cut_rounds_at_level_zero,json=maxCutRoundsAtLevelZero,def=1" json:"max_cut_rounds_at_level_zero,omitempty"`
	// If a constraint/cut in LP is not active for that many consecutive OPTIMAL
	// solves, remove it from the LP. Note that it might be added again later if
	// it become violated by the current LP solution.
	MaxConsecutiveInactiveCount *int32 `protobuf:"varint,121,opt,name=max_consecutive_inactive_count,json=maxConsecutiveInactiveCount,def=100" json:"max_consecutive_inactive_count,omitempty"`
	// These parameters are similar to sat clause management activity parameters.
	// They are effective only if the number of generated cuts exceed the storage
	// limit. Default values are based on a few experiments on miplib instances.
	CutMaxActiveCountValue *float64 `protobuf:"fixed64,155,opt,name=cut_max_active_count_value,json=cutMaxActiveCountValue,def=1e+10" json:"cut_max_active_count_value,omitempty"`
	CutActiveCountDecay    *float64 `protobuf:"fixed64,156,opt,name=cut_active_count_decay,json=cutActiveCountDecay,def=0.8" json:"cut_active_count_decay,omitempty"`
	// Target number of constraints to remove during cleanup.
	CutCleanupTarget *int32 `protobuf:"varint,157,opt,name=cut_cleanup_target,json=cutCleanupTarget,def=1000" json:"cut_cleanup_target,omitempty"`
	// Add that many lazy constraints (or cuts) at once in the LP. Note that at
	// the beginning of the solve, we do add more than this.
	NewConstraintsBatchSize *int32 `protobuf:"varint,122,opt,name=new_constraints_batch_size,json=newConstraintsBatchSize,def=50" json:"new_constraints_batch_size,omitempty"`
	// If true and the Lp relaxation of the problem has an integer optimal
	// solution, try to exploit it. Note that since the LP relaxation may not
	// contain all the constraints, such a solution is not necessarily a solution
	// of the full problem.
	ExploitIntegerLpSolution *bool `protobuf:"varint,94,opt,name=exploit_integer_lp_solution,json=exploitIntegerLpSolution,def=1" json:"exploit_integer_lp_solution,omitempty"`
	// If true and the Lp relaxation of the problem has a solution, try to exploit
	// it. This is same as above except in this case the lp solution might not be
	// an integer solution.
	ExploitAllLpSolution *bool `protobuf:"varint,116,opt,name=exploit_all_lp_solution,json=exploitAllLpSolution,def=1" json:"exploit_all_lp_solution,omitempty"`
	// When branching on a variable, follow the last best solution value.
	ExploitBestSolution *bool `protobuf:"varint,130,opt,name=exploit_best_solution,json=exploitBestSolution,def=0" json:"exploit_best_solution,omitempty"`
	// When branching on a variable, follow the last best relaxation solution
	// value. We use the relaxation with the tightest bound on the objective as
	// the best relaxation solution.
	ExploitRelaxationSolution *bool `protobuf:"varint,161,opt,name=exploit_relaxation_solution,json=exploitRelaxationSolution,def=0" json:"exploit_relaxation_solution,omitempty"`
	// When branching an a variable that directly affect the objective,
	// branch on the value that lead to the best objective first.
	ExploitObjective *bool `protobuf:"varint,131,opt,name=exploit_objective,json=exploitObjective,def=1" json:"exploit_objective,omitempty"`
	// Infer products of Boolean or of Boolean time IntegerVariable from the
	// linear constrainst in the problem. This can be used in some cuts, altough
	// for now we don't really exploit it.
	DetectLinearizedProduct *bool `protobuf:"varint,277,opt,name=detect_linearized_product,json=detectLinearizedProduct,def=0" json:"detect_linearized_product,omitempty"`
	// We need to bound the maximum magnitude of the variables for CP-SAT, and
	// that is the bound we use. If the MIP model expect larger variable value in
	// the solution, then the converted model will likely not be relevant.
	MipMaxBound *float64 `protobuf:"fixed64,124,opt,name=mip_max_bound,json=mipMaxBound,def=1e+07" json:"mip_max_bound,omitempty"`
	// All continuous variable of the problem will be multiplied by this factor.
	// By default, we don't do any variable scaling and rely on the MIP model to
	// specify continuous variable domain with the wanted precision.
	MipVarScaling *float64 `protobuf:"fixed64,125,opt,name=mip_var_scaling,json=mipVarScaling,def=1" json:"mip_var_scaling,omitempty"`
	// If this is false, then mip_var_scaling is only applied to variables with
	// "small" domain. If it is true, we scale all floating point variable
	// independenlty of their domain.
	MipScaleLargeDomain *bool `protobuf:"varint,225,opt,name=mip_scale_large_domain,json=mipScaleLargeDomain,def=0" json:"mip_scale_large_domain,omitempty"`
	// If true, some continuous variable might be automatically scaled. For now,
	// this is only the case where we detect that a variable is actually an
	// integer multiple of a constant. For instance, variables of the form k * 0.5
	// are quite frequent, and if we detect this, we will scale such variable
	// domain by 2 to make it implied integer.
	MipAutomaticallyScaleVariables *bool `protobuf:"varint,166,opt,name=mip_automatically_scale_variables,json=mipAutomaticallyScaleVariables,def=1" json:"mip_automatically_scale_variables,omitempty"`
	// If one try to solve a MIP model with CP-SAT, because we assume all variable
	// to be integer after scaling, we will not necessarily have the correct
	// optimal. Note however that all feasible solutions are valid since we will
	// just solve a more restricted version of the original problem.
	//
	// This parameters is here to prevent user to think the solution is optimal
	// when it might not be. One will need to manually set this to false to solve
	// a MIP model where the optimal might be different.
	//
	// Note that this is tested after some MIP presolve steps, so even if not
	// all original variable are integer, we might end up with a pure IP after
	// presolve and after implied integer detection.
	OnlySolveIp *bool `protobuf:"varint,222,opt,name=only_solve_ip,json=onlySolveIp,def=0" json:"only_solve_ip,omitempty"`
	// When scaling constraint with double coefficients to integer coefficients,
	// we will multiply by a power of 2 and round the coefficients. We will choose
	// the lowest power such that we have no potential overflow (see
	// mip_max_activity_exponent) and the worst case constraint activity error
	// does not exceed this threshold.
	//
	// Note that we also detect constraint with rational coefficients and scale
	// them accordingly when it seems better instead of using a power of 2.
	//
	// We also relax all constraint bounds by this absolute value. For pure
	// integer constraint, if this value if lower than one, this will not change
	// anything. However it is needed when scaling MIP problems.
	//
	// If we manage to scale a constraint correctly, the maximum error we can make
	// will be twice this value (once for the scaling error and once for the
	// relaxed bounds). If we are not able to scale that well, we will display
	// that fact but still scale as best as we can.
	MipWantedPrecision *float64 `protobuf:"fixed64,126,opt,name=mip_wanted_precision,json=mipWantedPrecision,def=1e-06" json:"mip_wanted_precision,omitempty"`
	// To avoid integer overflow, we always force the maximum possible constraint
	// activity (and objective value) according to the initial variable domain to
	// be smaller than 2 to this given power. Because of this, we cannot always
	// reach the "mip_wanted_precision" parameter above.
	//
	// This can go as high as 62, but some internal algo currently abort early if
	// they might run into integer overflow, so it is better to keep it a bit
	// lower than this.
	MipMaxActivityExponent *int32 `protobuf:"varint,127,opt,name=mip_max_activity_exponent,json=mipMaxActivityExponent,def=53" json:"mip_max_activity_exponent,omitempty"`
	// As explained in mip_precision and mip_max_activity_exponent, we cannot
	// always reach the wanted precision during scaling. We use this threshold to
	// enphasize in the logs when the precision seems bad.
	MipCheckPrecision *float64 `protobuf:"fixed64,128,opt,name=mip_check_precision,json=mipCheckPrecision,def=0.0001" json:"mip_check_precision,omitempty"`
	// Even if we make big error when scaling the objective, we can always derive
	// a correct lower bound on the original objective by using the exact lower
	// bound on the scaled integer version of the objective. This should be fast,
	// but if you don't care about having a precise lower bound, you can turn it
	// off.
	MipComputeTrueObjectiveBound *bool `protobuf:"varint,198,opt,name=mip_compute_true_objective_bound,json=mipComputeTrueObjectiveBound,def=1" json:"mip_compute_true_objective_bound,omitempty"`
	// Any finite values in the input MIP must be below this threshold, otherwise
	// the model will be reported invalid. This is needed to avoid floating point
	// overflow when evaluating bounds * coeff for instance. We are a bit more
	// defensive, but in practice, users shouldn't use super large values in a
	// MIP.
	MipMaxValidMagnitude *float64 `protobuf:"fixed64,199,opt,name=mip_max_valid_magnitude,json=mipMaxValidMagnitude,def=1e+20" json:"mip_max_valid_magnitude,omitempty"`
	// By default, any variable/constraint bound with a finite value and a
	// magnitude greater than the mip_max_valid_magnitude will result with a
	// invalid model. This flags change the behavior such that such bounds are
	// silently transformed to +∞ or -∞.
	//
	// It is recommended to keep it at false, and create valid bounds.
	MipTreatHighMagnitudeBoundsAsInfinity *bool `protobuf:"varint,278,opt,name=mip_treat_high_magnitude_bounds_as_infinity,json=mipTreatHighMagnitudeBoundsAsInfinity,def=0" json:"mip_treat_high_magnitude_bounds_as_infinity,omitempty"`
	// Any value in the input mip with a magnitude lower than this will be set to
	// zero. This is to avoid some issue in LP presolving.
	MipDropTolerance *float64 `protobuf:"fixed64,232,opt,name=mip_drop_tolerance,json=mipDropTolerance,def=1e-16" json:"mip_drop_tolerance,omitempty"`
	// When solving a MIP, we do some basic floating point presolving before
	// scaling the problem to integer to be handled by CP-SAT. This control how
	// much of that presolve we do. It can help to better scale floating point
	// model, but it is not always behaving nicely.
	MipPresolveLevel *int32 `protobuf:"varint,261,opt,name=mip_presolve_level,json=mipPresolveLevel,def=2" json:"mip_presolve_level,omitempty"`
}

// Default values for SatParameters fields.
const (
	Default_SatParameters_Name                                           = string("")
	Default_SatParameters_PreferredVariableOrder                         = SatParameters_IN_ORDER
	Default_SatParameters_InitialPolarity                                = SatParameters_POLARITY_FALSE
	Default_SatParameters_UsePhaseSaving                                 = bool(true)
	Default_SatParameters_PolarityRephaseIncrement                       = int32(1000)
	Default_SatParameters_RandomPolarityRatio                            = float64(0)
	Default_SatParameters_RandomBranchesRatio                            = float64(0)
	Default_SatParameters_UseErwaHeuristic                               = bool(false)
	Default_SatParameters_InitialVariablesActivity                       = float64(0)
	Default_SatParameters_AlsoBumpVariablesInConflictReasons             = bool(false)
	Default_SatParameters_MinimizationAlgorithm                          = SatParameters_RECURSIVE
	Default_SatParameters_BinaryMinimizationAlgorithm                    = SatParameters_BINARY_MINIMIZATION_FIRST
	Default_SatParameters_SubsumptionDuringConflictAnalysis              = bool(true)
	Default_SatParameters_ClauseCleanupPeriod                            = int32(10000)
	Default_SatParameters_ClauseCleanupTarget                            = int32(0)
	Default_SatParameters_ClauseCleanupRatio                             = float64(0.5)
	Default_SatParameters_ClauseCleanupProtection                        = SatParameters_PROTECTION_NONE
	Default_SatParameters_ClauseCleanupLbdBound                          = int32(5)
	Default_SatParameters_ClauseCleanupOrdering                          = SatParameters_CLAUSE_ACTIVITY
	Default_SatParameters_PbCleanupIncrement                             = int32(200)
	Default_SatParameters_PbCleanupRatio                                 = float64(0.5)
	Default_SatParameters_VariableActivityDecay                          = float64(0.8)
	Default_SatParameters_MaxVariableActivityValue                       = float64(1e+100)
	Default_SatParameters_GlucoseMaxDecay                                = float64(0.95)
	Default_SatParameters_GlucoseDecayIncrement                          = float64(0.01)
	Default_SatParameters_GlucoseDecayIncrementPeriod                    = int32(5000)
	Default_SatParameters_ClauseActivityDecay                            = float64(0.999)
	Default_SatParameters_MaxClauseActivityValue                         = float64(1e+20)
	Default_SatParameters_DefaultRestartAlgorithms                       = string("LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART")
	Default_SatParameters_RestartPeriod                                  = int32(50)
	Default_SatParameters_RestartRunningWindowSize                       = int32(50)
	Default_SatParameters_RestartDlAverageRatio                          = float64(1)
	Default_SatParameters_RestartLbdAverageRatio                         = float64(1)
	Default_SatParameters_UseBlockingRestart                             = bool(false)
	Default_SatParameters_BlockingRestartWindowSize                      = int32(5000)
	Default_SatParameters_BlockingRestartMultiplier                      = float64(1.4)
	Default_SatParameters_NumConflictsBeforeStrategyChanges              = int32(0)
	Default_SatParameters_StrategyChangeIncreaseRatio                    = float64(0)
	Default_SatParameters_MaxNumberOfConflicts                           = int64(9223372036854775807)
	Default_SatParameters_MaxMemoryInMb                                  = int64(10000)
	Default_SatParameters_AbsoluteGapLimit                               = float64(0.0001)
	Default_SatParameters_RelativeGapLimit                               = float64(0)
	Default_SatParameters_RandomSeed                                     = int32(1)
	Default_SatParameters_PermuteVariableRandomly                        = bool(false)
	Default_SatParameters_PermutePresolveConstraintOrder                 = bool(false)
	Default_SatParameters_UseAbslRandom                                  = bool(false)
	Default_SatParameters_LogSearchProgress                              = bool(false)
	Default_SatParameters_LogSubsolverStatistics                         = bool(false)
	Default_SatParameters_LogPrefix                                      = string("")
	Default_SatParameters_LogToStdout                                    = bool(true)
	Default_SatParameters_LogToResponse                                  = bool(false)
	Default_SatParameters_UsePbResolution                                = bool(false)
	Default_SatParameters_MinimizeReductionDuringPbResolution            = bool(false)
	Default_SatParameters_CountAssumptionLevelsInLbd                     = bool(true)
	Default_SatParameters_PresolveBveThreshold                           = int32(500)
	Default_SatParameters_PresolveBveClauseWeight                        = int32(3)
	Default_SatParameters_ProbingDeterministicTimeLimit                  = float64(1)
	Default_SatParameters_PresolveProbingDeterministicTimeLimit          = float64(30)
	Default_SatParameters_PresolveBlockedClause                          = bool(true)
	Default_SatParameters_PresolveUseBva                                 = bool(true)
	Default_SatParameters_PresolveBvaThreshold                           = int32(1)
	Default_SatParameters_MaxPresolveIterations                          = int32(3)
	Default_SatParameters_CpModelPresolve                                = bool(true)
	Default_SatParameters_CpModelProbingLevel                            = int32(2)
	Default_SatParameters_CpModelUseSatPresolve                          = bool(true)
	Default_SatParameters_DetectTableWithCost                            = bool(false)
	Default_SatParameters_TableCompressionLevel                          = int32(2)
	Default_SatParameters_ExpandAlldiffConstraints                       = bool(false)
	Default_SatParameters_ExpandReservoirConstraints                     = bool(true)
	Default_SatParameters_DisableConstraintExpansion                     = bool(false)
	Default_SatParameters_EncodeComplexLinearConstraintWithInteger       = bool(false)
	Default_SatParameters_MergeNoOverlapWorkLimit                        = float64(1e+12)
	Default_SatParameters_MergeAtMostOneWorkLimit                        = float64(1e+08)
	Default_SatParameters_PresolveSubstitutionLevel                      = int32(1)
	Default_SatParameters_PresolveExtractIntegerEnforcement              = bool(false)
	Default_SatParameters_PresolveInclusionWorkLimit                     = int64(100000000)
	Default_SatParameters_IgnoreNames                                    = bool(true)
	Default_SatParameters_InferAllDiffs                                  = bool(true)
	Default_SatParameters_FindBigLinearOverlap                           = bool(true)
	Default_SatParameters_UseSatInprocessing                             = bool(true)
	Default_SatParameters_InprocessingDtimeRatio                         = float64(0.2)
	Default_SatParameters_InprocessingProbingDtime                       = float64(1)
	Default_SatParameters_InprocessingMinimizationDtime                  = float64(1)
	Default_SatParameters_NumWorkers                                     = int32(0)
	Default_SatParameters_NumSearchWorkers                               = int32(0)
	Default_SatParameters_MinNumLnsWorkers                               = int32(2)
	Default_SatParameters_InterleaveSearch                               = bool(false)
	Default_SatParameters_InterleaveBatchSize                            = int32(0)
	Default_SatParameters_ShareObjectiveBounds                           = bool(true)
	Default_SatParameters_ShareLevelZeroBounds                           = bool(true)
	Default_SatParameters_ShareBinaryClauses                             = bool(true)
	Default_SatParameters_DebugPostsolveWithFullSolver                   = bool(false)
	Default_SatParameters_DebugMaxNumPresolveOperations                  = int32(0)
	Default_SatParameters_DebugCrashOnBadHint                            = bool(false)
	Default_SatParameters_UseOptimizationHints                           = bool(true)
	Default_SatParameters_CoreMinimizationLevel                          = int32(2)
	Default_SatParameters_FindMultipleCores                              = bool(true)
	Default_SatParameters_CoverOptimization                              = bool(true)
	Default_SatParameters_MaxSatAssumptionOrder                          = SatParameters_DEFAULT_ASSUMPTION_ORDER
	Default_SatParameters_MaxSatReverseAssumptionOrder                   = bool(false)
	Default_SatParameters_MaxSatStratification                           = SatParameters_STRATIFICATION_DESCENT
	Default_SatParameters_PropagationLoopDetectionFactor                 = float64(10)
	Default_SatParameters_UsePrecedencesInDisjunctiveConstraint          = bool(true)
	Default_SatParameters_MaxSizeToCreatePrecedenceLiteralsInDisjunctive = int32(60)
	Default_SatParameters_UseStrongPropagationInDisjunctive              = bool(false)
	Default_SatParameters_UseDynamicPrecedenceInDisjunctive              = bool(false)
	Default_SatParameters_UseDynamicPrecedenceInCumulative               = bool(false)
	Default_SatParameters_UseOverloadCheckerInCumulative                 = bool(false)
	Default_SatParameters_UseTimetableEdgeFindingInCumulative            = bool(false)
	Default_SatParameters_MaxNumIntervalsForTimetableEdgeFinding         = int32(100)
	Default_SatParameters_UseHardPrecedencesInCumulative                 = bool(false)
	Default_SatParameters_ExploitAllPrecedences                          = bool(false)
	Default_SatParameters_UseDisjunctiveConstraintInCumulative           = bool(true)
	Default_SatParameters_UseTimetablingInNoOverlap_2D                   = bool(false)
	Default_SatParameters_UseEnergeticReasoningInNoOverlap_2D            = bool(false)
	Default_SatParameters_UseAreaEnergeticReasoningInNoOverlap_2D        = bool(false)
	Default_SatParameters_MaxPairsPairwiseReasoningInNoOverlap_2D        = int32(1250)
	Default_SatParameters_UseDualSchedulingHeuristics                    = bool(true)
	Default_SatParameters_SearchBranching                                = SatParameters_AUTOMATIC_SEARCH
	Default_SatParameters_HintConflictLimit                              = int32(10)
	Default_SatParameters_RepairHint                                     = bool(false)
	Default_SatParameters_FixVariablesToTheirHintedValue                 = bool(false)
	Default_SatParameters_UseProbingSearch                               = bool(false)
	Default_SatParameters_UseExtendedProbing                             = bool(true)
	Default_SatParameters_ProbingNumCombinationsLimit                    = int32(20000)
	Default_SatParameters_UseShavingInProbingSearch                      = bool(true)
	Default_SatParameters_ShavingSearchDeterministicTime                 = float64(0.001)
	Default_SatParameters_UseObjectiveLbSearch                           = bool(false)
	Default_SatParameters_UseObjectiveShavingSearch                      = bool(false)
	Default_SatParameters_PseudoCostReliabilityThreshold                 = int64(100)
	Default_SatParameters_OptimizeWithCore                               = bool(false)
	Default_SatParameters_OptimizeWithLbTreeSearch                       = bool(false)
	Default_SatParameters_BinarySearchNumConflicts                       = int32(-1)
	Default_SatParameters_OptimizeWithMaxHs                              = bool(false)
	Default_SatParameters_UseFeasibilityJump                             = bool(true)
	Default_SatParameters_TestFeasibilityJump                            = bool(false)
	Default_SatParameters_FeasibilityJumpDecay                           = float64(0.95)
	Default_SatParameters_FeasibilityJumpLinearizationLevel              = int32(2)
	Default_SatParameters_FeasibilityJumpRestartFactor                   = int32(1)
	Default_SatParameters_FeasibilityJumpVarRandomizationProbability     = float64(0)
	Default_SatParameters_FeasibilityJumpVarPerburbationRangeRatio       = float64(0.2)
	Default_SatParameters_FeasibilityJumpEnableRestarts                  = bool(true)
	Default_SatParameters_FeasibilityJumpMaxExpandedConstraintSize       = int32(100)
	Default_SatParameters_NumViolationLs                                 = int32(0)
	Default_SatParameters_ViolationLsPerturbationPeriod                  = int32(100)
	Default_SatParameters_ViolationLsCompoundMoveProbability             = float64(0.5)
	Default_SatParameters_SharedTreeNumWorkers                           = int32(0)
	Default_SatParameters_UseSharedTreeSearch                            = bool(false)
	Default_SatParameters_SharedTreeWorkerObjectiveSplitProbability      = float64(0.5)
	Default_SatParameters_SharedTreeMaxNodesPerWorker                    = int32(128)
	Default_SatParameters_SharedTreeSplitStrategy                        = SatParameters_SPLIT_STRATEGY_AUTO
	Default_SatParameters_EnumerateAllSolutions                          = bool(false)
	Default_SatParameters_KeepAllFeasibleSolutionsInPresolve             = bool(false)
	Default_SatParameters_FillTightenedDomainsInResponse                 = bool(false)
	Default_SatParameters_FillAdditionalSolutionsInResponse              = bool(false)
	Default_SatParameters_InstantiateAllVariables                        = bool(true)
	Default_SatParameters_AutoDetectGreaterThanAtLeastOneOf              = bool(true)
	Default_SatParameters_StopAfterFirstSolution                         = bool(false)
	Default_SatParameters_StopAfterPresolve                              = bool(false)
	Default_SatParameters_StopAfterRootPropagation                       = bool(false)
	Default_SatParameters_UseLnsOnly                                     = bool(false)
	Default_SatParameters_SolutionPoolSize                               = int32(3)
	Default_SatParameters_UseRinsLns                                     = bool(true)
	Default_SatParameters_UseFeasibilityPump                             = bool(true)
	Default_SatParameters_UseLbRelaxLns                                  = bool(false)
	Default_SatParameters_FpRounding                                     = SatParameters_PROPAGATION_ASSISTED
	Default_SatParameters_DiversifyLnsParams                             = bool(false)
	Default_SatParameters_RandomizeSearch                                = bool(false)
	Default_SatParameters_SearchRandomVariablePoolSize                   = int64(0)
	Default_SatParameters_PushAllTasksTowardStart                        = bool(false)
	Default_SatParameters_UseOptionalVariables                           = bool(false)
	Default_SatParameters_UseExactLpReason                               = bool(true)
	Default_SatParameters_UseCombinedNoOverlap                           = bool(false)
	Default_SatParameters_AtMostOneMaxExpansionSize                      = int32(3)
	Default_SatParameters_CatchSigintSignal                              = bool(true)
	Default_SatParameters_UseImpliedBounds                               = bool(true)
	Default_SatParameters_PolishLpSolution                               = bool(false)
	Default_SatParameters_LpPrimalTolerance                              = float64(1e-07)
	Default_SatParameters_LpDualTolerance                                = float64(1e-07)
	Default_SatParameters_ConvertIntervals                               = bool(true)
	Default_SatParameters_SymmetryLevel                                  = int32(2)
	Default_SatParameters_NewLinearPropagation                           = bool(false)
	Default_SatParameters_LinearSplitSize                                = int32(100)
	Default_SatParameters_LinearizationLevel                             = int32(1)
	Default_SatParameters_BooleanEncodingLevel                           = int32(1)
	Default_SatParameters_MaxDomainSizeWhenEncodingEqNeqConstraints      = int32(16)
	Default_SatParameters_MaxNumCuts                                     = int32(10000)
	Default_SatParameters_CutLevel                                       = int32(1)
	Default_SatParameters_OnlyAddCutsAtLevelZero                         = bool(false)
	Default_SatParameters_AddObjectiveCut                                = bool(false)
	Default_SatParameters_AddCgCuts                                      = bool(true)
	Default_SatParameters_AddMirCuts                                     = bool(true)
	Default_SatParameters_AddZeroHalfCuts                                = bool(true)
	Default_SatParameters_AddCliqueCuts                                  = bool(true)
	Default_SatParameters_AddRltCuts                                     = bool(true)
	Default_SatParameters_MaxAllDiffCutSize                              = int32(64)
	Default_SatParameters_AddLinMaxCuts                                  = bool(true)
	Default_SatParameters_MaxIntegerRoundingScaling                      = int32(600)
	Default_SatParameters_AddLpConstraintsLazily                         = bool(true)
	Default_SatParameters_RootLpIterations                               = int32(2000)
	Default_SatParameters_MinOrthogonalityForLpConstraints               = float64(0.05)
	Default_SatParameters_MaxCutRoundsAtLevelZero                        = int32(1)
	Default_SatParameters_MaxConsecutiveInactiveCount                    = int32(100)
	Default_SatParameters_CutMaxActiveCountValue                         = float64(1e+10)
	Default_SatParameters_CutActiveCountDecay                            = float64(0.8)
	Default_SatParameters_CutCleanupTarget                               = int32(1000)
	Default_SatParameters_NewConstraintsBatchSize                        = int32(50)
	Default_SatParameters_ExploitIntegerLpSolution                       = bool(true)
	Default_SatParameters_ExploitAllLpSolution                           = bool(true)
	Default_SatParameters_ExploitBestSolution                            = bool(false)
	Default_SatParameters_ExploitRelaxationSolution                      = bool(false)
	Default_SatParameters_ExploitObjective                               = bool(true)
	Default_SatParameters_DetectLinearizedProduct                        = bool(false)
	Default_SatParameters_MipMaxBound                                    = float64(1e+07)
	Default_SatParameters_MipVarScaling                                  = float64(1)
	Default_SatParameters_MipScaleLargeDomain                            = bool(false)
	Default_SatParameters_MipAutomaticallyScaleVariables                 = bool(true)
	Default_SatParameters_OnlySolveIp                                    = bool(false)
	Default_SatParameters_MipWantedPrecision                             = float64(1e-06)
	Default_SatParameters_MipMaxActivityExponent                         = int32(53)
	Default_SatParameters_MipCheckPrecision                              = float64(0.0001)
	Default_SatParameters_MipComputeTrueObjectiveBound                   = bool(true)
	Default_SatParameters_MipMaxValidMagnitude                           = float64(1e+20)
	Default_SatParameters_MipTreatHighMagnitudeBoundsAsInfinity          = bool(false)
	Default_SatParameters_MipDropTolerance                               = float64(1e-16)
	Default_SatParameters_MipPresolveLevel                               = int32(2)
)

// Default values for SatParameters fields.
var (
	Default_SatParameters_MaxTimeInSeconds     = float64(math.Inf(+1))
	Default_SatParameters_MaxDeterministicTime = float64(math.Inf(+1))
)

func (x *SatParameters) Reset() {
	*x = SatParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ortools_sat_sat_parameters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SatParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SatParameters) ProtoMessage() {}

func (x *SatParameters) ProtoReflect() protoreflect.Message {
	mi := &file_ortools_sat_sat_parameters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SatParameters.ProtoReflect.Descriptor instead.
func (*SatParameters) Descriptor() ([]byte, []int) {
	return file_ortools_sat_sat_parameters_proto_rawDescGZIP(), []int{0}
}

func (x *SatParameters) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return Default_SatParameters_Name
}

func (x *SatParameters) GetPreferredVariableOrder() SatParameters_VariableOrder {
	if x != nil && x.PreferredVariableOrder != nil {
		return *x.PreferredVariableOrder
	}
	return Default_SatParameters_PreferredVariableOrder
}

func (x *SatParameters) GetInitialPolarity() SatParameters_Polarity {
	if x != nil && x.InitialPolarity != nil {
		return *x.InitialPolarity
	}
	return Default_SatParameters_InitialPolarity
}

func (x *SatParameters) GetUsePhaseSaving() bool {
	if x != nil && x.UsePhaseSaving != nil {
		return *x.UsePhaseSaving
	}
	return Default_SatParameters_UsePhaseSaving
}

func (x *SatParameters) GetPolarityRephaseIncrement() int32 {
	if x != nil && x.PolarityRephaseIncrement != nil {
		return *x.PolarityRephaseIncrement
	}
	return Default_SatParameters_PolarityRephaseIncrement
}

func (x *SatParameters) GetRandomPolarityRatio() float64 {
	if x != nil && x.RandomPolarityRatio != nil {
		return *x.RandomPolarityRatio
	}
	return Default_SatParameters_RandomPolarityRatio
}

func (x *SatParameters) GetRandomBranchesRatio() float64 {
	if x != nil && x.RandomBranchesRatio != nil {
		return *x.RandomBranchesRatio
	}
	return Default_SatParameters_RandomBranchesRatio
}

func (x *SatParameters) GetUseErwaHeuristic() bool {
	if x != nil && x.UseErwaHeuristic != nil {
		return *x.UseErwaHeuristic
	}
	return Default_SatParameters_UseErwaHeuristic
}

func (x *SatParameters) GetInitialVariablesActivity() float64 {
	if x != nil && x.InitialVariablesActivity != nil {
		return *x.InitialVariablesActivity
	}
	return Default_SatParameters_InitialVariablesActivity
}

func (x *SatParameters) GetAlsoBumpVariablesInConflictReasons() bool {
	if x != nil && x.AlsoBumpVariablesInConflictReasons != nil {
		return *x.AlsoBumpVariablesInConflictReasons
	}
	return Default_SatParameters_AlsoBumpVariablesInConflictReasons
}

func (x *SatParameters) GetMinimizationAlgorithm() SatParameters_ConflictMinimizationAlgorithm {
	if x != nil && x.MinimizationAlgorithm != nil {
		return *x.MinimizationAlgorithm
	}
	return Default_SatParameters_MinimizationAlgorithm
}

func (x *SatParameters) GetBinaryMinimizationAlgorithm() SatParameters_BinaryMinizationAlgorithm {
	if x != nil && x.BinaryMinimizationAlgorithm != nil {
		return *x.BinaryMinimizationAlgorithm
	}
	return Default_SatParameters_BinaryMinimizationAlgorithm
}

func (x *SatParameters) GetSubsumptionDuringConflictAnalysis() bool {
	if x != nil && x.SubsumptionDuringConflictAnalysis != nil {
		return *x.SubsumptionDuringConflictAnalysis
	}
	return Default_SatParameters_SubsumptionDuringConflictAnalysis
}

func (x *SatParameters) GetClauseCleanupPeriod() int32 {
	if x != nil && x.ClauseCleanupPeriod != nil {
		return *x.ClauseCleanupPeriod
	}
	return Default_SatParameters_ClauseCleanupPeriod
}

func (x *SatParameters) GetClauseCleanupTarget() int32 {
	if x != nil && x.ClauseCleanupTarget != nil {
		return *x.ClauseCleanupTarget
	}
	return Default_SatParameters_ClauseCleanupTarget
}

func (x *SatParameters) GetClauseCleanupRatio() float64 {
	if x != nil && x.ClauseCleanupRatio != nil {
		return *x.ClauseCleanupRatio
	}
	return Default_SatParameters_ClauseCleanupRatio
}

func (x *SatParameters) GetClauseCleanupProtection() SatParameters_ClauseProtection {
	if x != nil && x.ClauseCleanupProtection != nil {
		return *x.ClauseCleanupProtection
	}
	return Default_SatParameters_ClauseCleanupProtection
}

func (x *SatParameters) GetClauseCleanupLbdBound() int32 {
	if x != nil && x.ClauseCleanupLbdBound != nil {
		return *x.ClauseCleanupLbdBound
	}
	return Default_SatParameters_ClauseCleanupLbdBound
}

func (x *SatParameters) GetClauseCleanupOrdering() SatParameters_ClauseOrdering {
	if x != nil && x.ClauseCleanupOrdering != nil {
		return *x.ClauseCleanupOrdering
	}
	return Default_SatParameters_ClauseCleanupOrdering
}

func (x *SatParameters) GetPbCleanupIncrement() int32 {
	if x != nil && x.PbCleanupIncrement != nil {
		return *x.PbCleanupIncrement
	}
	return Default_SatParameters_PbCleanupIncrement
}

func (x *SatParameters) GetPbCleanupRatio() float64 {
	if x != nil && x.PbCleanupRatio != nil {
		return *x.PbCleanupRatio
	}
	return Default_SatParameters_PbCleanupRatio
}

func (x *SatParameters) GetVariableActivityDecay() float64 {
	if x != nil && x.VariableActivityDecay != nil {
		return *x.VariableActivityDecay
	}
	return Default_SatParameters_VariableActivityDecay
}

func (x *SatParameters) GetMaxVariableActivityValue() float64 {
	if x != nil && x.MaxVariableActivityValue != nil {
		return *x.MaxVariableActivityValue
	}
	return Default_SatParameters_MaxVariableActivityValue
}

func (x *SatParameters) GetGlucoseMaxDecay() float64 {
	if x != nil && x.GlucoseMaxDecay != nil {
		return *x.GlucoseMaxDecay
	}
	return Default_SatParameters_GlucoseMaxDecay
}

func (x *SatParameters) GetGlucoseDecayIncrement() float64 {
	if x != nil && x.GlucoseDecayIncrement != nil {
		return *x.GlucoseDecayIncrement
	}
	return Default_SatParameters_GlucoseDecayIncrement
}

func (x *SatParameters) GetGlucoseDecayIncrementPeriod() int32 {
	if x != nil && x.GlucoseDecayIncrementPeriod != nil {
		return *x.GlucoseDecayIncrementPeriod
	}
	return Default_SatParameters_GlucoseDecayIncrementPeriod
}

func (x *SatParameters) GetClauseActivityDecay() float64 {
	if x != nil && x.ClauseActivityDecay != nil {
		return *x.ClauseActivityDecay
	}
	return Default_SatParameters_ClauseActivityDecay
}

func (x *SatParameters) GetMaxClauseActivityValue() float64 {
	if x != nil && x.MaxClauseActivityValue != nil {
		return *x.MaxClauseActivityValue
	}
	return Default_SatParameters_MaxClauseActivityValue
}

func (x *SatParameters) GetRestartAlgorithms() []SatParameters_RestartAlgorithm {
	if x != nil {
		return x.RestartAlgorithms
	}
	return nil
}

func (x *SatParameters) GetDefaultRestartAlgorithms() string {
	if x != nil && x.DefaultRestartAlgorithms != nil {
		return *x.DefaultRestartAlgorithms
	}
	return Default_SatParameters_DefaultRestartAlgorithms
}

func (x *SatParameters) GetRestartPeriod() int32 {
	if x != nil && x.RestartPeriod != nil {
		return *x.RestartPeriod
	}
	return Default_SatParameters_RestartPeriod
}

func (x *SatParameters) GetRestartRunningWindowSize() int32 {
	if x != nil && x.RestartRunningWindowSize != nil {
		return *x.RestartRunningWindowSize
	}
	return Default_SatParameters_RestartRunningWindowSize
}

func (x *SatParameters) GetRestartDlAverageRatio() float64 {
	if x != nil && x.RestartDlAverageRatio != nil {
		return *x.RestartDlAverageRatio
	}
	return Default_SatParameters_RestartDlAverageRatio
}

func (x *SatParameters) GetRestartLbdAverageRatio() float64 {
	if x != nil && x.RestartLbdAverageRatio != nil {
		return *x.RestartLbdAverageRatio
	}
	return Default_SatParameters_RestartLbdAverageRatio
}

func (x *SatParameters) GetUseBlockingRestart() bool {
	if x != nil && x.UseBlockingRestart != nil {
		return *x.UseBlockingRestart
	}
	return Default_SatParameters_UseBlockingRestart
}

func (x *SatParameters) GetBlockingRestartWindowSize() int32 {
	if x != nil && x.BlockingRestartWindowSize != nil {
		return *x.BlockingRestartWindowSize
	}
	return Default_SatParameters_BlockingRestartWindowSize
}

func (x *SatParameters) GetBlockingRestartMultiplier() float64 {
	if x != nil && x.BlockingRestartMultiplier != nil {
		return *x.BlockingRestartMultiplier
	}
	return Default_SatParameters_BlockingRestartMultiplier
}

func (x *SatParameters) GetNumConflictsBeforeStrategyChanges() int32 {
	if x != nil && x.NumConflictsBeforeStrategyChanges != nil {
		return *x.NumConflictsBeforeStrategyChanges
	}
	return Default_SatParameters_NumConflictsBeforeStrategyChanges
}

func (x *SatParameters) GetStrategyChangeIncreaseRatio() float64 {
	if x != nil && x.StrategyChangeIncreaseRatio != nil {
		return *x.StrategyChangeIncreaseRatio
	}
	return Default_SatParameters_StrategyChangeIncreaseRatio
}

func (x *SatParameters) GetMaxTimeInSeconds() float64 {
	if x != nil && x.MaxTimeInSeconds != nil {
		return *x.MaxTimeInSeconds
	}
	return Default_SatParameters_MaxTimeInSeconds
}

func (x *SatParameters) GetMaxDeterministicTime() float64 {
	if x != nil && x.MaxDeterministicTime != nil {
		return *x.MaxDeterministicTime
	}
	return Default_SatParameters_MaxDeterministicTime
}

func (x *SatParameters) GetMaxNumberOfConflicts() int64 {
	if x != nil && x.MaxNumberOfConflicts != nil {
		return *x.MaxNumberOfConflicts
	}
	return Default_SatParameters_MaxNumberOfConflicts
}

func (x *SatParameters) GetMaxMemoryInMb() int64 {
	if x != nil && x.MaxMemoryInMb != nil {
		return *x.MaxMemoryInMb
	}
	return Default_SatParameters_MaxMemoryInMb
}

func (x *SatParameters) GetAbsoluteGapLimit() float64 {
	if x != nil && x.AbsoluteGapLimit != nil {
		return *x.AbsoluteGapLimit
	}
	return Default_SatParameters_AbsoluteGapLimit
}

func (x *SatParameters) GetRelativeGapLimit() float64 {
	if x != nil && x.RelativeGapLimit != nil {
		return *x.RelativeGapLimit
	}
	return Default_SatParameters_RelativeGapLimit
}

func (x *SatParameters) GetRandomSeed() int32 {
	if x != nil && x.RandomSeed != nil {
		return *x.RandomSeed
	}
	return Default_SatParameters_RandomSeed
}

func (x *SatParameters) GetPermuteVariableRandomly() bool {
	if x != nil && x.PermuteVariableRandomly != nil {
		return *x.PermuteVariableRandomly
	}
	return Default_SatParameters_PermuteVariableRandomly
}

func (x *SatParameters) GetPermutePresolveConstraintOrder() bool {
	if x != nil && x.PermutePresolveConstraintOrder != nil {
		return *x.PermutePresolveConstraintOrder
	}
	return Default_SatParameters_PermutePresolveConstraintOrder
}

func (x *SatParameters) GetUseAbslRandom() bool {
	if x != nil && x.UseAbslRandom != nil {
		return *x.UseAbslRandom
	}
	return Default_SatParameters_UseAbslRandom
}

func (x *SatParameters) GetLogSearchProgress() bool {
	if x != nil && x.LogSearchProgress != nil {
		return *x.LogSearchProgress
	}
	return Default_SatParameters_LogSearchProgress
}

func (x *SatParameters) GetLogSubsolverStatistics() bool {
	if x != nil && x.LogSubsolverStatistics != nil {
		return *x.LogSubsolverStatistics
	}
	return Default_SatParameters_LogSubsolverStatistics
}

func (x *SatParameters) GetLogPrefix() string {
	if x != nil && x.LogPrefix != nil {
		return *x.LogPrefix
	}
	return Default_SatParameters_LogPrefix
}

func (x *SatParameters) GetLogToStdout() bool {
	if x != nil && x.LogToStdout != nil {
		return *x.LogToStdout
	}
	return Default_SatParameters_LogToStdout
}

func (x *SatParameters) GetLogToResponse() bool {
	if x != nil && x.LogToResponse != nil {
		return *x.LogToResponse
	}
	return Default_SatParameters_LogToResponse
}

func (x *SatParameters) GetUsePbResolution() bool {
	if x != nil && x.UsePbResolution != nil {
		return *x.UsePbResolution
	}
	return Default_SatParameters_UsePbResolution
}

func (x *SatParameters) GetMinimizeReductionDuringPbResolution() bool {
	if x != nil && x.MinimizeReductionDuringPbResolution != nil {
		return *x.MinimizeReductionDuringPbResolution
	}
	return Default_SatParameters_MinimizeReductionDuringPbResolution
}

func (x *SatParameters) GetCountAssumptionLevelsInLbd() bool {
	if x != nil && x.CountAssumptionLevelsInLbd != nil {
		return *x.CountAssumptionLevelsInLbd
	}
	return Default_SatParameters_CountAssumptionLevelsInLbd
}

func (x *SatParameters) GetPresolveBveThreshold() int32 {
	if x != nil && x.PresolveBveThreshold != nil {
		return *x.PresolveBveThreshold
	}
	return Default_SatParameters_PresolveBveThreshold
}

func (x *SatParameters) GetPresolveBveClauseWeight() int32 {
	if x != nil && x.PresolveBveClauseWeight != nil {
		return *x.PresolveBveClauseWeight
	}
	return Default_SatParameters_PresolveBveClauseWeight
}

func (x *SatParameters) GetProbingDeterministicTimeLimit() float64 {
	if x != nil && x.ProbingDeterministicTimeLimit != nil {
		return *x.ProbingDeterministicTimeLimit
	}
	return Default_SatParameters_ProbingDeterministicTimeLimit
}

func (x *SatParameters) GetPresolveProbingDeterministicTimeLimit() float64 {
	if x != nil && x.PresolveProbingDeterministicTimeLimit != nil {
		return *x.PresolveProbingDeterministicTimeLimit
	}
	return Default_SatParameters_PresolveProbingDeterministicTimeLimit
}

func (x *SatParameters) GetPresolveBlockedClause() bool {
	if x != nil && x.PresolveBlockedClause != nil {
		return *x.PresolveBlockedClause
	}
	return Default_SatParameters_PresolveBlockedClause
}

func (x *SatParameters) GetPresolveUseBva() bool {
	if x != nil && x.PresolveUseBva != nil {
		return *x.PresolveUseBva
	}
	return Default_SatParameters_PresolveUseBva
}

func (x *SatParameters) GetPresolveBvaThreshold() int32 {
	if x != nil && x.PresolveBvaThreshold != nil {
		return *x.PresolveBvaThreshold
	}
	return Default_SatParameters_PresolveBvaThreshold
}

func (x *SatParameters) GetMaxPresolveIterations() int32 {
	if x != nil && x.MaxPresolveIterations != nil {
		return *x.MaxPresolveIterations
	}
	return Default_SatParameters_MaxPresolveIterations
}

func (x *SatParameters) GetCpModelPresolve() bool {
	if x != nil && x.CpModelPresolve != nil {
		return *x.CpModelPresolve
	}
	return Default_SatParameters_CpModelPresolve
}

func (x *SatParameters) GetCpModelProbingLevel() int32 {
	if x != nil && x.CpModelProbingLevel != nil {
		return *x.CpModelProbingLevel
	}
	return Default_SatParameters_CpModelProbingLevel
}

func (x *SatParameters) GetCpModelUseSatPresolve() bool {
	if x != nil && x.CpModelUseSatPresolve != nil {
		return *x.CpModelUseSatPresolve
	}
	return Default_SatParameters_CpModelUseSatPresolve
}

func (x *SatParameters) GetDetectTableWithCost() bool {
	if x != nil && x.DetectTableWithCost != nil {
		return *x.DetectTableWithCost
	}
	return Default_SatParameters_DetectTableWithCost
}

func (x *SatParameters) GetTableCompressionLevel() int32 {
	if x != nil && x.TableCompressionLevel != nil {
		return *x.TableCompressionLevel
	}
	return Default_SatParameters_TableCompressionLevel
}

func (x *SatParameters) GetExpandAlldiffConstraints() bool {
	if x != nil && x.ExpandAlldiffConstraints != nil {
		return *x.ExpandAlldiffConstraints
	}
	return Default_SatParameters_ExpandAlldiffConstraints
}

func (x *SatParameters) GetExpandReservoirConstraints() bool {
	if x != nil && x.ExpandReservoirConstraints != nil {
		return *x.ExpandReservoirConstraints
	}
	return Default_SatParameters_ExpandReservoirConstraints
}

func (x *SatParameters) GetDisableConstraintExpansion() bool {
	if x != nil && x.DisableConstraintExpansion != nil {
		return *x.DisableConstraintExpansion
	}
	return Default_SatParameters_DisableConstraintExpansion
}

func (x *SatParameters) GetEncodeComplexLinearConstraintWithInteger() bool {
	if x != nil && x.EncodeComplexLinearConstraintWithInteger != nil {
		return *x.EncodeComplexLinearConstraintWithInteger
	}
	return Default_SatParameters_EncodeComplexLinearConstraintWithInteger
}

func (x *SatParameters) GetMergeNoOverlapWorkLimit() float64 {
	if x != nil && x.MergeNoOverlapWorkLimit != nil {
		return *x.MergeNoOverlapWorkLimit
	}
	return Default_SatParameters_MergeNoOverlapWorkLimit
}

func (x *SatParameters) GetMergeAtMostOneWorkLimit() float64 {
	if x != nil && x.MergeAtMostOneWorkLimit != nil {
		return *x.MergeAtMostOneWorkLimit
	}
	return Default_SatParameters_MergeAtMostOneWorkLimit
}

func (x *SatParameters) GetPresolveSubstitutionLevel() int32 {
	if x != nil && x.PresolveSubstitutionLevel != nil {
		return *x.PresolveSubstitutionLevel
	}
	return Default_SatParameters_PresolveSubstitutionLevel
}

func (x *SatParameters) GetPresolveExtractIntegerEnforcement() bool {
	if x != nil && x.PresolveExtractIntegerEnforcement != nil {
		return *x.PresolveExtractIntegerEnforcement
	}
	return Default_SatParameters_PresolveExtractIntegerEnforcement
}

func (x *SatParameters) GetPresolveInclusionWorkLimit() int64 {
	if x != nil && x.PresolveInclusionWorkLimit != nil {
		return *x.PresolveInclusionWorkLimit
	}
	return Default_SatParameters_PresolveInclusionWorkLimit
}

func (x *SatParameters) GetIgnoreNames() bool {
	if x != nil && x.IgnoreNames != nil {
		return *x.IgnoreNames
	}
	return Default_SatParameters_IgnoreNames
}

func (x *SatParameters) GetInferAllDiffs() bool {
	if x != nil && x.InferAllDiffs != nil {
		return *x.InferAllDiffs
	}
	return Default_SatParameters_InferAllDiffs
}

func (x *SatParameters) GetFindBigLinearOverlap() bool {
	if x != nil && x.FindBigLinearOverlap != nil {
		return *x.FindBigLinearOverlap
	}
	return Default_SatParameters_FindBigLinearOverlap
}

func (x *SatParameters) GetUseSatInprocessing() bool {
	if x != nil && x.UseSatInprocessing != nil {
		return *x.UseSatInprocessing
	}
	return Default_SatParameters_UseSatInprocessing
}

func (x *SatParameters) GetInprocessingDtimeRatio() float64 {
	if x != nil && x.InprocessingDtimeRatio != nil {
		return *x.InprocessingDtimeRatio
	}
	return Default_SatParameters_InprocessingDtimeRatio
}

func (x *SatParameters) GetInprocessingProbingDtime() float64 {
	if x != nil && x.InprocessingProbingDtime != nil {
		return *x.InprocessingProbingDtime
	}
	return Default_SatParameters_InprocessingProbingDtime
}

func (x *SatParameters) GetInprocessingMinimizationDtime() float64 {
	if x != nil && x.InprocessingMinimizationDtime != nil {
		return *x.InprocessingMinimizationDtime
	}
	return Default_SatParameters_InprocessingMinimizationDtime
}

func (x *SatParameters) GetNumWorkers() int32 {
	if x != nil && x.NumWorkers != nil {
		return *x.NumWorkers
	}
	return Default_SatParameters_NumWorkers
}

func (x *SatParameters) GetNumSearchWorkers() int32 {
	if x != nil && x.NumSearchWorkers != nil {
		return *x.NumSearchWorkers
	}
	return Default_SatParameters_NumSearchWorkers
}

func (x *SatParameters) GetMinNumLnsWorkers() int32 {
	if x != nil && x.MinNumLnsWorkers != nil {
		return *x.MinNumLnsWorkers
	}
	return Default_SatParameters_MinNumLnsWorkers
}

func (x *SatParameters) GetSubsolvers() []string {
	if x != nil {
		return x.Subsolvers
	}
	return nil
}

func (x *SatParameters) GetExtraSubsolvers() []string {
	if x != nil {
		return x.ExtraSubsolvers
	}
	return nil
}

func (x *SatParameters) GetIgnoreSubsolvers() []string {
	if x != nil {
		return x.IgnoreSubsolvers
	}
	return nil
}

func (x *SatParameters) GetSubsolverParams() []*SatParameters {
	if x != nil {
		return x.SubsolverParams
	}
	return nil
}

func (x *SatParameters) GetInterleaveSearch() bool {
	if x != nil && x.InterleaveSearch != nil {
		return *x.InterleaveSearch
	}
	return Default_SatParameters_InterleaveSearch
}

func (x *SatParameters) GetInterleaveBatchSize() int32 {
	if x != nil && x.InterleaveBatchSize != nil {
		return *x.InterleaveBatchSize
	}
	return Default_SatParameters_InterleaveBatchSize
}

func (x *SatParameters) GetShareObjectiveBounds() bool {
	if x != nil && x.ShareObjectiveBounds != nil {
		return *x.ShareObjectiveBounds
	}
	return Default_SatParameters_ShareObjectiveBounds
}

func (x *SatParameters) GetShareLevelZeroBounds() bool {
	if x != nil && x.ShareLevelZeroBounds != nil {
		return *x.ShareLevelZeroBounds
	}
	return Default_SatParameters_ShareLevelZeroBounds
}

func (x *SatParameters) GetShareBinaryClauses() bool {
	if x != nil && x.ShareBinaryClauses != nil {
		return *x.ShareBinaryClauses
	}
	return Default_SatParameters_ShareBinaryClauses
}

func (x *SatParameters) GetDebugPostsolveWithFullSolver() bool {
	if x != nil && x.DebugPostsolveWithFullSolver != nil {
		return *x.DebugPostsolveWithFullSolver
	}
	return Default_SatParameters_DebugPostsolveWithFullSolver
}

func (x *SatParameters) GetDebugMaxNumPresolveOperations() int32 {
	if x != nil && x.DebugMaxNumPresolveOperations != nil {
		return *x.DebugMaxNumPresolveOperations
	}
	return Default_SatParameters_DebugMaxNumPresolveOperations
}

func (x *SatParameters) GetDebugCrashOnBadHint() bool {
	if x != nil && x.DebugCrashOnBadHint != nil {
		return *x.DebugCrashOnBadHint
	}
	return Default_SatParameters_DebugCrashOnBadHint
}

func (x *SatParameters) GetUseOptimizationHints() bool {
	if x != nil && x.UseOptimizationHints != nil {
		return *x.UseOptimizationHints
	}
	return Default_SatParameters_UseOptimizationHints
}

func (x *SatParameters) GetCoreMinimizationLevel() int32 {
	if x != nil && x.CoreMinimizationLevel != nil {
		return *x.CoreMinimizationLevel
	}
	return Default_SatParameters_CoreMinimizationLevel
}

func (x *SatParameters) GetFindMultipleCores() bool {
	if x != nil && x.FindMultipleCores != nil {
		return *x.FindMultipleCores
	}
	return Default_SatParameters_FindMultipleCores
}

func (x *SatParameters) GetCoverOptimization() bool {
	if x != nil && x.CoverOptimization != nil {
		return *x.CoverOptimization
	}
	return Default_SatParameters_CoverOptimization
}

func (x *SatParameters) GetMaxSatAssumptionOrder() SatParameters_MaxSatAssumptionOrder {
	if x != nil && x.MaxSatAssumptionOrder != nil {
		return *x.MaxSatAssumptionOrder
	}
	return Default_SatParameters_MaxSatAssumptionOrder
}

func (x *SatParameters) GetMaxSatReverseAssumptionOrder() bool {
	if x != nil && x.MaxSatReverseAssumptionOrder != nil {
		return *x.MaxSatReverseAssumptionOrder
	}
	return Default_SatParameters_MaxSatReverseAssumptionOrder
}

func (x *SatParameters) GetMaxSatStratification() SatParameters_MaxSatStratificationAlgorithm {
	if x != nil && x.MaxSatStratification != nil {
		return *x.MaxSatStratification
	}
	return Default_SatParameters_MaxSatStratification
}

func (x *SatParameters) GetPropagationLoopDetectionFactor() float64 {
	if x != nil && x.PropagationLoopDetectionFactor != nil {
		return *x.PropagationLoopDetectionFactor
	}
	return Default_SatParameters_PropagationLoopDetectionFactor
}

func (x *SatParameters) GetUsePrecedencesInDisjunctiveConstraint() bool {
	if x != nil && x.UsePrecedencesInDisjunctiveConstraint != nil {
		return *x.UsePrecedencesInDisjunctiveConstraint
	}
	return Default_SatParameters_UsePrecedencesInDisjunctiveConstraint
}

func (x *SatParameters) GetMaxSizeToCreatePrecedenceLiteralsInDisjunctive() int32 {
	if x != nil && x.MaxSizeToCreatePrecedenceLiteralsInDisjunctive != nil {
		return *x.MaxSizeToCreatePrecedenceLiteralsInDisjunctive
	}
	return Default_SatParameters_MaxSizeToCreatePrecedenceLiteralsInDisjunctive
}

func (x *SatParameters) GetUseStrongPropagationInDisjunctive() bool {
	if x != nil && x.UseStrongPropagationInDisjunctive != nil {
		return *x.UseStrongPropagationInDisjunctive
	}
	return Default_SatParameters_UseStrongPropagationInDisjunctive
}

func (x *SatParameters) GetUseDynamicPrecedenceInDisjunctive() bool {
	if x != nil && x.UseDynamicPrecedenceInDisjunctive != nil {
		return *x.UseDynamicPrecedenceInDisjunctive
	}
	return Default_SatParameters_UseDynamicPrecedenceInDisjunctive
}

func (x *SatParameters) GetUseDynamicPrecedenceInCumulative() bool {
	if x != nil && x.UseDynamicPrecedenceInCumulative != nil {
		return *x.UseDynamicPrecedenceInCumulative
	}
	return Default_SatParameters_UseDynamicPrecedenceInCumulative
}

func (x *SatParameters) GetUseOverloadCheckerInCumulative() bool {
	if x != nil && x.UseOverloadCheckerInCumulative != nil {
		return *x.UseOverloadCheckerInCumulative
	}
	return Default_SatParameters_UseOverloadCheckerInCumulative
}

func (x *SatParameters) GetUseTimetableEdgeFindingInCumulative() bool {
	if x != nil && x.UseTimetableEdgeFindingInCumulative != nil {
		return *x.UseTimetableEdgeFindingInCumulative
	}
	return Default_SatParameters_UseTimetableEdgeFindingInCumulative
}

func (x *SatParameters) GetMaxNumIntervalsForTimetableEdgeFinding() int32 {
	if x != nil && x.MaxNumIntervalsForTimetableEdgeFinding != nil {
		return *x.MaxNumIntervalsForTimetableEdgeFinding
	}
	return Default_SatParameters_MaxNumIntervalsForTimetableEdgeFinding
}

func (x *SatParameters) GetUseHardPrecedencesInCumulative() bool {
	if x != nil && x.UseHardPrecedencesInCumulative != nil {
		return *x.UseHardPrecedencesInCumulative
	}
	return Default_SatParameters_UseHardPrecedencesInCumulative
}

func (x *SatParameters) GetExploitAllPrecedences() bool {
	if x != nil && x.ExploitAllPrecedences != nil {
		return *x.ExploitAllPrecedences
	}
	return Default_SatParameters_ExploitAllPrecedences
}

func (x *SatParameters) GetUseDisjunctiveConstraintInCumulative() bool {
	if x != nil && x.UseDisjunctiveConstraintInCumulative != nil {
		return *x.UseDisjunctiveConstraintInCumulative
	}
	return Default_SatParameters_UseDisjunctiveConstraintInCumulative
}

func (x *SatParameters) GetUseTimetablingInNoOverlap_2D() bool {
	if x != nil && x.UseTimetablingInNoOverlap_2D != nil {
		return *x.UseTimetablingInNoOverlap_2D
	}
	return Default_SatParameters_UseTimetablingInNoOverlap_2D
}

func (x *SatParameters) GetUseEnergeticReasoningInNoOverlap_2D() bool {
	if x != nil && x.UseEnergeticReasoningInNoOverlap_2D != nil {
		return *x.UseEnergeticReasoningInNoOverlap_2D
	}
	return Default_SatParameters_UseEnergeticReasoningInNoOverlap_2D
}

func (x *SatParameters) GetUseAreaEnergeticReasoningInNoOverlap_2D() bool {
	if x != nil && x.UseAreaEnergeticReasoningInNoOverlap_2D != nil {
		return *x.UseAreaEnergeticReasoningInNoOverlap_2D
	}
	return Default_SatParameters_UseAreaEnergeticReasoningInNoOverlap_2D
}

func (x *SatParameters) GetMaxPairsPairwiseReasoningInNoOverlap_2D() int32 {
	if x != nil && x.MaxPairsPairwiseReasoningInNoOverlap_2D != nil {
		return *x.MaxPairsPairwiseReasoningInNoOverlap_2D
	}
	return Default_SatParameters_MaxPairsPairwiseReasoningInNoOverlap_2D
}

func (x *SatParameters) GetUseDualSchedulingHeuristics() bool {
	if x != nil && x.UseDualSchedulingHeuristics != nil {
		return *x.UseDualSchedulingHeuristics
	}
	return Default_SatParameters_UseDualSchedulingHeuristics
}

func (x *SatParameters) GetSearchBranching() SatParameters_SearchBranching {
	if x != nil && x.SearchBranching != nil {
		return *x.SearchBranching
	}
	return Default_SatParameters_SearchBranching
}

func (x *SatParameters) GetHintConflictLimit() int32 {
	if x != nil && x.HintConflictLimit != nil {
		return *x.HintConflictLimit
	}
	return Default_SatParameters_HintConflictLimit
}

func (x *SatParameters) GetRepairHint() bool {
	if x != nil && x.RepairHint != nil {
		return *x.RepairHint
	}
	return Default_SatParameters_RepairHint
}

func (x *SatParameters) GetFixVariablesToTheirHintedValue() bool {
	if x != nil && x.FixVariablesToTheirHintedValue != nil {
		return *x.FixVariablesToTheirHintedValue
	}
	return Default_SatParameters_FixVariablesToTheirHintedValue
}

func (x *SatParameters) GetUseProbingSearch() bool {
	if x != nil && x.UseProbingSearch != nil {
		return *x.UseProbingSearch
	}
	return Default_SatParameters_UseProbingSearch
}

func (x *SatParameters) GetUseExtendedProbing() bool {
	if x != nil && x.UseExtendedProbing != nil {
		return *x.UseExtendedProbing
	}
	return Default_SatParameters_UseExtendedProbing
}

func (x *SatParameters) GetProbingNumCombinationsLimit() int32 {
	if x != nil && x.ProbingNumCombinationsLimit != nil {
		return *x.ProbingNumCombinationsLimit
	}
	return Default_SatParameters_ProbingNumCombinationsLimit
}

func (x *SatParameters) GetUseShavingInProbingSearch() bool {
	if x != nil && x.UseShavingInProbingSearch != nil {
		return *x.UseShavingInProbingSearch
	}
	return Default_SatParameters_UseShavingInProbingSearch
}

func (x *SatParameters) GetShavingSearchDeterministicTime() float64 {
	if x != nil && x.ShavingSearchDeterministicTime != nil {
		return *x.ShavingSearchDeterministicTime
	}
	return Default_SatParameters_ShavingSearchDeterministicTime
}

func (x *SatParameters) GetUseObjectiveLbSearch() bool {
	if x != nil && x.UseObjectiveLbSearch != nil {
		return *x.UseObjectiveLbSearch
	}
	return Default_SatParameters_UseObjectiveLbSearch
}

func (x *SatParameters) GetUseObjectiveShavingSearch() bool {
	if x != nil && x.UseObjectiveShavingSearch != nil {
		return *x.UseObjectiveShavingSearch
	}
	return Default_SatParameters_UseObjectiveShavingSearch
}

func (x *SatParameters) GetPseudoCostReliabilityThreshold() int64 {
	if x != nil && x.PseudoCostReliabilityThreshold != nil {
		return *x.PseudoCostReliabilityThreshold
	}
	return Default_SatParameters_PseudoCostReliabilityThreshold
}

func (x *SatParameters) GetOptimizeWithCore() bool {
	if x != nil && x.OptimizeWithCore != nil {
		return *x.OptimizeWithCore
	}
	return Default_SatParameters_OptimizeWithCore
}

func (x *SatParameters) GetOptimizeWithLbTreeSearch() bool {
	if x != nil && x.OptimizeWithLbTreeSearch != nil {
		return *x.OptimizeWithLbTreeSearch
	}
	return Default_SatParameters_OptimizeWithLbTreeSearch
}

func (x *SatParameters) GetBinarySearchNumConflicts() int32 {
	if x != nil && x.BinarySearchNumConflicts != nil {
		return *x.BinarySearchNumConflicts
	}
	return Default_SatParameters_BinarySearchNumConflicts
}

func (x *SatParameters) GetOptimizeWithMaxHs() bool {
	if x != nil && x.OptimizeWithMaxHs != nil {
		return *x.OptimizeWithMaxHs
	}
	return Default_SatParameters_OptimizeWithMaxHs
}

func (x *SatParameters) GetUseFeasibilityJump() bool {
	if x != nil && x.UseFeasibilityJump != nil {
		return *x.UseFeasibilityJump
	}
	return Default_SatParameters_UseFeasibilityJump
}

func (x *SatParameters) GetTestFeasibilityJump() bool {
	if x != nil && x.TestFeasibilityJump != nil {
		return *x.TestFeasibilityJump
	}
	return Default_SatParameters_TestFeasibilityJump
}

func (x *SatParameters) GetFeasibilityJumpDecay() float64 {
	if x != nil && x.FeasibilityJumpDecay != nil {
		return *x.FeasibilityJumpDecay
	}
	return Default_SatParameters_FeasibilityJumpDecay
}

func (x *SatParameters) GetFeasibilityJumpLinearizationLevel() int32 {
	if x != nil && x.FeasibilityJumpLinearizationLevel != nil {
		return *x.FeasibilityJumpLinearizationLevel
	}
	return Default_SatParameters_FeasibilityJumpLinearizationLevel
}

func (x *SatParameters) GetFeasibilityJumpRestartFactor() int32 {
	if x != nil && x.FeasibilityJumpRestartFactor != nil {
		return *x.FeasibilityJumpRestartFactor
	}
	return Default_SatParameters_FeasibilityJumpRestartFactor
}

func (x *SatParameters) GetFeasibilityJumpVarRandomizationProbability() float64 {
	if x != nil && x.FeasibilityJumpVarRandomizationProbability != nil {
		return *x.FeasibilityJumpVarRandomizationProbability
	}
	return Default_SatParameters_FeasibilityJumpVarRandomizationProbability
}

func (x *SatParameters) GetFeasibilityJumpVarPerburbationRangeRatio() float64 {
	if x != nil && x.FeasibilityJumpVarPerburbationRangeRatio != nil {
		return *x.FeasibilityJumpVarPerburbationRangeRatio
	}
	return Default_SatParameters_FeasibilityJumpVarPerburbationRangeRatio
}

func (x *SatParameters) GetFeasibilityJumpEnableRestarts() bool {
	if x != nil && x.FeasibilityJumpEnableRestarts != nil {
		return *x.FeasibilityJumpEnableRestarts
	}
	return Default_SatParameters_FeasibilityJumpEnableRestarts
}

func (x *SatParameters) GetFeasibilityJumpMaxExpandedConstraintSize() int32 {
	if x != nil && x.FeasibilityJumpMaxExpandedConstraintSize != nil {
		return *x.FeasibilityJumpMaxExpandedConstraintSize
	}
	return Default_SatParameters_FeasibilityJumpMaxExpandedConstraintSize
}

func (x *SatParameters) GetNumViolationLs() int32 {
	if x != nil && x.NumViolationLs != nil {
		return *x.NumViolationLs
	}
	return Default_SatParameters_NumViolationLs
}

func (x *SatParameters) GetViolationLsPerturbationPeriod() int32 {
	if x != nil && x.ViolationLsPerturbationPeriod != nil {
		return *x.ViolationLsPerturbationPeriod
	}
	return Default_SatParameters_ViolationLsPerturbationPeriod
}

func (x *SatParameters) GetViolationLsCompoundMoveProbability() float64 {
	if x != nil && x.ViolationLsCompoundMoveProbability != nil {
		return *x.ViolationLsCompoundMoveProbability
	}
	return Default_SatParameters_ViolationLsCompoundMoveProbability
}

func (x *SatParameters) GetSharedTreeNumWorkers() int32 {
	if x != nil && x.SharedTreeNumWorkers != nil {
		return *x.SharedTreeNumWorkers
	}
	return Default_SatParameters_SharedTreeNumWorkers
}

func (x *SatParameters) GetUseSharedTreeSearch() bool {
	if x != nil && x.UseSharedTreeSearch != nil {
		return *x.UseSharedTreeSearch
	}
	return Default_SatParameters_UseSharedTreeSearch
}

func (x *SatParameters) GetSharedTreeWorkerObjectiveSplitProbability() float64 {
	if x != nil && x.SharedTreeWorkerObjectiveSplitProbability != nil {
		return *x.SharedTreeWorkerObjectiveSplitProbability
	}
	return Default_SatParameters_SharedTreeWorkerObjectiveSplitProbability
}

func (x *SatParameters) GetSharedTreeMaxNodesPerWorker() int32 {
	if x != nil && x.SharedTreeMaxNodesPerWorker != nil {
		return *x.SharedTreeMaxNodesPerWorker
	}
	return Default_SatParameters_SharedTreeMaxNodesPerWorker
}

func (x *SatParameters) GetSharedTreeSplitStrategy() SatParameters_SharedTreeSplitStrategy {
	if x != nil && x.SharedTreeSplitStrategy != nil {
		return *x.SharedTreeSplitStrategy
	}
	return Default_SatParameters_SharedTreeSplitStrategy
}

func (x *SatParameters) GetEnumerateAllSolutions() bool {
	if x != nil && x.EnumerateAllSolutions != nil {
		return *x.EnumerateAllSolutions
	}
	return Default_SatParameters_EnumerateAllSolutions
}

func (x *SatParameters) GetKeepAllFeasibleSolutionsInPresolve() bool {
	if x != nil && x.KeepAllFeasibleSolutionsInPresolve != nil {
		return *x.KeepAllFeasibleSolutionsInPresolve
	}
	return Default_SatParameters_KeepAllFeasibleSolutionsInPresolve
}

func (x *SatParameters) GetFillTightenedDomainsInResponse() bool {
	if x != nil && x.FillTightenedDomainsInResponse != nil {
		return *x.FillTightenedDomainsInResponse
	}
	return Default_SatParameters_FillTightenedDomainsInResponse
}

func (x *SatParameters) GetFillAdditionalSolutionsInResponse() bool {
	if x != nil && x.FillAdditionalSolutionsInResponse != nil {
		return *x.FillAdditionalSolutionsInResponse
	}
	return Default_SatParameters_FillAdditionalSolutionsInResponse
}

func (x *SatParameters) GetInstantiateAllVariables() bool {
	if x != nil && x.InstantiateAllVariables != nil {
		return *x.InstantiateAllVariables
	}
	return Default_SatParameters_InstantiateAllVariables
}

func (x *SatParameters) GetAutoDetectGreaterThanAtLeastOneOf() bool {
	if x != nil && x.AutoDetectGreaterThanAtLeastOneOf != nil {
		return *x.AutoDetectGreaterThanAtLeastOneOf
	}
	return Default_SatParameters_AutoDetectGreaterThanAtLeastOneOf
}

func (x *SatParameters) GetStopAfterFirstSolution() bool {
	if x != nil && x.StopAfterFirstSolution != nil {
		return *x.StopAfterFirstSolution
	}
	return Default_SatParameters_StopAfterFirstSolution
}

func (x *SatParameters) GetStopAfterPresolve() bool {
	if x != nil && x.StopAfterPresolve != nil {
		return *x.StopAfterPresolve
	}
	return Default_SatParameters_StopAfterPresolve
}

func (x *SatParameters) GetStopAfterRootPropagation() bool {
	if x != nil && x.StopAfterRootPropagation != nil {
		return *x.StopAfterRootPropagation
	}
	return Default_SatParameters_StopAfterRootPropagation
}

func (x *SatParameters) GetUseLnsOnly() bool {
	if x != nil && x.UseLnsOnly != nil {
		return *x.UseLnsOnly
	}
	return Default_SatParameters_UseLnsOnly
}

func (x *SatParameters) GetSolutionPoolSize() int32 {
	if x != nil && x.SolutionPoolSize != nil {
		return *x.SolutionPoolSize
	}
	return Default_SatParameters_SolutionPoolSize
}

func (x *SatParameters) GetUseRinsLns() bool {
	if x != nil && x.UseRinsLns != nil {
		return *x.UseRinsLns
	}
	return Default_SatParameters_UseRinsLns
}

func (x *SatParameters) GetUseFeasibilityPump() bool {
	if x != nil && x.UseFeasibilityPump != nil {
		return *x.UseFeasibilityPump
	}
	return Default_SatParameters_UseFeasibilityPump
}

func (x *SatParameters) GetUseLbRelaxLns() bool {
	if x != nil && x.UseLbRelaxLns != nil {
		return *x.UseLbRelaxLns
	}
	return Default_SatParameters_UseLbRelaxLns
}

func (x *SatParameters) GetFpRounding() SatParameters_FPRoundingMethod {
	if x != nil && x.FpRounding != nil {
		return *x.FpRounding
	}
	return Default_SatParameters_FpRounding
}

func (x *SatParameters) GetDiversifyLnsParams() bool {
	if x != nil && x.DiversifyLnsParams != nil {
		return *x.DiversifyLnsParams
	}
	return Default_SatParameters_DiversifyLnsParams
}

func (x *SatParameters) GetRandomizeSearch() bool {
	if x != nil && x.RandomizeSearch != nil {
		return *x.RandomizeSearch
	}
	return Default_SatParameters_RandomizeSearch
}

func (x *SatParameters) GetSearchRandomVariablePoolSize() int64 {
	if x != nil && x.SearchRandomVariablePoolSize != nil {
		return *x.SearchRandomVariablePoolSize
	}
	return Default_SatParameters_SearchRandomVariablePoolSize
}

func (x *SatParameters) GetPushAllTasksTowardStart() bool {
	if x != nil && x.PushAllTasksTowardStart != nil {
		return *x.PushAllTasksTowardStart
	}
	return Default_SatParameters_PushAllTasksTowardStart
}

func (x *SatParameters) GetUseOptionalVariables() bool {
	if x != nil && x.UseOptionalVariables != nil {
		return *x.UseOptionalVariables
	}
	return Default_SatParameters_UseOptionalVariables
}

func (x *SatParameters) GetUseExactLpReason() bool {
	if x != nil && x.UseExactLpReason != nil {
		return *x.UseExactLpReason
	}
	return Default_SatParameters_UseExactLpReason
}

func (x *SatParameters) GetUseCombinedNoOverlap() bool {
	if x != nil && x.UseCombinedNoOverlap != nil {
		return *x.UseCombinedNoOverlap
	}
	return Default_SatParameters_UseCombinedNoOverlap
}

func (x *SatParameters) GetAtMostOneMaxExpansionSize() int32 {
	if x != nil && x.AtMostOneMaxExpansionSize != nil {
		return *x.AtMostOneMaxExpansionSize
	}
	return Default_SatParameters_AtMostOneMaxExpansionSize
}

func (x *SatParameters) GetCatchSigintSignal() bool {
	if x != nil && x.CatchSigintSignal != nil {
		return *x.CatchSigintSignal
	}
	return Default_SatParameters_CatchSigintSignal
}

func (x *SatParameters) GetUseImpliedBounds() bool {
	if x != nil && x.UseImpliedBounds != nil {
		return *x.UseImpliedBounds
	}
	return Default_SatParameters_UseImpliedBounds
}

func (x *SatParameters) GetPolishLpSolution() bool {
	if x != nil && x.PolishLpSolution != nil {
		return *x.PolishLpSolution
	}
	return Default_SatParameters_PolishLpSolution
}

func (x *SatParameters) GetLpPrimalTolerance() float64 {
	if x != nil && x.LpPrimalTolerance != nil {
		return *x.LpPrimalTolerance
	}
	return Default_SatParameters_LpPrimalTolerance
}

func (x *SatParameters) GetLpDualTolerance() float64 {
	if x != nil && x.LpDualTolerance != nil {
		return *x.LpDualTolerance
	}
	return Default_SatParameters_LpDualTolerance
}

func (x *SatParameters) GetConvertIntervals() bool {
	if x != nil && x.ConvertIntervals != nil {
		return *x.ConvertIntervals
	}
	return Default_SatParameters_ConvertIntervals
}

func (x *SatParameters) GetSymmetryLevel() int32 {
	if x != nil && x.SymmetryLevel != nil {
		return *x.SymmetryLevel
	}
	return Default_SatParameters_SymmetryLevel
}

func (x *SatParameters) GetNewLinearPropagation() bool {
	if x != nil && x.NewLinearPropagation != nil {
		return *x.NewLinearPropagation
	}
	return Default_SatParameters_NewLinearPropagation
}

func (x *SatParameters) GetLinearSplitSize() int32 {
	if x != nil && x.LinearSplitSize != nil {
		return *x.LinearSplitSize
	}
	return Default_SatParameters_LinearSplitSize
}

func (x *SatParameters) GetLinearizationLevel() int32 {
	if x != nil && x.LinearizationLevel != nil {
		return *x.LinearizationLevel
	}
	return Default_SatParameters_LinearizationLevel
}

func (x *SatParameters) GetBooleanEncodingLevel() int32 {
	if x != nil && x.BooleanEncodingLevel != nil {
		return *x.BooleanEncodingLevel
	}
	return Default_SatParameters_BooleanEncodingLevel
}

func (x *SatParameters) GetMaxDomainSizeWhenEncodingEqNeqConstraints() int32 {
	if x != nil && x.MaxDomainSizeWhenEncodingEqNeqConstraints != nil {
		return *x.MaxDomainSizeWhenEncodingEqNeqConstraints
	}
	return Default_SatParameters_MaxDomainSizeWhenEncodingEqNeqConstraints
}

func (x *SatParameters) GetMaxNumCuts() int32 {
	if x != nil && x.MaxNumCuts != nil {
		return *x.MaxNumCuts
	}
	return Default_SatParameters_MaxNumCuts
}

func (x *SatParameters) GetCutLevel() int32 {
	if x != nil && x.CutLevel != nil {
		return *x.CutLevel
	}
	return Default_SatParameters_CutLevel
}

func (x *SatParameters) GetOnlyAddCutsAtLevelZero() bool {
	if x != nil && x.OnlyAddCutsAtLevelZero != nil {
		return *x.OnlyAddCutsAtLevelZero
	}
	return Default_SatParameters_OnlyAddCutsAtLevelZero
}

func (x *SatParameters) GetAddObjectiveCut() bool {
	if x != nil && x.AddObjectiveCut != nil {
		return *x.AddObjectiveCut
	}
	return Default_SatParameters_AddObjectiveCut
}

func (x *SatParameters) GetAddCgCuts() bool {
	if x != nil && x.AddCgCuts != nil {
		return *x.AddCgCuts
	}
	return Default_SatParameters_AddCgCuts
}

func (x *SatParameters) GetAddMirCuts() bool {
	if x != nil && x.AddMirCuts != nil {
		return *x.AddMirCuts
	}
	return Default_SatParameters_AddMirCuts
}

func (x *SatParameters) GetAddZeroHalfCuts() bool {
	if x != nil && x.AddZeroHalfCuts != nil {
		return *x.AddZeroHalfCuts
	}
	return Default_SatParameters_AddZeroHalfCuts
}

func (x *SatParameters) GetAddCliqueCuts() bool {
	if x != nil && x.AddCliqueCuts != nil {
		return *x.AddCliqueCuts
	}
	return Default_SatParameters_AddCliqueCuts
}

func (x *SatParameters) GetAddRltCuts() bool {
	if x != nil && x.AddRltCuts != nil {
		return *x.AddRltCuts
	}
	return Default_SatParameters_AddRltCuts
}

func (x *SatParameters) GetMaxAllDiffCutSize() int32 {
	if x != nil && x.MaxAllDiffCutSize != nil {
		return *x.MaxAllDiffCutSize
	}
	return Default_SatParameters_MaxAllDiffCutSize
}

func (x *SatParameters) GetAddLinMaxCuts() bool {
	if x != nil && x.AddLinMaxCuts != nil {
		return *x.AddLinMaxCuts
	}
	return Default_SatParameters_AddLinMaxCuts
}

func (x *SatParameters) GetMaxIntegerRoundingScaling() int32 {
	if x != nil && x.MaxIntegerRoundingScaling != nil {
		return *x.MaxIntegerRoundingScaling
	}
	return Default_SatParameters_MaxIntegerRoundingScaling
}

func (x *SatParameters) GetAddLpConstraintsLazily() bool {
	if x != nil && x.AddLpConstraintsLazily != nil {
		return *x.AddLpConstraintsLazily
	}
	return Default_SatParameters_AddLpConstraintsLazily
}

func (x *SatParameters) GetRootLpIterations() int32 {
	if x != nil && x.RootLpIterations != nil {
		return *x.RootLpIterations
	}
	return Default_SatParameters_RootLpIterations
}

func (x *SatParameters) GetMinOrthogonalityForLpConstraints() float64 {
	if x != nil && x.MinOrthogonalityForLpConstraints != nil {
		return *x.MinOrthogonalityForLpConstraints
	}
	return Default_SatParameters_MinOrthogonalityForLpConstraints
}

func (x *SatParameters) GetMaxCutRoundsAtLevelZero() int32 {
	if x != nil && x.MaxCutRoundsAtLevelZero != nil {
		return *x.MaxCutRoundsAtLevelZero
	}
	return Default_SatParameters_MaxCutRoundsAtLevelZero
}

func (x *SatParameters) GetMaxConsecutiveInactiveCount() int32 {
	if x != nil && x.MaxConsecutiveInactiveCount != nil {
		return *x.MaxConsecutiveInactiveCount
	}
	return Default_SatParameters_MaxConsecutiveInactiveCount
}

func (x *SatParameters) GetCutMaxActiveCountValue() float64 {
	if x != nil && x.CutMaxActiveCountValue != nil {
		return *x.CutMaxActiveCountValue
	}
	return Default_SatParameters_CutMaxActiveCountValue
}

func (x *SatParameters) GetCutActiveCountDecay() float64 {
	if x != nil && x.CutActiveCountDecay != nil {
		return *x.CutActiveCountDecay
	}
	return Default_SatParameters_CutActiveCountDecay
}

func (x *SatParameters) GetCutCleanupTarget() int32 {
	if x != nil && x.CutCleanupTarget != nil {
		return *x.CutCleanupTarget
	}
	return Default_SatParameters_CutCleanupTarget
}

func (x *SatParameters) GetNewConstraintsBatchSize() int32 {
	if x != nil && x.NewConstraintsBatchSize != nil {
		return *x.NewConstraintsBatchSize
	}
	return Default_SatParameters_NewConstraintsBatchSize
}

func (x *SatParameters) GetExploitIntegerLpSolution() bool {
	if x != nil && x.ExploitIntegerLpSolution != nil {
		return *x.ExploitIntegerLpSolution
	}
	return Default_SatParameters_ExploitIntegerLpSolution
}

func (x *SatParameters) GetExploitAllLpSolution() bool {
	if x != nil && x.ExploitAllLpSolution != nil {
		return *x.ExploitAllLpSolution
	}
	return Default_SatParameters_ExploitAllLpSolution
}

func (x *SatParameters) GetExploitBestSolution() bool {
	if x != nil && x.ExploitBestSolution != nil {
		return *x.ExploitBestSolution
	}
	return Default_SatParameters_ExploitBestSolution
}

func (x *SatParameters) GetExploitRelaxationSolution() bool {
	if x != nil && x.ExploitRelaxationSolution != nil {
		return *x.ExploitRelaxationSolution
	}
	return Default_SatParameters_ExploitRelaxationSolution
}

func (x *SatParameters) GetExploitObjective() bool {
	if x != nil && x.ExploitObjective != nil {
		return *x.ExploitObjective
	}
	return Default_SatParameters_ExploitObjective
}

func (x *SatParameters) GetDetectLinearizedProduct() bool {
	if x != nil && x.DetectLinearizedProduct != nil {
		return *x.DetectLinearizedProduct
	}
	return Default_SatParameters_DetectLinearizedProduct
}

func (x *SatParameters) GetMipMaxBound() float64 {
	if x != nil && x.MipMaxBound != nil {
		return *x.MipMaxBound
	}
	return Default_SatParameters_MipMaxBound
}

func (x *SatParameters) GetMipVarScaling() float64 {
	if x != nil && x.MipVarScaling != nil {
		return *x.MipVarScaling
	}
	return Default_SatParameters_MipVarScaling
}

func (x *SatParameters) GetMipScaleLargeDomain() bool {
	if x != nil && x.MipScaleLargeDomain != nil {
		return *x.MipScaleLargeDomain
	}
	return Default_SatParameters_MipScaleLargeDomain
}

func (x *SatParameters) GetMipAutomaticallyScaleVariables() bool {
	if x != nil && x.MipAutomaticallyScaleVariables != nil {
		return *x.MipAutomaticallyScaleVariables
	}
	return Default_SatParameters_MipAutomaticallyScaleVariables
}

func (x *SatParameters) GetOnlySolveIp() bool {
	if x != nil && x.OnlySolveIp != nil {
		return *x.OnlySolveIp
	}
	return Default_SatParameters_OnlySolveIp
}

func (x *SatParameters) GetMipWantedPrecision() float64 {
	if x != nil && x.MipWantedPrecision != nil {
		return *x.MipWantedPrecision
	}
	return Default_SatParameters_MipWantedPrecision
}

func (x *SatParameters) GetMipMaxActivityExponent() int32 {
	if x != nil && x.MipMaxActivityExponent != nil {
		return *x.MipMaxActivityExponent
	}
	return Default_SatParameters_MipMaxActivityExponent
}

func (x *SatParameters) GetMipCheckPrecision() float64 {
	if x != nil && x.MipCheckPrecision != nil {
		return *x.MipCheckPrecision
	}
	return Default_SatParameters_MipCheckPrecision
}

func (x *SatParameters) GetMipComputeTrueObjectiveBound() bool {
	if x != nil && x.MipComputeTrueObjectiveBound != nil {
		return *x.MipComputeTrueObjectiveBound
	}
	return Default_SatParameters_MipComputeTrueObjectiveBound
}

func (x *SatParameters) GetMipMaxValidMagnitude() float64 {
	if x != nil && x.MipMaxValidMagnitude != nil {
		return *x.MipMaxValidMagnitude
	}
	return Default_SatParameters_MipMaxValidMagnitude
}

func (x *SatParameters) GetMipTreatHighMagnitudeBoundsAsInfinity() bool {
	if x != nil && x.MipTreatHighMagnitudeBoundsAsInfinity != nil {
		return *x.MipTreatHighMagnitudeBoundsAsInfinity
	}
	return Default_SatParameters_MipTreatHighMagnitudeBoundsAsInfinity
}

func (x *SatParameters) GetMipDropTolerance() float64 {
	if x != nil && x.MipDropTolerance != nil {
		return *x.MipDropTolerance
	}
	return Default_SatParameters_MipDropTolerance
}

func (x *SatParameters) GetMipPresolveLevel() int32 {
	if x != nil && x.MipPresolveLevel != nil {
		return *x.MipPresolveLevel
	}
	return Default_SatParameters_MipPresolveLevel
}

var File_ortools_sat_sat_parameters_proto protoreflect.FileDescriptor

var file_ortools_sat_sat_parameters_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6f, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x73, 0x61, 0x74, 0x2f, 0x73, 0x61,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x61, 0x74, 0x22, 0xc9, 0x88, 0x01, 0x0a,
	0x0d, 0x53, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x61,
	0x74, 0x2e, 0x53, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x08, 0x49,
	0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x6a, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x0e, 0x50, 0x4f, 0x4c, 0x41,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x1a, 0x70,
	0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x52, 0x18, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x3a,
	0x01, 0x30, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x35, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x33,
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x77, 0x61, 0x5f, 0x68, 0x65, 0x75, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x45, 0x72, 0x77, 0x61, 0x48, 0x65, 0x75, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x3f, 0x0a, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x27, 0x61, 0x6c, 0x73, 0x6f, 0x5f, 0x62, 0x75, 0x6d,
	0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x22, 0x61, 0x6c,
	0x73, 0x6f, 0x42, 0x75, 0x6d, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x12, 0x86, 0x01, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x3a, 0x09, 0x52, 0x45, 0x43, 0x55, 0x52, 0x53, 0x49,
	0x56, 0x45, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x9f, 0x01, 0x0a, 0x1d, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x4d, 0x69, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x3a, 0x19, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x49,
	0x4d, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x52, 0x1b,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x55, 0x0a, 0x24, 0x73,
	0x75, 0x62, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x21, 0x73, 0x75, 0x62, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x12, 0x39, 0x0a, 0x15, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x35, 0x0a,
	0x15, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52,
	0x13, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0xbe, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x3a, 0x03, 0x30, 0x2e, 0x35, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x84, 0x01, 0x0a,
	0x19, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0f, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x17, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x6c, 0x62, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x35, 0x52, 0x15, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x4c, 0x62, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x7e, 0x0a, 0x17, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x0f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x52, 0x15, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x35, 0x0a, 0x14, 0x70, 0x62, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x32,
	0x30, 0x30, 0x52, 0x12, 0x70, 0x62, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x62, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01,
	0x3a, 0x03, 0x30, 0x2e, 0x35, 0x52, 0x0e, 0x70, 0x62, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3b, 0x0a, 0x17, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x30, 0x2e, 0x38, 0x52, 0x15, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63,
	0x61, 0x79, 0x12, 0x45, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x06, 0x31, 0x65, 0x2b, 0x31, 0x30, 0x30, 0x52,
	0x18, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x11, 0x67, 0x6c, 0x75,
	0x63, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x3a, 0x04, 0x30, 0x2e, 0x39, 0x35, 0x52, 0x0f, 0x67, 0x6c, 0x75, 0x63,
	0x6f, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x63, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x17, 0x67,
	0x6c, 0x75, 0x63, 0x6f, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x04, 0x30, 0x2e,
	0x30, 0x31, 0x52, 0x15, 0x67, 0x6c, 0x75, 0x63, 0x6f, 0x73, 0x65, 0x44, 0x65, 0x63, 0x61, 0x79,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x1e, 0x67, 0x6c, 0x75,
	0x63, 0x6f, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x04, 0x35, 0x30, 0x30, 0x30, 0x52, 0x1b, 0x67, 0x6c, 0x75, 0x63, 0x6f, 0x73, 0x65,
	0x44, 0x65, 0x63, 0x61, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x39, 0x0a, 0x15, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x3a, 0x05, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x61, 0x79, 0x12,
	0x40, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x3a, 0x05, 0x31, 0x65, 0x2b, 0x32, 0x30, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x66, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2e, 0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x7f, 0x0a, 0x1a, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x41, 0x4c,
	0x55, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x2c, 0x4c, 0x42, 0x44, 0x5f,
	0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x2c, 0x44, 0x4c, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x02, 0x35, 0x30, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x35, 0x30, 0x52, 0x18,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x15, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x62, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x47, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x16, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4c, 0x62, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x37, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x1c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x04, 0x35, 0x30, 0x30, 0x30, 0x52, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x43, 0x0a, 0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x31, 0x2e, 0x34, 0x52, 0x19, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x25, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x21, 0x6e, 0x75, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x1e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x1b, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x01, 0x3a, 0x03, 0x69, 0x6e, 0x66, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x69, 0x6e, 0x66, 0x52, 0x14, 0x6d,
	0x61, 0x78, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x03, 0x3a, 0x13, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x32, 0x30, 0x33, 0x36,
	0x38, 0x35, 0x34, 0x37, 0x37, 0x35, 0x38, 0x30, 0x37, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x5f, 0x6d, 0x62, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x30,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x4d, 0x62, 0x12,
	0x35, 0x0a, 0x12, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x70, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x06, 0x30, 0x2e,
	0x30, 0x30, 0x30, 0x31, 0x52, 0x10, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x47, 0x61,
	0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x67, 0x61, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xa0, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x47, 0x61, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31,
	0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x19,
	0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x17, 0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79,
	0x12, 0x51, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x6c, 0x5f,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x41, 0x62, 0x73, 0x6c, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x12, 0x35, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x18, 0x6c, 0x6f,
	0x67, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x6c, 0x6f, 0x67, 0x53, 0x75, 0x62, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x29,
	0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18,
	0xba, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x6c, 0x6f,
	0x67, 0x54, 0x6f, 0x53, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x0f, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xbb, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x54,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x5f, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x50, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x27,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x62, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x23, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x62, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x1e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x62, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x1a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x73,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x49, 0x6e,
	0x4c, 0x62, 0x64, 0x12, 0x39, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f,
	0x62, 0x76, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x03, 0x35, 0x30, 0x30, 0x52, 0x14, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x42, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e,
	0x0a, 0x1a, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x62, 0x76, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x33, 0x52, 0x17, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x42,
	0x76, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4b,
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x1d, 0x70, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5c, 0x0a, 0x29, 0x70,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x02,
	0x33, 0x30, 0x52, 0x25, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x17, 0x70, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x15, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x76, 0x61, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x42, 0x76, 0x61, 0x12, 0x37, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x5f, 0x62, 0x76, 0x61, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x14, 0x70, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x42, 0x76, 0x61, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x3a, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8a, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x33, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x11,
	0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0f, 0x63,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x32, 0x52, 0x13, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x19, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x15, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x53, 0x61, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x16, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xd9,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x44, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x64, 0x69, 0x66,
	0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x64, 0x69, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x1c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x6f, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x6f, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x48,
	0x0a, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xb5,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1a, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x2d, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x28, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x1b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x0d, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x17, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4e, 0x6f, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x49, 0x0a, 0x1c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x73, 0x74,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x92, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x09, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x52, 0x17, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x4f, 0x6e,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x1b, 0x70, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x31, 0x52, 0x19, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x57,
	0x0a, 0x24, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x21, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x09, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x73, 0x18, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12,
	0x3c, 0x0a, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0xea, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x42, 0x69, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x37, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x12, 0x75, 0x73, 0x65, 0x53, 0x61, 0x74, 0x49, 0x6e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x18, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x91, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x30, 0x2e, 0x32, 0x52, 0x16,
	0x69, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x40, 0x0a, 0x1a, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x92, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x18,
	0x69, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x44, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x1f, 0x69, 0x6e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x93, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x1d, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e,
	0x75, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x12, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x13, 0x6d, 0x69,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x6e, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x10, 0x6d, 0x69, 0x6e,
	0x4e, 0x75, 0x6d, 0x4c, 0x6e, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x18, 0xcf, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x73, 0x18, 0xdb, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x53, 0x75, 0x62, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x18,
	0xd1, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0xd2, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x61, 0x74, 0x2e, 0x53, 0x61,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x11,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x30, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x16, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x17, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x72, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x37, 0x0a, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x12, 0x73, 0x68, 0x61, 0x72, 0x65, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x20, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18,
	0xa2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1c, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x21, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x1d, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x17, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x64, 0x5f,
	0x68, 0x69, 0x6e, 0x74, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x13, 0x64, 0x65, 0x62, 0x75, 0x67, 0x43, 0x72, 0x61, 0x73, 0x68, 0x4f, 0x6e,
	0x42, 0x61, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x75,
	0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x17, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x15, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34,
	0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x59, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x61, 0x78, 0x53, 0x61, 0x74, 0x41, 0x73, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x18, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x55, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x74, 0x41, 0x73, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x20, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1c, 0x6d, 0x61,
	0x78, 0x53, 0x61, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x73, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x4d, 0x61, 0x78, 0x53, 0x61, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x3a, 0x16, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53, 0x61,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x02, 0x31, 0x30, 0x52,
	0x1e, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x70,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x5e, 0x0a, 0x29, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x25, 0x75, 0x73, 0x65, 0x50, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x72, 0x0a, 0x35, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73,
	0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x02, 0x36, 0x30, 0x52, 0x2e, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x58, 0x0a, 0x25, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xe6, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x21, 0x75, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x58, 0x0a,
	0x25, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6a, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x87, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x21, 0x75, 0x73, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x44, 0x69, 0x73, 0x6a,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x56, 0x0a, 0x24, 0x75, 0x73, 0x65, 0x5f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x8c, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x20, 0x75,
	0x73, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x51, 0x0a, 0x22, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x1e, 0x75, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x5c, 0x0a, 0x28, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x23, 0x75, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x64, 0x67, 0x65, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x62, 0x0a, 0x2c, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x26, 0x6d, 0x61,
	0x78, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x64, 0x67, 0x65, 0x46, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x22, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1e, 0x75, 0x73, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x43, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x69, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x15, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x28, 0x75, 0x73, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x24, 0x75, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x43, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x20, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x32, 0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1b, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x4e, 0x6f, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x32, 0x64, 0x12, 0x5c, 0x0a, 0x28, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x32,
	0x64, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x22, 0x75, 0x73, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x4e, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x32, 0x64, 0x12, 0x65, 0x0a, 0x2d, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x5f, 0x32, 0x64, 0x18, 0x8f, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x26, 0x75, 0x73, 0x65, 0x41, 0x72, 0x65, 0x61, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x65, 0x74, 0x69, 0x63, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x4e,
	0x6f, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x32, 0x64, 0x12, 0x64, 0x0a, 0x2d, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x77, 0x69, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x32, 0x64, 0x18, 0x94, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x04, 0x31, 0x32, 0x35, 0x30, 0x52, 0x26, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x50, 0x61, 0x69, 0x72, 0x77, 0x69, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x4e, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x32, 0x64,
	0x12, 0x4a, 0x0a, 0x1e, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x1b, 0x75, 0x73, 0x65, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x48, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x73, 0x0a, 0x10,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x61, 0x74,
	0x2e, 0x53, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x3a, 0x10,
	0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x12, 0x33, 0x0a, 0x13, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x02, 0x31, 0x30, 0x52, 0x11, 0x68, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x53, 0x0a, 0x23, 0x66, 0x69, 0x78, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x1e, 0x66, 0x69, 0x78, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x54, 0x68, 0x65, 0x69, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x14, 0x75, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x18, 0x8d, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x12, 0x75, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x90, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x05, 0x32, 0x30,
	0x30, 0x30, 0x30, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x47, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x19,
	0x75, 0x73, 0x65, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x51, 0x0a, 0x21, 0x73, 0x68, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xcd,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x05, 0x30, 0x2e, 0x30, 0x30, 0x31, 0x52, 0x1e, 0x73, 0x68,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x17,
	0x75, 0x73, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x62,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x75, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4c, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x1c, 0x75,
	0x73, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0xfd, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x75, 0x73, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x4e, 0x0a, 0x21, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x03, 0x31, 0x30, 0x30, 0x52, 0x1e, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x43, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x1c, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x62, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x62, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x41, 0x0a, 0x1b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x18, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x73, 0x18, 0x55, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x78, 0x48, 0x73, 0x12, 0x37, 0x0a, 0x14,
	0x75, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x6a, 0x75, 0x6d, 0x70, 0x18, 0x89, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x12, 0x75, 0x73, 0x65, 0x46, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x65,
	0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x18, 0xf0,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x74, 0x65,
	0x73, 0x74, 0x46, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x6d,
	0x70, 0x12, 0x3b, 0x0a, 0x16, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x18, 0xf2, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x3a, 0x04, 0x30, 0x2e, 0x39, 0x35, 0x52, 0x14, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x6d, 0x70, 0x44, 0x65, 0x63, 0x61, 0x79, 0x12, 0x53,
	0x0a, 0x24, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x75,
	0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x81, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32,
	0x52, 0x21, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x6d,
	0x70, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x1f, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x82, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31,
	0x52, 0x1c, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x6d,
	0x70, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x66,
	0x0a, 0x2e, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x75,
	0x6d, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x2a, 0x66, 0x65, 0x61, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x6d, 0x70, 0x56, 0x61, 0x72, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x2d, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x62, 0x75, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03,
	0x30, 0x2e, 0x32, 0x52, 0x28, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4a, 0x75, 0x6d, 0x70, 0x56, 0x61, 0x72, 0x50, 0x65, 0x72, 0x62, 0x75, 0x72, 0x62, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x4e, 0x0a,
	0x20, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x75, 0x6d,
	0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x1d,
	0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x6d, 0x70, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x65, 0x0a,
	0x2d, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x75, 0x6d,
	0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x88,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x28, 0x66, 0x65, 0x61, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x73, 0x18, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x30, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x73, 0x12, 0x4d, 0x0a, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31,
	0x30, 0x30, 0x52, 0x1d, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x73, 0x50,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x58, 0x0a, 0x26, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x83, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x3a, 0x03, 0x30, 0x2e, 0x35, 0x52, 0x22, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x17, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30,
	0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0xec, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x67, 0x0a, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xed, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x30, 0x2e,
	0x35, 0x52, 0x29, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x20,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x18, 0xee, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31, 0x32, 0x38, 0x52, 0x1b, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72,
	0x65, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x3a,
	0x13, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x52, 0x17, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x3d, 0x0a,
	0x17, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x57, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x27,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x22, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x6c, 0x46, 0x65,
	0x61, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x50, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x52, 0x0a, 0x22, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x74, 0x69, 0x67, 0x68, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1e, 0x66,
	0x69, 0x6c, 0x6c, 0x54, 0x69, 0x67, 0x68, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x25, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x21, 0x66, 0x69, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x28, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x6f,
	0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x21, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x47, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x4f,
	0x6e, 0x65, 0x4f, 0x66, 0x12, 0x40, 0x0a, 0x19, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x62, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16,
	0x73, 0x74, 0x6f, 0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x95, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x73, 0x74, 0x6f,
	0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x45,
	0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfc, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x73, 0x74, 0x6f,
	0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6e, 0x73,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4c, 0x6e, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x30,
	0x0a, 0x12, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x33, 0x52, 0x10,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x27, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x69, 0x6e, 0x73, 0x5f, 0x6c, 0x6e, 0x73,
	0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x52, 0x69, 0x6e, 0x73, 0x4c, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x14, 0x75, 0x73, 0x65,
	0x5f, 0x66, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x6d,
	0x70, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x12,
	0x75, 0x73, 0x65, 0x46, 0x65, 0x61, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x75,
	0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x62, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x78, 0x5f, 0x6c, 0x6e, 0x73, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x4c, 0x62, 0x52, 0x65, 0x6c, 0x61, 0x78,
	0x4c, 0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x0b, 0x66, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x73, 0x61, 0x74, 0x2e, 0x53, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x46, 0x50, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x3a, 0x14, 0x50, 0x52, 0x4f, 0x50, 0x41, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x45, 0x44, 0x52, 0x0a, 0x66, 0x70, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x14, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66,
	0x79, 0x5f, 0x6c, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x89, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x64, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x66, 0x79, 0x4c, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x30,
	0x0a, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x67, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x49, 0x0a, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x1c, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x1b, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x74, 0x6f,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x86, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x17, 0x70, 0x75, 0x73, 0x68, 0x41, 0x6c,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x3b, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x70, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4c, 0x70, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x75, 0x73,
	0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x12, 0x45, 0x0a, 0x1e, 0x61, 0x74, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x6e,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x33, 0x52, 0x19,
	0x61, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x4d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x13, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x11, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x12, 0x33, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x12, 0x70, 0x6f, 0x6c, 0x69, 0x73, 0x68, 0x5f,
	0x6c, 0x70, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xaf, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x73,
	0x68, 0x4c, 0x70, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x13, 0x6c,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x8a, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x05, 0x31, 0x65, 0x2d, 0x30, 0x37,
	0x52, 0x11, 0x6c, 0x70, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x11, 0x6c, 0x70, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x8b, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a,
	0x05, 0x31, 0x65, 0x2d, 0x30, 0x37, 0x52, 0x0f, 0x6c, 0x70, 0x44, 0x75, 0x61, 0x6c, 0x54, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0xb1, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xb7, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x0d, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x16, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14,
	0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x16, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x14, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x68, 0x0a, 0x30, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x71, 0x5f, 0x6e, 0x65, 0x71, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02,
	0x31, 0x36, 0x52, 0x29, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a,
	0x65, 0x57, 0x68, 0x65, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x4e,
	0x65, 0x71, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x18, 0x5b, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x43, 0x75, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x75, 0x74, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x08, 0x63,
	0x75, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x1b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x16, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x64, 0x64, 0x43, 0x75, 0x74, 0x73,
	0x41, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x12, 0x32, 0x0a, 0x11, 0x61,
	0x64, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x75, 0x74,
	0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f,
	0x61, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x75, 0x74, 0x12,
	0x24, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x67, 0x5f, 0x63, 0x75, 0x74, 0x73, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x43,
	0x67, 0x43, 0x75, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x69, 0x72,
	0x5f, 0x63, 0x75, 0x74, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x4d, 0x69, 0x72, 0x43, 0x75, 0x74, 0x73, 0x12, 0x32, 0x0a,
	0x12, 0x61, 0x64, 0x64, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x63,
	0x75, 0x74, 0x73, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x0f, 0x61, 0x64, 0x64, 0x5a, 0x65, 0x72, 0x6f, 0x48, 0x61, 0x6c, 0x66, 0x43, 0x75, 0x74,
	0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x63, 0x75, 0x74, 0x73, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x43, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x43, 0x75, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x6c, 0x74, 0x5f, 0x63, 0x75, 0x74, 0x73,
	0x18, 0x97, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x52, 0x6c, 0x74, 0x43, 0x75, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x15, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x63, 0x75, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x36, 0x34, 0x52, 0x11, 0x6d,
	0x61, 0x78, 0x41, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x43, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2e, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x75, 0x74, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x75, 0x74, 0x73,
	0x12, 0x44, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x77, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x36, 0x30, 0x30, 0x52, 0x19, 0x6d, 0x61, 0x78,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x61, 0x7a,
	0x69, 0x6c, 0x79, 0x18, 0x70, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x16, 0x61, 0x64, 0x64, 0x4c, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x4c, 0x61, 0x7a, 0x69, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x12, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x6c, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe3, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x04, 0x32, 0x30, 0x30, 0x30, 0x52, 0x10, 0x72, 0x6f, 0x6f, 0x74,
	0x4c, 0x70, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x24,
	0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x04, 0x30, 0x2e, 0x30, 0x35,
	0x52, 0x20, 0x6d, 0x69, 0x6e, 0x4f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x46, 0x6f, 0x72, 0x4c, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x7a, 0x65,
	0x72, 0x6f, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x17, 0x6d, 0x61,
	0x78, 0x43, 0x75, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x5a, 0x65, 0x72, 0x6f, 0x12, 0x48, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x79, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31,
	0x30, 0x30, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x1a, 0x63, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x9b, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x3a, 0x0b, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x52, 0x16, 0x63, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x16, 0x63, 0x75, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x63, 0x61, 0x79, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x30, 0x2e, 0x38, 0x52,
	0x13, 0x63, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x65, 0x63, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x75, 0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x52, 0x10, 0x63, 0x75, 0x74, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x1a, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x35,
	0x30, 0x52, 0x17, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x1b, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x70,
	0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x18, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x4c, 0x70, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6c,
	0x70, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x74, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x41,
	0x6c, 0x6c, 0x4c, 0x70, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x15,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x42, 0x65, 0x73, 0x74,
	0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x78, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x19, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x95, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x17, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x6d, 0x69, 0x70, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x01, 0x3a,
	0x08, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0b, 0x6d, 0x69, 0x70, 0x4d, 0x61,
	0x78, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x6d, 0x69, 0x70, 0x5f, 0x76, 0x61,
	0x72, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x01, 0x3a,
	0x01, 0x31, 0x52, 0x0d, 0x6d, 0x69, 0x70, 0x56, 0x61, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x3b, 0x0a, 0x16, 0x6d, 0x69, 0x70, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6c,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0xe1, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x6d, 0x69, 0x70, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x50,
	0x0a, 0x21, 0x6d, 0x69, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x1e, 0x6d, 0x69, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x69,
	0x70, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x70, 0x12, 0x37, 0x0a, 0x14,
	0x6d, 0x69, 0x70, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x05, 0x31, 0x65, 0x2d, 0x30,
	0x36, 0x52, 0x12, 0x6d, 0x69, 0x70, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x19, 0x6d, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x35, 0x33, 0x52, 0x16, 0x6d, 0x69,
	0x70, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x13, 0x6d, 0x69, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x3a, 0x06, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x52, 0x11, 0x6d, 0x69, 0x70, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a,
	0x20, 0x6d, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x75,
	0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x1c,
	0x6d, 0x69, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x72, 0x75, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x17,
	0x6d, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6d, 0x61,
	0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x05,
	0x31, 0x65, 0x2b, 0x32, 0x30, 0x52, 0x14, 0x6d, 0x69, 0x70, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x2b, 0x6d,
	0x69, 0x70, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6d, 0x61,
	0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x61,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x96, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x25, 0x6d, 0x69, 0x70, 0x54, 0x72, 0x65,
	0x61, 0x74, 0x48, 0x69, 0x67, 0x68, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x41, 0x73, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12,
	0x34, 0x0a, 0x12, 0x6d, 0x69, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x05, 0x31, 0x65,
	0x2d, 0x31, 0x36, 0x52, 0x10, 0x6d, 0x69, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x6d, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x85, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x10, 0x6d, 0x69, 0x70, 0x50, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x48, 0x0a, 0x0d, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x49, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x02, 0x22, 0x46, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x41, 0x4c,
	0x53, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x02, 0x22, 0x56, 0x0a, 0x1d, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x55, 0x52, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10,
	0x03, 0x22, 0xe0, 0x01, 0x0a, 0x19, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x4e,
	0x49, 0x4d, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x37, 0x0a, 0x33, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x49,
	0x4e, 0x49, 0x4d, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x22, 0x52, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x54,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x57, 0x41,
	0x59, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x42, 0x44, 0x10, 0x02, 0x22, 0x35, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x42, 0x44, 0x10, 0x01, 0x22,
	0x86, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x55, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4c, 0x5f, 0x4d, 0x4f, 0x56,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x42, 0x44, 0x5f, 0x4d, 0x4f, 0x56,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x22, 0x74, 0x0a, 0x15, 0x4d, 0x61, 0x78, 0x53,
	0x61, 0x74, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x53, 0x53,
	0x55, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x55, 0x4d, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53, 0x55, 0x4d, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x22, 0x6f,
	0x0a, 0x1d, 0x4d, 0x61, 0x78, 0x53, 0x61, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x22,
	0xe1, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x58,
	0x45, 0x44, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x4f, 0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x50, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54,
	0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x46, 0x49,
	0x58, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x10, 0x08, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x72,
	0x65, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47,
	0x59, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x50, 0x4c, 0x49,
	0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x52,
	0x45, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x50, 0x4c, 0x49,
	0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x42, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x50, 0x4c,
	0x49, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x50, 0x4c, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x04, 0x22, 0x68,
	0x0a, 0x10, 0x46, 0x50, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x41, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x52, 0x4f, 0x50, 0x41, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x68, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x73,
	0x61, 0x74, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x67,
	0x6f, 0x2f, 0x6f, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x73, 0x61, 0x74, 0xaa, 0x02, 0x12,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x4f, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x53,
	0x61, 0x74,
}

var (
	file_ortools_sat_sat_parameters_proto_rawDescOnce sync.Once
	file_ortools_sat_sat_parameters_proto_rawDescData = file_ortools_sat_sat_parameters_proto_rawDesc
)

func file_ortools_sat_sat_parameters_proto_rawDescGZIP() []byte {
	file_ortools_sat_sat_parameters_proto_rawDescOnce.Do(func() {
		file_ortools_sat_sat_parameters_proto_rawDescData = protoimpl.X.CompressGZIP(file_ortools_sat_sat_parameters_proto_rawDescData)
	})
	return file_ortools_sat_sat_parameters_proto_rawDescData
}

var file_ortools_sat_sat_parameters_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_ortools_sat_sat_parameters_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ortools_sat_sat_parameters_proto_goTypes = []interface{}{
	(SatParameters_VariableOrder)(0),                 // 0: operations_research.sat.SatParameters.VariableOrder
	(SatParameters_Polarity)(0),                      // 1: operations_research.sat.SatParameters.Polarity
	(SatParameters_ConflictMinimizationAlgorithm)(0), // 2: operations_research.sat.SatParameters.ConflictMinimizationAlgorithm
	(SatParameters_BinaryMinizationAlgorithm)(0),     // 3: operations_research.sat.SatParameters.BinaryMinizationAlgorithm
	(SatParameters_ClauseProtection)(0),              // 4: operations_research.sat.SatParameters.ClauseProtection
	(SatParameters_ClauseOrdering)(0),                // 5: operations_research.sat.SatParameters.ClauseOrdering
	(SatParameters_RestartAlgorithm)(0),              // 6: operations_research.sat.SatParameters.RestartAlgorithm
	(SatParameters_MaxSatAssumptionOrder)(0),         // 7: operations_research.sat.SatParameters.MaxSatAssumptionOrder
	(SatParameters_MaxSatStratificationAlgorithm)(0), // 8: operations_research.sat.SatParameters.MaxSatStratificationAlgorithm
	(SatParameters_SearchBranching)(0),               // 9: operations_research.sat.SatParameters.SearchBranching
	(SatParameters_SharedTreeSplitStrategy)(0),       // 10: operations_research.sat.SatParameters.SharedTreeSplitStrategy
	(SatParameters_FPRoundingMethod)(0),              // 11: operations_research.sat.SatParameters.FPRoundingMethod
	(*SatParameters)(nil),                            // 12: operations_research.sat.SatParameters
}
var file_ortools_sat_sat_parameters_proto_depIdxs = []int32{
	0,  // 0: operations_research.sat.SatParameters.preferred_variable_order:type_name -> operations_research.sat.SatParameters.VariableOrder
	1,  // 1: operations_research.sat.SatParameters.initial_polarity:type_name -> operations_research.sat.SatParameters.Polarity
	2,  // 2: operations_research.sat.SatParameters.minimization_algorithm:type_name -> operations_research.sat.SatParameters.ConflictMinimizationAlgorithm
	3,  // 3: operations_research.sat.SatParameters.binary_minimization_algorithm:type_name -> operations_research.sat.SatParameters.BinaryMinizationAlgorithm
	4,  // 4: operations_research.sat.SatParameters.clause_cleanup_protection:type_name -> operations_research.sat.SatParameters.ClauseProtection
	5,  // 5: operations_research.sat.SatParameters.clause_cleanup_ordering:type_name -> operations_research.sat.SatParameters.ClauseOrdering
	6,  // 6: operations_research.sat.SatParameters.restart_algorithms:type_name -> operations_research.sat.SatParameters.RestartAlgorithm
	12, // 7: operations_research.sat.SatParameters.subsolver_params:type_name -> operations_research.sat.SatParameters
	7,  // 8: operations_research.sat.SatParameters.max_sat_assumption_order:type_name -> operations_research.sat.SatParameters.MaxSatAssumptionOrder
	8,  // 9: operations_research.sat.SatParameters.max_sat_stratification:type_name -> operations_research.sat.SatParameters.MaxSatStratificationAlgorithm
	9,  // 10: operations_research.sat.SatParameters.search_branching:type_name -> operations_research.sat.SatParameters.SearchBranching
	10, // 11: operations_research.sat.SatParameters.shared_tree_split_strategy:type_name -> operations_research.sat.SatParameters.SharedTreeSplitStrategy
	11, // 12: operations_research.sat.SatParameters.fp_rounding:type_name -> operations_research.sat.SatParameters.FPRoundingMethod
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_ortools_sat_sat_parameters_proto_init() }
func file_ortools_sat_sat_parameters_proto_init() {
	if File_ortools_sat_sat_parameters_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ortools_sat_sat_parameters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SatParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ortools_sat_sat_parameters_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ortools_sat_sat_parameters_proto_goTypes,
		DependencyIndexes: file_ortools_sat_sat_parameters_proto_depIdxs,
		EnumInfos:         file_ortools_sat_sat_parameters_proto_enumTypes,
		MessageInfos:      file_ortools_sat_sat_parameters_proto_msgTypes,
	}.Build()
	File_ortools_sat_sat_parameters_proto = out.File
	file_ortools_sat_sat_parameters_proto_rawDesc = nil
	file_ortools_sat_sat_parameters_proto_goTypes = nil
	file_ortools_sat_sat_parameters_proto_depIdxs = nil
}
