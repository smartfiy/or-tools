// Copyright 2010-2024 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Enums used to define routing parameters.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: ortools/constraint_solver/routing_enums.proto

package constraintsolver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FirstSolutionStrategy_Value int32

const (
	// See the homonymous value in LocalSearchMetaheuristic.
	FirstSolutionStrategy_UNSET FirstSolutionStrategy_Value = 0
	// Lets the solver detect which strategy to use according to the model being
	// solved.
	FirstSolutionStrategy_AUTOMATIC FirstSolutionStrategy_Value = 15
	// --- Path addition heuristics ---
	// Starting from a route "start" node, connect it to the node which produces
	// the cheapest route segment, then extend the route by iterating on the
	// last node added to the route.
	FirstSolutionStrategy_PATH_CHEAPEST_ARC FirstSolutionStrategy_Value = 3
	// Same as PATH_CHEAPEST_ARC, but arcs are evaluated with a comparison-based
	// selector which will favor the most constrained arc first. To assign a
	// selector to the routing model, see
	// RoutingModel::ArcIsMoreConstrainedThanArc() in routing.h for details.
	FirstSolutionStrategy_PATH_MOST_CONSTRAINED_ARC FirstSolutionStrategy_Value = 4
	// Same as PATH_CHEAPEST_ARC, except that arc costs are evaluated using the
	// function passed to RoutingModel::SetFirstSolutionEvaluator()
	// (cf. routing.h).
	FirstSolutionStrategy_EVALUATOR_STRATEGY FirstSolutionStrategy_Value = 5
	// Savings algorithm (Clarke & Wright).
	// Reference: Clarke, G. & Wright, J.W.:
	// "Scheduling of Vehicles from a Central Depot to a Number of Delivery
	// Points", Operations Research, Vol. 12, 1964, pp. 568-581
	FirstSolutionStrategy_SAVINGS FirstSolutionStrategy_Value = 10
	// Sweep algorithm (Wren & Holliday).
	// Reference: Anthony Wren & Alan Holliday: Computer Scheduling of Vehicles
	// from One or More Depots to a Number of Delivery Points Operational
	// Research Quarterly (1970-1977),
	// Vol. 23, No. 3 (Sep., 1972), pp. 333-344
	FirstSolutionStrategy_SWEEP FirstSolutionStrategy_Value = 11
	// Christofides algorithm (actually a variant of the Christofides algorithm
	// using a maximal matching instead of a maximum matching, which does
	// not guarantee the 3/2 factor of the approximation on a metric travelling
	// salesman). Works on generic vehicle routing models by extending a route
	// until no nodes can be inserted on it.
	// Reference: Nicos Christofides, Worst-case analysis of a new heuristic for
	// the travelling salesman problem, Report 388, Graduate School of
	// Industrial Administration, CMU, 1976.
	FirstSolutionStrategy_CHRISTOFIDES FirstSolutionStrategy_Value = 13
	// --- Path insertion heuristics ---
	// Make all nodes inactive. Only finds a solution if nodes are optional (are
	// element of a disjunction constraint with a finite penalty cost).
	FirstSolutionStrategy_ALL_UNPERFORMED FirstSolutionStrategy_Value = 6
	// Iteratively build a solution by inserting the cheapest node at its
	// cheapest position; the cost of insertion is based on the global cost
	// function of the routing model. As of 2/2012, only works on models with
	// optional nodes (with finite penalty costs).
	FirstSolutionStrategy_BEST_INSERTION FirstSolutionStrategy_Value = 7
	// Iteratively build a solution by inserting the cheapest node at its
	// cheapest position; the cost of insertion is based on the arc cost
	// function. Is faster than BEST_INSERTION.
	FirstSolutionStrategy_PARALLEL_CHEAPEST_INSERTION FirstSolutionStrategy_Value = 8
	// Iteratively build a solution by constructing routes sequentially, for
	// each route inserting the cheapest node at its cheapest position until the
	// route is completed; the cost of insertion is based on the arc cost
	// function. Is faster than PARALLEL_CHEAPEST_INSERTION.
	FirstSolutionStrategy_SEQUENTIAL_CHEAPEST_INSERTION FirstSolutionStrategy_Value = 14
	// Iteratively build a solution by inserting each node at its cheapest
	// position; the cost of insertion is based on the arc cost function.
	// Differs from PARALLEL_CHEAPEST_INSERTION by the node selected for
	// insertion; here nodes are considered in decreasing order of distance to
	// the start/ends of the routes, i.e. farthest nodes are inserted first.
	// Is faster than SEQUENTIAL_CHEAPEST_INSERTION.
	FirstSolutionStrategy_LOCAL_CHEAPEST_INSERTION FirstSolutionStrategy_Value = 9
	// Same as LOCAL_CHEAPEST_INSERTION except that the cost of insertion is
	// based on the routing model cost function instead of arc costs only.
	FirstSolutionStrategy_LOCAL_CHEAPEST_COST_INSERTION FirstSolutionStrategy_Value = 16
	// --- Variable-based heuristics ---
	// Iteratively connect two nodes which produce the cheapest route segment.
	FirstSolutionStrategy_GLOBAL_CHEAPEST_ARC FirstSolutionStrategy_Value = 1
	// Select the first node with an unbound successor and connect it to the
	// node which produces the cheapest route segment.
	FirstSolutionStrategy_LOCAL_CHEAPEST_ARC FirstSolutionStrategy_Value = 2
	// Select the first node with an unbound successor and connect it to the
	// first available node.
	// This is equivalent to the CHOOSE_FIRST_UNBOUND strategy combined with
	// ASSIGN_MIN_VALUE (cf. constraint_solver.h).
	FirstSolutionStrategy_FIRST_UNBOUND_MIN_VALUE FirstSolutionStrategy_Value = 12
)

// Enum value maps for FirstSolutionStrategy_Value.
var (
	FirstSolutionStrategy_Value_name = map[int32]string{
		0:  "UNSET",
		15: "AUTOMATIC",
		3:  "PATH_CHEAPEST_ARC",
		4:  "PATH_MOST_CONSTRAINED_ARC",
		5:  "EVALUATOR_STRATEGY",
		10: "SAVINGS",
		11: "SWEEP",
		13: "CHRISTOFIDES",
		6:  "ALL_UNPERFORMED",
		7:  "BEST_INSERTION",
		8:  "PARALLEL_CHEAPEST_INSERTION",
		14: "SEQUENTIAL_CHEAPEST_INSERTION",
		9:  "LOCAL_CHEAPEST_INSERTION",
		16: "LOCAL_CHEAPEST_COST_INSERTION",
		1:  "GLOBAL_CHEAPEST_ARC",
		2:  "LOCAL_CHEAPEST_ARC",
		12: "FIRST_UNBOUND_MIN_VALUE",
	}
	FirstSolutionStrategy_Value_value = map[string]int32{
		"UNSET":                         0,
		"AUTOMATIC":                     15,
		"PATH_CHEAPEST_ARC":             3,
		"PATH_MOST_CONSTRAINED_ARC":     4,
		"EVALUATOR_STRATEGY":            5,
		"SAVINGS":                       10,
		"SWEEP":                         11,
		"CHRISTOFIDES":                  13,
		"ALL_UNPERFORMED":               6,
		"BEST_INSERTION":                7,
		"PARALLEL_CHEAPEST_INSERTION":   8,
		"SEQUENTIAL_CHEAPEST_INSERTION": 14,
		"LOCAL_CHEAPEST_INSERTION":      9,
		"LOCAL_CHEAPEST_COST_INSERTION": 16,
		"GLOBAL_CHEAPEST_ARC":           1,
		"LOCAL_CHEAPEST_ARC":            2,
		"FIRST_UNBOUND_MIN_VALUE":       12,
	}
)

func (x FirstSolutionStrategy_Value) Enum() *FirstSolutionStrategy_Value {
	p := new(FirstSolutionStrategy_Value)
	*p = x
	return p
}

func (x FirstSolutionStrategy_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirstSolutionStrategy_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_constraint_solver_routing_enums_proto_enumTypes[0].Descriptor()
}

func (FirstSolutionStrategy_Value) Type() protoreflect.EnumType {
	return &file_ortools_constraint_solver_routing_enums_proto_enumTypes[0]
}

func (x FirstSolutionStrategy_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirstSolutionStrategy_Value.Descriptor instead.
func (FirstSolutionStrategy_Value) EnumDescriptor() ([]byte, []int) {
	return file_ortools_constraint_solver_routing_enums_proto_rawDescGZIP(), []int{0, 0}
}

type LocalSearchMetaheuristic_Value int32

const (
	// Means "not set". If the solver sees that, it'll behave like for
	// AUTOMATIC. But this value won't override others upon a proto MergeFrom(),
	// whereas "AUTOMATIC" will.
	LocalSearchMetaheuristic_UNSET LocalSearchMetaheuristic_Value = 0
	// Lets the solver select the metaheuristic.
	LocalSearchMetaheuristic_AUTOMATIC LocalSearchMetaheuristic_Value = 6
	// Accepts improving (cost-reducing) local search neighbors until a local
	// minimum is reached.
	LocalSearchMetaheuristic_GREEDY_DESCENT LocalSearchMetaheuristic_Value = 1
	// Uses guided local search to escape local minima
	// (cf. http://en.wikipedia.org/wiki/Guided_Local_Search); this is generally
	// the most efficient metaheuristic for vehicle routing.
	LocalSearchMetaheuristic_GUIDED_LOCAL_SEARCH LocalSearchMetaheuristic_Value = 2
	// Uses simulated annealing to escape local minima
	// (cf. http://en.wikipedia.org/wiki/Simulated_annealing).
	LocalSearchMetaheuristic_SIMULATED_ANNEALING LocalSearchMetaheuristic_Value = 3
	// Uses tabu search to escape local minima
	// (cf. http://en.wikipedia.org/wiki/Tabu_search).
	LocalSearchMetaheuristic_TABU_SEARCH LocalSearchMetaheuristic_Value = 4
	// Uses tabu search on a list of variables to escape local minima. The list
	// of variables to use must be provided via the SetTabuVarsCallback
	// callback.
	LocalSearchMetaheuristic_GENERIC_TABU_SEARCH LocalSearchMetaheuristic_Value = 5
)

// Enum value maps for LocalSearchMetaheuristic_Value.
var (
	LocalSearchMetaheuristic_Value_name = map[int32]string{
		0: "UNSET",
		6: "AUTOMATIC",
		1: "GREEDY_DESCENT",
		2: "GUIDED_LOCAL_SEARCH",
		3: "SIMULATED_ANNEALING",
		4: "TABU_SEARCH",
		5: "GENERIC_TABU_SEARCH",
	}
	LocalSearchMetaheuristic_Value_value = map[string]int32{
		"UNSET":               0,
		"AUTOMATIC":           6,
		"GREEDY_DESCENT":      1,
		"GUIDED_LOCAL_SEARCH": 2,
		"SIMULATED_ANNEALING": 3,
		"TABU_SEARCH":         4,
		"GENERIC_TABU_SEARCH": 5,
	}
)

func (x LocalSearchMetaheuristic_Value) Enum() *LocalSearchMetaheuristic_Value {
	p := new(LocalSearchMetaheuristic_Value)
	*p = x
	return p
}

func (x LocalSearchMetaheuristic_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocalSearchMetaheuristic_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_ortools_constraint_solver_routing_enums_proto_enumTypes[1].Descriptor()
}

func (LocalSearchMetaheuristic_Value) Type() protoreflect.EnumType {
	return &file_ortools_constraint_solver_routing_enums_proto_enumTypes[1]
}

func (x LocalSearchMetaheuristic_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocalSearchMetaheuristic_Value.Descriptor instead.
func (LocalSearchMetaheuristic_Value) EnumDescriptor() ([]byte, []int) {
	return file_ortools_constraint_solver_routing_enums_proto_rawDescGZIP(), []int{1, 0}
}

// First solution strategies, used as starting point of local search.
type FirstSolutionStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FirstSolutionStrategy) Reset() {
	*x = FirstSolutionStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ortools_constraint_solver_routing_enums_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstSolutionStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstSolutionStrategy) ProtoMessage() {}

func (x *FirstSolutionStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_ortools_constraint_solver_routing_enums_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstSolutionStrategy.ProtoReflect.Descriptor instead.
func (*FirstSolutionStrategy) Descriptor() ([]byte, []int) {
	return file_ortools_constraint_solver_routing_enums_proto_rawDescGZIP(), []int{0}
}

// Local search metaheuristics used to guide the search. Apart from greedy
// descent, they will try to escape local minima.
type LocalSearchMetaheuristic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocalSearchMetaheuristic) Reset() {
	*x = LocalSearchMetaheuristic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ortools_constraint_solver_routing_enums_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSearchMetaheuristic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSearchMetaheuristic) ProtoMessage() {}

func (x *LocalSearchMetaheuristic) ProtoReflect() protoreflect.Message {
	mi := &file_ortools_constraint_solver_routing_enums_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSearchMetaheuristic.ProtoReflect.Descriptor instead.
func (*LocalSearchMetaheuristic) Descriptor() ([]byte, []int) {
	return file_ortools_constraint_solver_routing_enums_proto_rawDescGZIP(), []int{1}
}

var File_ortools_constraint_solver_routing_enums_proto protoreflect.FileDescriptor

var file_ortools_constraint_solver_routing_enums_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6f, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x22, 0xaf, 0x03, 0x0a, 0x15, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x95,
	0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43,
	0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x50,
	0x45, 0x53, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x54,
	0x48, 0x5f, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x41, 0x52, 0x43, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x41, 0x4c,
	0x55, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x0a, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x57, 0x45, 0x45, 0x50, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x52, 0x49,
	0x53, 0x54, 0x4f, 0x46, 0x49, 0x44, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c,
	0x4c, 0x5f, 0x55, 0x4e, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f,
	0x43, 0x48, 0x45, 0x41, 0x50, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x50, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x45,
	0x52, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x5f, 0x43, 0x48, 0x45, 0x41, 0x50, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x43,
	0x48, 0x45, 0x41, 0x50, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x53,
	0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x4c, 0x4f, 0x42,
	0x41, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x50, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x50,
	0x45, 0x53, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x5f, 0x55, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x0c, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f,
	0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52, 0x45, 0x45, 0x44,
	0x59, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47,
	0x55, 0x49, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x41, 0x4e, 0x4e, 0x45, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x41, 0x42, 0x55, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x41, 0x42, 0x55, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x05, 0x42, 0x8f, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x50,
	0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69,
	0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x2f, 0x6f, 0x72, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x6f,
	0x72, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x4f, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ortools_constraint_solver_routing_enums_proto_rawDescOnce sync.Once
	file_ortools_constraint_solver_routing_enums_proto_rawDescData = file_ortools_constraint_solver_routing_enums_proto_rawDesc
)

func file_ortools_constraint_solver_routing_enums_proto_rawDescGZIP() []byte {
	file_ortools_constraint_solver_routing_enums_proto_rawDescOnce.Do(func() {
		file_ortools_constraint_solver_routing_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ortools_constraint_solver_routing_enums_proto_rawDescData)
	})
	return file_ortools_constraint_solver_routing_enums_proto_rawDescData
}

var file_ortools_constraint_solver_routing_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ortools_constraint_solver_routing_enums_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ortools_constraint_solver_routing_enums_proto_goTypes = []interface{}{
	(FirstSolutionStrategy_Value)(0),    // 0: operations_research.FirstSolutionStrategy.Value
	(LocalSearchMetaheuristic_Value)(0), // 1: operations_research.LocalSearchMetaheuristic.Value
	(*FirstSolutionStrategy)(nil),       // 2: operations_research.FirstSolutionStrategy
	(*LocalSearchMetaheuristic)(nil),    // 3: operations_research.LocalSearchMetaheuristic
}
var file_ortools_constraint_solver_routing_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ortools_constraint_solver_routing_enums_proto_init() }
func file_ortools_constraint_solver_routing_enums_proto_init() {
	if File_ortools_constraint_solver_routing_enums_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ortools_constraint_solver_routing_enums_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstSolutionStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ortools_constraint_solver_routing_enums_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSearchMetaheuristic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ortools_constraint_solver_routing_enums_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ortools_constraint_solver_routing_enums_proto_goTypes,
		DependencyIndexes: file_ortools_constraint_solver_routing_enums_proto_depIdxs,
		EnumInfos:         file_ortools_constraint_solver_routing_enums_proto_enumTypes,
		MessageInfos:      file_ortools_constraint_solver_routing_enums_proto_msgTypes,
	}.Build()
	File_ortools_constraint_solver_routing_enums_proto = out.File
	file_ortools_constraint_solver_routing_enums_proto_rawDesc = nil
	file_ortools_constraint_solver_routing_enums_proto_goTypes = nil
	file_ortools_constraint_solver_routing_enums_proto_depIdxs = nil
}
